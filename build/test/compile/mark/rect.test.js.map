{"version":3,"file":"rect.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/rect.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\nimport {rect} from '../../../src/compile/mark/rect';\nimport {fieldInvalidTestValueRef} from '../../../src/compile/mark/valueref';\nimport {PositionFieldDef} from '../../../src/fielddef';\nimport * as log from '../../../src/log';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('Mark: Rect', () => {\n  describe('simple vertical', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'rect',\n      encoding: {\n        x: {field: 'Origin', type: 'nominal'},\n        y: {type: 'quantitative', field: 'Acceleration', aggregate: 'mean'}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar, with y from zero to field value and x band', () => {\n      expect(props.x).toEqual({scale: 'x', field: 'Origin'});\n      expect(props.width).toEqual({scale: 'x', band: true});\n      expect(props.y).toEqual({scale: 'y', field: 'mean_Acceleration'});\n      expect(props.y2).toEqual({scale: 'y', value: 0});\n      expect(props.height).toBeUndefined();\n    });\n  });\n\n  describe('simple horizontal', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'rect',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar from zero to field value and y band', () => {\n      expect(props.y).toEqual({scale: 'y', field: 'Origin'});\n      expect(props.height).toEqual({scale: 'y', band: true});\n      expect(props.x).toEqual({scale: 'x', field: 'mean_Acceleration'});\n      expect(props.x2).toEqual({scale: 'x', value: 0});\n      expect(props.width).toBeUndefined();\n    });\n  });\n\n  describe('simple horizontal with size field', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'rect',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'},\n        size: {aggregate: 'mean', field: 'Horsepower', type: 'quantitative'}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    log.wrap(localLogger => {\n      it('should draw bar from zero to field value and with band value for x/width', () => {\n        expect(props.y).toEqual({scale: 'y', field: 'Origin'});\n        expect(props.height).toEqual({scale: 'y', band: true});\n        expect(props.x).toEqual({scale: 'x', field: 'mean_Acceleration'});\n        expect(props.x2).toEqual({scale: 'x', value: 0});\n        expect(props.width).toBeUndefined();\n      });\n\n      it('should throw warning', () => {\n        expect(localLogger.warns[0]).toEqual(log.message.cannotApplySizeToNonOrientedMark('rect'));\n      });\n    });\n  });\n\n  describe('horizontal bin', () => {\n    const y: PositionFieldDef<string> = {bin: true, field: 'Horsepower', type: 'quantitative'};\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'rect',\n      encoding: {\n        y,\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar with y and y2', () => {\n      expect(props.y2).toEqual([fieldInvalidTestValueRef(y, 'y'), {scale: 'y', field: 'bin_maxbins_10_Horsepower'}]);\n      expect(props.y).toEqual([fieldInvalidTestValueRef(y, 'y'), {scale: 'y', field: 'bin_maxbins_10_Horsepower_end'}]);\n      expect(props.height).toBeUndefined();\n    });\n  });\n\n  describe('vertical bin', () => {\n    const x: PositionFieldDef<string> = {bin: true, field: 'Horsepower', type: 'quantitative'};\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'rect',\n      encoding: {\n        x,\n        y: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar with x and x2', () => {\n      expect(props.x2).toEqual([fieldInvalidTestValueRef(x, 'x'), {scale: 'x', field: 'bin_maxbins_10_Horsepower'}]);\n      expect(props.x).toEqual([fieldInvalidTestValueRef(x, 'x'), {scale: 'x', field: 'bin_maxbins_10_Horsepower_end'}]);\n      expect(props.width).toBeUndefined();\n    });\n  });\n\n  describe('simple ranged', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'rect',\n      encoding: {\n        y: {aggregate: 'min', field: 'Horsepower', type: 'quantitative'},\n        y2: {aggregate: 'max', field: 'Horsepower', type: 'quantitative'},\n        x: {aggregate: 'min', field: 'Acceleration', type: 'quantitative'},\n        x2: {aggregate: 'max', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw rectangle with x, x2, y, y2', () => {\n      expect(props.x).toEqual({scale: 'x', field: 'min_Acceleration'});\n      expect(props.x2).toEqual({scale: 'x', field: 'max_Acceleration'});\n      expect(props.y).toEqual({scale: 'y', field: 'min_Horsepower'});\n      expect(props.y2).toEqual({scale: 'y', field: 'max_Horsepower'});\n    });\n  });\n\n  describe('simple heatmap', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'rect',\n      encoding: {\n        y: {field: 'Origin', type: 'ordinal'},\n        x: {field: 'Cylinders', type: 'ordinal'},\n        color: {aggregate: 'mean', field: 'Horsepower', type: 'quantitative'}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw rect with x and y bands', () => {\n      expect(props.x).toEqual({scale: 'x', field: 'Cylinders'});\n      expect(props.width).toEqual({scale: 'x', band: true});\n      expect(props.y).toEqual({scale: 'y', field: 'Origin'});\n      expect(props.height).toEqual({scale: 'y', band: true});\n    });\n  });\n\n  describe('vertical binned data', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'bar',\n      encoding: {\n        x: {\n          field: 'bin_start',\n          bin: 'binned',\n          type: 'quantitative',\n          axis: {\n            tickMinStep: 2\n          }\n        },\n        x2: {\n          field: 'bin_end',\n          type: 'quantitative'\n        },\n        y: {\n          field: 'count',\n          type: 'quantitative'\n        }\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar with x and x2', () => {\n      expect(props.x2).toEqual({scale: 'x', field: 'bin_start'});\n      expect(props.x).toEqual({scale: 'x', field: 'bin_end'});\n      expect(props.y).toEqual({scale: 'y', field: 'count'});\n      expect(props.y2).toEqual({scale: 'y', value: 0});\n      expect(props.width).toBeUndefined();\n    });\n  });\n\n  describe('horizontal binned data', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'bar',\n      encoding: {\n        y: {\n          field: 'bin_start',\n          bin: 'binned',\n          type: 'quantitative',\n          axis: {\n            tickMinStep: 2\n          }\n        },\n        y2: {\n          field: 'bin_end',\n          type: 'quantitative'\n        },\n        x: {\n          field: 'count',\n          type: 'quantitative'\n        }\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar with y and y2', () => {\n      expect(props.y2).toEqual({scale: 'y', field: 'bin_start'});\n      expect(props.y).toEqual({scale: 'y', field: 'bin_end'});\n      expect(props.x).toEqual({scale: 'x', field: 'count'});\n      expect(props.x2).toEqual({scale: 'x', value: 0});\n      expect(props.width).toBeUndefined();\n    });\n  });\n});\n"]}