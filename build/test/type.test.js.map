{"version":3,"file":"type.test.js","sourceRoot":"","sources":["../../test/type.test.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,aAAa,CAAC;AAEpC,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;IACpB,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,KAAK,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,cAAc,EAAE,cAAc,CAAC,EAAE;gBAC1D,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;aACrD;YACD,KAAK,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE,UAAU,CAAC,EAAE;gBAClD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;aACjD;YACD,KAAK,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE;gBAChD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;aAChD;YACD,KAAK,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE;gBAChD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;aAChD;YACD,KAAK,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE;gBACtC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;aAChD;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import * as type from '../src/type';\n\ndescribe('type', () => {\n  describe('getFullName()', () => {\n    it('should return correct lowercase, full type names.', () => {\n      for (const t of ['q', 'Q', 'quantitative', 'QUANTITATIVE']) {\n        expect(type.getFullName(t)).toEqual('quantitative');\n      }\n      for (const t of ['t', 'T', 'temporal', 'TEMPORAL']) {\n        expect(type.getFullName(t)).toEqual('temporal');\n      }\n      for (const t of ['o', 'O', 'ordinal', 'ORDINAL']) {\n        expect(type.getFullName(t)).toEqual('ordinal');\n      }\n      for (const t of ['n', 'N', 'nominal', 'NOMINAL']) {\n        expect(type.getFullName(t)).toEqual('nominal');\n      }\n      for (const t of ['geojson', 'GEOJSON']) {\n        expect(type.getFullName(t)).toEqual('geojson');\n      }\n    });\n\n    it('should return undefined for invalid type', () => {\n      expect(type.getFullName('haha')).toEqual(undefined);\n    });\n  });\n});\n"]}