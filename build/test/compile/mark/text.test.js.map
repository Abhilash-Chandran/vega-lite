{"version":3,"file":"text.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/text.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\nimport {X, Y} from '../../../src/channel';\nimport {text} from '../../../src/compile/mark/text';\nimport {UnitModel} from '../../../src/compile/unit';\nimport {NormalizedUnitSpec, TopLevel, TopLevelSpec} from '../../../src/spec';\nimport {parseModelWithScale, parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('Mark: Text', () => {\n  describe('with stacked x', () => {\n    // This is a simplified example for stacked text.\n    // In reality this will be used as stacked's overlayed marker\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'text',\n      encoding: {\n        x: {aggregate: 'sum', field: 'a', type: 'quantitative'},\n        color: {field: 'b', type: 'ordinal'}\n      },\n      data: {url: 'data/barley.json'},\n      config: {stack: 'zero'}\n    });\n\n    const props = text.encodeEntry(model);\n\n    it('should use stack_end on x', () => {\n      expect(props.x).toEqual({scale: X, field: 'sum_a_end'});\n    });\n  });\n\n  describe('with stacked y', () => {\n    // This is a simplified example for stacked text.\n    // In reality this will be used as stacked's overlayed marker\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'text',\n      encoding: {\n        y: {aggregate: 'sum', field: 'a', type: 'quantitative'},\n        color: {field: 'b', type: 'ordinal'}\n      },\n      data: {url: 'data/barley.json'},\n      config: {stack: 'zero'}\n    });\n\n    const props = text.encodeEntry(model);\n\n    it('should use stack_end on y', () => {\n      expect(props.y).toEqual({scale: Y, field: 'sum_a_end'});\n    });\n  });\n\n  describe('with quantitative and format', () => {\n    const spec: NormalizedUnitSpec = {\n      mark: 'text',\n      encoding: {\n        text: {field: 'foo', type: 'quantitative', format: 'd'}\n      }\n    };\n    const model = parseUnitModelWithScaleAndLayoutSize(spec);\n    const props = text.encodeEntry(model);\n\n    it('should use number template', () => {\n      expect(props.text).toEqual({signal: `format(datum[\"foo\"], \"d\")`});\n    });\n  });\n\n  describe('with binned quantitative', () => {\n    const spec: NormalizedUnitSpec = {\n      mark: 'text',\n      encoding: {\n        text: {bin: true, field: 'foo', type: 'quantitative', format: 'd'}\n      }\n    };\n    const model = parseUnitModelWithScaleAndLayoutSize(spec);\n    const props = text.encodeEntry(model);\n\n    it('should output correct bin range', () => {\n      expect(props.text).toEqual({\n        signal: `datum[\"bin_maxbins_10_foo\"] === null || isNaN(datum[\"bin_maxbins_10_foo\"]) ? \"null\" : format(datum[\"bin_maxbins_10_foo\"], \"d\") + \" - \" + format(datum[\"bin_maxbins_10_foo_end\"], \"d\")`\n      });\n    });\n  });\n\n  describe('with temporal', () => {\n    const spec: NormalizedUnitSpec = {\n      mark: 'text',\n      encoding: {\n        text: {field: 'foo', type: 'temporal'}\n      }\n    };\n    const model = parseUnitModelWithScaleAndLayoutSize(spec);\n    const props = text.encodeEntry(model);\n\n    it('should use date template', () => {\n      expect(props.text).toEqual({signal: `timeFormat(datum[\"foo\"], '%b %d, %Y')`});\n    });\n  });\n\n  describe('with x, y, text (ordinal)', () => {\n    const spec: NormalizedUnitSpec = {\n      mark: 'text',\n      encoding: {\n        x: {field: 'Acceleration', type: 'ordinal'},\n        y: {field: 'Displacement', type: 'quantitative'},\n        text: {field: 'Origin', type: 'ordinal'}\n      },\n      data: {url: 'data/cars.json'}\n    };\n    const model = parseUnitModelWithScaleAndLayoutSize(spec);\n    const props = text.encodeEntry(model);\n\n    it('should scale on x', () => {\n      expect(props.x).toEqual({scale: X, field: 'Acceleration'});\n    });\n    it('should scale on y', () => {\n      expect(props.y).toEqual({scale: Y, field: 'Displacement'});\n    });\n\n    it('should be centered', () => {\n      expect(props.align).toEqual({value: 'center'});\n    });\n\n    it('should map text without template', () => {\n      expect(props.text).toEqual({signal: `''+datum[\"Origin\"]`});\n    });\n  });\n\n  describe('with size in mark def', () => {\n    const spec: NormalizedUnitSpec = {\n      mark: {type: 'text', size: 5},\n      encoding: {\n        text: {field: 'Origin', type: 'ordinal'}\n      },\n      data: {url: 'data/cars.json'}\n    };\n    const model = parseUnitModelWithScaleAndLayoutSize(spec);\n    const props = text.encodeEntry(model);\n\n    it('should map size to fontSize', () => {\n      expect(props.fontSize).toEqual({value: 5});\n    });\n  });\n\n  describe('with config.text.size', () => {\n    const spec: TopLevel<NormalizedUnitSpec> = {\n      mark: {type: 'text'},\n      encoding: {\n        text: {field: 'Origin', type: 'ordinal'}\n      },\n      data: {url: 'data/cars.json'},\n      config: {text: {size: 25}}\n    };\n    const model = parseUnitModelWithScaleAndLayoutSize(spec);\n    const props = text.encodeEntry(model);\n\n    it('should map size to fontSize', () => {\n      expect(props.fontSize).toEqual({value: 25});\n    });\n  });\n\n  describe('with config.text.size', () => {\n    const spec: TopLevel<NormalizedUnitSpec> = {\n      mark: {type: 'text'},\n      encoding: {\n        text: {field: 'Origin', type: 'ordinal'}\n      },\n      data: {url: 'data/cars.json'},\n      config: {text: {fontSize: 25}}\n    };\n    const model = parseUnitModelWithScaleAndLayoutSize(spec);\n    const props = text.encodeEntry(model);\n\n    it('should map size to fontSize', () => {\n      expect(props.fontSize).toEqual({value: 25});\n    });\n  });\n\n  describe('with row, column, text, color, and size', () => {\n    const spec: TopLevelSpec = {\n      mark: 'text',\n      encoding: {\n        row: {field: 'Origin', type: 'ordinal'},\n        column: {field: 'Cylinders', type: 'ordinal'},\n        text: {field: 'Acceleration', type: 'quantitative', aggregate: 'mean'},\n        color: {field: 'Acceleration', type: 'quantitative', aggregate: 'mean'},\n        size: {field: 'Acceleration', type: 'quantitative', aggregate: 'mean'}\n      },\n      data: {url: 'data/cars.json'}\n    };\n    const model = parseModelWithScale(spec);\n    model.parseLayoutSize();\n\n    const childModel = model.children[0] as UnitModel;\n    const props = text.encodeEntry(childModel);\n\n    it('should fit the view on x', () => {\n      expect(props.x).toEqual({signal: 'child_width', mult: 0.5});\n    });\n\n    it('should center on y', () => {\n      expect(props.y).toEqual({\n        mult: 0.5,\n        signal: 'child_height'\n      });\n    });\n\n    it('should map text to expression', () => {\n      expect(props.text).toEqual({\n        signal: `format(datum[\"mean_Acceleration\"], \"\")`\n      });\n    });\n\n    it('should map color to fill', () => {\n      expect(props.fill).toEqual([\n        {\n          test: 'datum[\"mean_Acceleration\"] === null || isNaN(datum[\"mean_Acceleration\"])',\n          value: null\n        },\n        {\n          scale: 'color',\n          field: 'mean_Acceleration'\n        }\n      ]);\n    });\n\n    it('should map size to fontSize', () => {\n      expect(props.fontSize).toEqual({\n        scale: 'size',\n        field: 'mean_Acceleration'\n      });\n    });\n  });\n});\n"]}