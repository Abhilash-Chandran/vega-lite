{"version":3,"file":"rect.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/rect.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\nimport {assert} from 'chai';\nimport {rect} from '../../../src/compile/mark/rect';\nimport * as log from '../../../src/log';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('Mark: Rect', () => {\n  describe('simple vertical', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'rect',\n      encoding: {\n        x: {field: 'Origin', type: 'nominal'},\n        y: {type: 'quantitative', field: 'Acceleration', aggregate: 'mean'}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar, with y from zero to field value and x band', () => {\n      assert.deepEqual(props.x, {scale: 'x', field: 'Origin'});\n      assert.deepEqual(props.width, {scale: 'x', band: true});\n      assert.deepEqual(props.y, {scale: 'y', field: 'mean_Acceleration'});\n      assert.deepEqual(props.y2, {scale: 'y', value: 0});\n      assert.isUndefined(props.height);\n    });\n  });\n\n  describe('simple horizontal', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'rect',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar from zero to field value and y band', () => {\n      assert.deepEqual(props.y, {scale: 'y', field: 'Origin'});\n      assert.deepEqual(props.height, {scale: 'y', band: true});\n      assert.deepEqual(props.x, {scale: 'x', field: 'mean_Acceleration'});\n      assert.deepEqual(props.x2, {scale: 'x', value: 0});\n      assert.isUndefined(props.width);\n    });\n  });\n\n  describe('simple horizontal with size field', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'rect',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'},\n        size: {aggregate: 'mean', field: 'Horsepower', type: 'quantitative'}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    log.wrap(localLogger => {\n      it('should draw bar from zero to field value and with band value for x/width', () => {\n        assert.deepEqual(props.y, {scale: 'y', field: 'Origin'});\n        assert.deepEqual(props.height, {scale: 'y', band: true});\n        assert.deepEqual(props.x, {scale: 'x', field: 'mean_Acceleration'});\n        assert.deepEqual(props.x2, {scale: 'x', value: 0});\n        assert.isUndefined(props.width);\n      });\n\n      it('should throw warning', () => {\n        assert.equal(localLogger.warns[0], log.message.cannotApplySizeToNonOrientedMark('rect'));\n      });\n    });\n  });\n\n  describe('horizontal bin', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'rect',\n      encoding: {\n        y: {bin: true, field: 'Horsepower', type: 'quantitative'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar with y and y2', () => {\n      assert.deepEqual(props.y2, {scale: 'y', field: 'bin_maxbins_10_Horsepower'});\n      assert.deepEqual(props.y, {scale: 'y', field: 'bin_maxbins_10_Horsepower_end'});\n      assert.isUndefined(props.height);\n    });\n  });\n\n  describe('vertical bin', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'rect',\n      encoding: {\n        x: {bin: true, field: 'Horsepower', type: 'quantitative'},\n        y: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar with x and x2', () => {\n      assert.deepEqual(props.x2, {scale: 'x', field: 'bin_maxbins_10_Horsepower'});\n      assert.deepEqual(props.x, {scale: 'x', field: 'bin_maxbins_10_Horsepower_end'});\n      assert.isUndefined(props.width);\n    });\n  });\n\n  describe('simple ranged', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'rect',\n      encoding: {\n        y: {aggregate: 'min', field: 'Horsepower', type: 'quantitative'},\n        y2: {aggregate: 'max', field: 'Horsepower', type: 'quantitative'},\n        x: {aggregate: 'min', field: 'Acceleration', type: 'quantitative'},\n        x2: {aggregate: 'max', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw rectangle with x, x2, y, y2', () => {\n      assert.deepEqual(props.x, {scale: 'x', field: 'min_Acceleration'});\n      assert.deepEqual(props.x2, {scale: 'x', field: 'max_Acceleration'});\n      assert.deepEqual(props.y, {scale: 'y', field: 'min_Horsepower'});\n      assert.deepEqual(props.y2, {scale: 'y', field: 'max_Horsepower'});\n    });\n  });\n\n  describe('simple heatmap', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'rect',\n      encoding: {\n        y: {field: 'Origin', type: 'ordinal'},\n        x: {field: 'Cylinders', type: 'ordinal'},\n        color: {aggregate: 'mean', field: 'Horsepower', type: 'quantitative'}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw rect with x and y bands', () => {\n      assert.deepEqual(props.x, {scale: 'x', field: 'Cylinders'});\n      assert.deepEqual(props.width, {scale: 'x', band: true});\n      assert.deepEqual(props.y, {scale: 'y', field: 'Origin'});\n      assert.deepEqual(props.height, {scale: 'y', band: true});\n    });\n  });\n\n  describe('vertical binned data', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'bar',\n      encoding: {\n        x: {\n          field: 'bin_start',\n          bin: 'binned',\n          type: 'quantitative',\n          axis: {\n            tickStep: 2\n          }\n        },\n        x2: {\n          field: 'bin_end',\n          type: 'quantitative'\n        },\n        y: {\n          field: 'count',\n          type: 'quantitative'\n        }\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar with x and x2', () => {\n      assert.deepEqual(props.x2, {scale: 'x', field: 'bin_start', offset: 0});\n      assert.deepEqual(props.x, {scale: 'x', field: 'bin_end', offset: 0});\n      assert.deepEqual(props.y, {scale: 'y', field: 'count'});\n      assert.deepEqual(props.y2, {scale: 'y', value: 0});\n      assert.isUndefined(props.width);\n    });\n  });\n\n  describe('horizontal binned data', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'bar',\n      encoding: {\n        y: {\n          field: 'bin_start',\n          bin: 'binned',\n          type: 'quantitative',\n          axis: {\n            tickStep: 2\n          }\n        },\n        y2: {\n          field: 'bin_end',\n          type: 'quantitative'\n        },\n        x: {\n          field: 'count',\n          type: 'quantitative'\n        }\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar with y and y2', () => {\n      assert.deepEqual(props.y2, {scale: 'y', field: 'bin_start', offset: 0});\n      assert.deepEqual(props.y, {scale: 'y', field: 'bin_end', offset: 0});\n      assert.deepEqual(props.x, {scale: 'x', field: 'count'});\n      assert.deepEqual(props.x2, {scale: 'x', value: 0});\n      assert.isUndefined(props.width);\n    });\n  });\n});\n"]}