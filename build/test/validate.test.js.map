{"version":3,"file":"validate.test.js","sourceRoot":"","sources":["../../test/validate.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {AREA, BAR, LINE, TEXT} from '../src/mark';\nimport {getEncodingMappingError} from '../src/validate';\n\ndescribe('vl.validate', () => {\n  describe('getEncodingMappingError()', () => {\n    it('should return no error for valid specs', () => {\n      expect(\n        getEncodingMappingError({\n          mark: BAR,\n          encoding: {\n            x: {field: 'a', type: 'quantitative'}\n          }\n        })\n      ).toBeNull();\n\n      expect(\n        getEncodingMappingError({\n          mark: LINE,\n          encoding: {\n            x: {field: 'b', type: 'quantitative'},\n            y: {field: 'a', type: 'quantitative'}\n          }\n        })\n      ).toBeNull();\n\n      expect(\n        getEncodingMappingError({\n          mark: AREA,\n          encoding: {\n            x: {field: 'a', type: 'quantitative'},\n            y: {field: 'b', type: 'quantitative'}\n          }\n        })\n      ).toBeNull();\n    });\n\n    it('should return error for invalid specs', () => {\n      expect(\n        getEncodingMappingError({\n          mark: LINE,\n          encoding: {\n            x: {field: 'b', type: 'quantitative'} // missing y\n          }\n        })\n      ).not.toBeNull();\n\n      expect(\n        getEncodingMappingError({\n          mark: AREA,\n          encoding: {\n            y: {field: 'b', type: 'quantitative'} // missing x\n          }\n        })\n      ).not.toBeNull();\n\n      expect(\n        getEncodingMappingError({\n          mark: TEXT,\n          encoding: {\n            y: {field: 'b', type: 'quantitative'} // missing text\n          }\n        })\n      ).not.toBeNull();\n\n      expect(\n        getEncodingMappingError({\n          mark: LINE,\n          encoding: {\n            shape: {field: 'b', type: 'nominal'} // using shape with line\n          }\n        })\n      ).not.toBeNull();\n\n      expect(\n        getEncodingMappingError({\n          mark: AREA,\n          encoding: {\n            shape: {field: 'b', type: 'nominal'} // using shape with area\n          }\n        })\n      ).not.toBeNull();\n\n      expect(\n        getEncodingMappingError({\n          mark: BAR,\n          encoding: {\n            shape: {field: 'b', type: 'nominal'} // using shape with bar\n          }\n        })\n      ).not.toBeNull();\n    });\n  });\n});\n"]}