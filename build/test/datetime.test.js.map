{"version":3,"file":"datetime.test.js","sourceRoot":"","sources":["../../test/datetime.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,YAAY,EAAC,MAAM,iBAAiB,CAAC;AAC7C,OAAO,KAAK,GAAG,MAAM,YAAY,CAAC;AAElC,QAAQ,CAAC,UAAU,EAAE;IACnB,QAAQ,CAAC,cAAc,EAAE;QACvB,EAAE,CACA,yDAAyD,EACzD,GAAG,CAAC,IAAI,CAAC,UAAA,WAAW;YAClB,IAAM,CAAC,GAAG;gBACR,IAAI,EAAE,IAAI;gBACV,GAAG,EAAE,QAAQ;aACd,CAAC;YACF,IAAM,IAAI,GAAG,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACnC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,kCAAkC,CAAC,CAAC;YACvD,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CACH,CAAC;QAEF,EAAE,CAAC,4CAA4C,EAAE;YAC/C,IAAM,IAAI,GAAG,YAAY,CACvB;gBACE,OAAO,EAAE,CAAC;aACX,EACD,IAAI,CACL,CAAC;YACF,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,iCAAiC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CACA,oCAAoC,EACpC,GAAG,CAAC,IAAI,CAAC,UAAA,WAAW;YAClB,MAAM,CAAC,KAAK,CACV,YAAY,CACV;gBACE,OAAO,EAAE,CAAC;aACX,EACD,IAAI,CACL,EACD,iCAAiC,CAClC,CAAC;YACF,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QAChF,CAAC,CAAC,CACH,CAAC;QAEF,EAAE,CAAC,wCAAwC,EAAE;YAC3C,MAAM,CAAC,MAAM,CACX;gBACE,YAAY,CAAC,EAAC,OAAO,EAAE,GAAG,EAAC,EAAE,IAAI,CAAC,CAAC;YACrC,CAAC,EACD,KAAK,EACL,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE,GAAG,CAAC,CAC5C,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE;YAC7C,IAAM,IAAI,GAAG,YAAY,CACvB;gBACE,KAAK,EAAE,CAAC;aACT,EACD,IAAI,CACL,CAAC;YACF,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,+BAA+B,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE;YAC1C,MAAM,CAAC,KAAK,CACV,YAAY,CACV;gBACE,KAAK,EAAE,SAAS;aACjB,EACD,IAAI,CACL,EACD,+BAA+B,CAChC,CAAC;YACF,MAAM,CAAC,KAAK,CACV,YAAY,CACV;gBACE,KAAK,EAAE,SAAS;aACjB,EACD,IAAI,CACL,EACD,+BAA+B,CAChC,CAAC;YACF,MAAM,CAAC,KAAK,CACV,YAAY,CACV;gBACE,KAAK,EAAE,KAAK;aACb,EACD,IAAI,CACL,EACD,+BAA+B,CAChC,CAAC;YACF,MAAM,CAAC,KAAK,CACV,YAAY,CACV;gBACE,KAAK,EAAE,KAAK;aACb,EACD,IAAI,CACL,EACD,+BAA+B,CAChC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE;YACzC,MAAM,CAAC,MAAM,CACX;gBACE,YAAY,CAAC,EAAC,KAAK,EAAE,GAAG,EAAC,EAAE,IAAI,CAAC,CAAC;YACnC,CAAC,EACD,KAAK,EACL,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,OAAO,EAAE,GAAG,CAAC,CAC1C,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE;YACrD,MAAM,CAAC,KAAK,CACV,YAAY,CACV;gBACE,GAAG,EAAE,CAAC;aACP,EACD,IAAI,CACL,EACD,oCAAoC,CACrC,CAAC;YACF,MAAM,CAAC,KAAK,CACV,YAAY,CACV;gBACE,GAAG,EAAE,CAAC;aACP,EACD,IAAI,CACL,EACD,oCAAoC,CACrC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yEAAyE,EAAE;YAC5E,MAAM,CAAC,KAAK,CACV,YAAY,CACV;gBACE,GAAG,EAAE,QAAQ;aACd,EACD,IAAI,CACL,EACD,oCAAoC,CACrC,CAAC;YACF,MAAM,CAAC,KAAK,CACV,YAAY,CACV;gBACE,GAAG,EAAE,QAAQ;aACd,EACD,IAAI,CACL,EACD,oCAAoC,CACrC,CAAC;YACF,MAAM,CAAC,KAAK,CACV,YAAY,CACV;gBACE,GAAG,EAAE,KAAK;aACX,EACD,IAAI,CACL,EACD,oCAAoC,CACrC,CAAC;YACF,MAAM,CAAC,KAAK,CACV,YAAY,CACV;gBACE,GAAG,EAAE,KAAK;aACX,EACD,IAAI,CACL,EACD,oCAAoC,CACrC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE;YACvC,MAAM,CAAC,MAAM,CACX;gBACE,YAAY,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,EAAE,IAAI,CAAC,CAAC;YACjC,CAAC,EACD,KAAK,EACL,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,EAAE,GAAG,CAAC,CACxC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE;YAClD,IAAM,CAAC,GAAG;gBACR,IAAI,EAAE,IAAI;gBACV,GAAG,EAAE,QAAQ;gBACb,GAAG,EAAE,IAAI;aACV,CAAC;YACF,IAAM,IAAI,GAAG,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACnC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,oEAAoE;IACtE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {assert} from 'chai';\nimport {dateTimeExpr} from '../src/datetime';\nimport * as log from '../src/log';\n\ndescribe('datetime', () => {\n  describe('dateTimeExpr', () => {\n    it(\n      'should drop day if day is combined with year/month/date',\n      log.wrap(localLogger => {\n        const d = {\n          year: 2007,\n          day: 'monday'\n        };\n        const expr = dateTimeExpr(d, true);\n        assert.equal(expr, 'datetime(2007, 0, 1, 0, 0, 0, 0)');\n        assert.equal(localLogger.warns[0], log.message.droppedDay(d));\n      })\n    );\n\n    it('should normalize numeric quarter correctly', () => {\n      const expr = dateTimeExpr(\n        {\n          quarter: 2\n        },\n        true\n      );\n      assert.equal(expr, 'datetime(0, 1*3, 1, 0, 0, 0, 0)');\n    });\n\n    it(\n      'should log warning for quarter > 4',\n      log.wrap(localLogger => {\n        assert.equal(\n          dateTimeExpr(\n            {\n              quarter: 5\n            },\n            true\n          ),\n          'datetime(0, 4*3, 1, 0, 0, 0, 0)'\n        );\n        assert.equal(localLogger.warns[0], log.message.invalidTimeUnit('quarter', 5));\n      })\n    );\n\n    it('should throw error for invalid quarter', () => {\n      assert.throws(\n        () => {\n          dateTimeExpr({quarter: 'Q'}, true);\n        },\n        Error,\n        log.message.invalidTimeUnit('quarter', 'Q')\n      );\n    });\n\n    it('should normalize numeric month correctly', () => {\n      const expr = dateTimeExpr(\n        {\n          month: 1\n        },\n        true\n      );\n      assert.equal(expr, 'datetime(0, 0, 1, 0, 0, 0, 0)');\n    });\n\n    it('should normalize month name correctly', () => {\n      assert.equal(\n        dateTimeExpr(\n          {\n            month: 'January'\n          },\n          true\n        ),\n        'datetime(0, 0, 1, 0, 0, 0, 0)'\n      );\n      assert.equal(\n        dateTimeExpr(\n          {\n            month: 'january'\n          },\n          true\n        ),\n        'datetime(0, 0, 1, 0, 0, 0, 0)'\n      );\n      assert.equal(\n        dateTimeExpr(\n          {\n            month: 'Jan'\n          },\n          true\n        ),\n        'datetime(0, 0, 1, 0, 0, 0, 0)'\n      );\n      assert.equal(\n        dateTimeExpr(\n          {\n            month: 'jan'\n          },\n          true\n        ),\n        'datetime(0, 0, 1, 0, 0, 0, 0)'\n      );\n    });\n\n    it('should throw error for invalid month', () => {\n      assert.throws(\n        () => {\n          dateTimeExpr({month: 'J'}, true);\n        },\n        Error,\n        log.message.invalidTimeUnit('month', 'J')\n      );\n    });\n\n    it('should normalize numeric day (of week) correctly', () => {\n      assert.equal(\n        dateTimeExpr(\n          {\n            day: 0\n          },\n          true\n        ),\n        'datetime(2006, 0, 0+1, 0, 0, 0, 0)'\n      );\n      assert.equal(\n        dateTimeExpr(\n          {\n            day: 7\n          },\n          true\n        ),\n        'datetime(2006, 0, 0+1, 0, 0, 0, 0)'\n      );\n    });\n\n    it('should normalize day name correctly and use year 2006 to ensure correct', () => {\n      assert.equal(\n        dateTimeExpr(\n          {\n            day: 'Sunday'\n          },\n          true\n        ),\n        'datetime(2006, 0, 0+1, 0, 0, 0, 0)'\n      );\n      assert.equal(\n        dateTimeExpr(\n          {\n            day: 'sunday'\n          },\n          true\n        ),\n        'datetime(2006, 0, 0+1, 0, 0, 0, 0)'\n      );\n      assert.equal(\n        dateTimeExpr(\n          {\n            day: 'Sun'\n          },\n          true\n        ),\n        'datetime(2006, 0, 0+1, 0, 0, 0, 0)'\n      );\n      assert.equal(\n        dateTimeExpr(\n          {\n            day: 'sun'\n          },\n          true\n        ),\n        'datetime(2006, 0, 0+1, 0, 0, 0, 0)'\n      );\n    });\n\n    it('should throw error for invalid day', () => {\n      assert.throws(\n        () => {\n          dateTimeExpr({day: 'S'}, true);\n        },\n        Error,\n        log.message.invalidTimeUnit('day', 'S')\n      );\n    });\n\n    it('should use utc expression if utc is specified', () => {\n      const d = {\n        year: 2007,\n        day: 'monday',\n        utc: true\n      };\n      const expr = dateTimeExpr(d, true);\n      assert.equal(expr, 'utc(2007, 0, 1, 0, 0, 0, 0)');\n    });\n\n    // Note: Other part of coverage handled by timeUnit.fieldExpr's test\n  });\n});\n"]}