{"version":3,"file":"signal.test.js","sourceRoot":"","sources":["../../../test/compile/signal.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,gBAAgB,EAAC,MAAM,0BAA0B,CAAC;AAC1D,OAAO,EAAC,IAAI,EAAC,MAAM,kBAAkB,CAAC;AAEtC,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,MAAM,CAAC,GAAG,IAAI,gBAAgB,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,CAAC;IAEpD,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,MAAM,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QACnC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACrC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAC,MAAM,EAAE,aAAa,EAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,CAAC,GAAG,IAAI,gBAAgB,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,CAAC;QACnD,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAC,MAAM,EAAE,YAAY,EAAC,CAAC,CAAC;QAE1C,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAC,MAAM,EAAE,aAAa,EAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {SignalRefWrapper} from '../../src/compile/signal';\nimport {keys} from './../../src/util';\n\ndescribe('SignalRefWrapper', () => {\n  const s = new SignalRefWrapper(() => 'hello world');\n\n  it('should have a signal property', () => {\n    expect(s).toHaveProperty('signal');\n    expect(s.signal).toBe('hello world');\n    expect(keys(s)).toEqual(['signal']);\n  });\n\n  it('should serialize correctly', () => {\n    expect(JSON.stringify(s)).toBe('{\"signal\":\"hello world\"}');\n  });\n\n  it('should look like a signal', () => {\n    expect(s).toEqual({signal: 'hello world'});\n  });\n\n  it('should not overwrite previous property', () => {\n    const t = new SignalRefWrapper(() => 'hello vega');\n    expect(t).toEqual({signal: 'hello vega'});\n\n    expect(s).toEqual({signal: 'hello world'});\n  });\n});\n"]}