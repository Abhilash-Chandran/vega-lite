{"version":3,"file":"geojson.test.js","sourceRoot":"","sources":["../../../../test/compile/data/geojson.test.ts"],"names":[],"mappings":";;AAAA,6BAA4B;AAC5B,+DAAgE;AAChE,6DAA8D;AAC9D,0CAAkD;AAClD,mCAAgE;AAChE,8BAA8B;AAE9B,QAAQ,CAAC,sBAAsB,EAAE;IAC/B,EAAE,CAAC,8CAA8C,EAAE;QACjD,IAAM,KAAK,GAAG,2CAAoC,CAAC;YACjD,MAAM,EAAE;gBACN,KAAK,EAAE,mBAAmB;gBAC1B,QAAQ,EAAE;oBACR,MAAM,EAAE,KAAK;iBACd;aACF;YACD,MAAM,EAAE,QAAQ;YAChB,UAAU,EAAE;gBACV,WAAW,EAAE;oBACX,OAAO,EAAE,WAAW;oBACpB,MAAM,EAAE,cAAc;iBACvB;gBACD,UAAU,EAAE;oBACV,OAAO,EAAE,UAAU;oBACnB,MAAM,EAAE,cAAc;iBACvB;aACF;SACF,CAAC,CAAC;QAEH,IAAM,IAAI,GAAG,IAAI,uBAAY,CAAC,IAAI,CAAC,CAAC;QACpC,qBAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAElC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;YAG1B,aAAM,CAAC,UAAU,CAAC,IAAI,EAAE,qBAAW,CAAC,CAAC;YACrC,IAAM,SAAS,GAAiB,IAAK,CAAC,QAAQ,EAAE,CAAC;YACjD,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACxC,aAAM,CAAC,MAAM,CAAC,YAAK,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE,UAAC,KAAK,IAAK,OAAA,eAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,EAAjC,CAAiC,CAAC,CAAC,CAAC;YAC9F,aAAM,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAEtC,aAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACzC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC;QATD,OAAO,IAAI,IAAI,IAAI;;SASlB;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {assert} from 'chai';\nimport {DataFlowNode} from '../../../src/compile/data/dataflow';\nimport {GeoJSONNode} from '../../../src/compile/data/geojson';\nimport {contains, every} from '../../../src/util';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n/* tslint:disable:quotemark */\n\ndescribe('compile/data/geojson', () => {\n  it('should make transform and assemble correctly', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"data\": {\n        \"url\": \"data/zipcodes.csv\",\n        \"format\": {\n          \"type\": \"csv\"\n        }\n      },\n      \"mark\": \"circle\",\n      \"encoding\": {\n        \"longitude\": {\n          \"field\": \"longitude\",\n          \"type\": \"quantitative\"\n        },\n        \"latitude\": {\n          \"field\": \"latitude\",\n          \"type\": \"quantitative\"\n        }\n      }\n    });\n\n    const root = new DataFlowNode(null);\n    GeoJSONNode.parseAll(root, model);\n\n    let node = root.children[0];\n\n    while (node != null) {\n      assert.instanceOf(node, GeoJSONNode);\n      const transform = (<GeoJSONNode>node).assemble();\n      assert.equal(transform.type, 'geojson');\n      assert.isTrue(every(['longitude', 'latitude'], (field) => contains(transform.fields, field)));\n      assert.isUndefined(transform.geojson);\n\n      assert.isAtMost(node.children.length, 1);\n      node = node.children[0];\n    }\n  });\n});\n"]}