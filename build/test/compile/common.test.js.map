{"version":3,"file":"common.test.js","sourceRoot":"","sources":["../../../test/compile/common.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {numberFormat, timeFormatExpression} from '../../src/compile/common';\nimport {defaultConfig} from '../../src/config';\nimport {vgField} from '../../src/fielddef';\nimport {TimeUnit} from '../../src/timeunit';\nimport {NOMINAL, ORDINAL, QUANTITATIVE, TEMPORAL} from '../../src/type';\n\ndescribe('Common', () => {\n  describe('timeFormat()', () => {\n    it('should get the right time expression for month with shortTimeLabels=true', () => {\n      const fieldDef = {timeUnit: TimeUnit.MONTH, field: 'a', type: TEMPORAL};\n      const expression = timeFormatExpression(\n        vgField(fieldDef, {expr: 'datum'}),\n        TimeUnit.MONTH,\n        undefined,\n        true,\n        defaultConfig.timeFormat,\n        false\n      );\n      assert.equal(expression, `timeFormat(datum[\"month_a\"], '%b')`);\n    });\n\n    it('should get the right time expression for month with shortTimeLabels=false', () => {\n      const fieldDef = {timeUnit: TimeUnit.MONTH, field: 'a', type: TEMPORAL};\n      const expression = timeFormatExpression(\n        vgField(fieldDef, {expr: 'datum'}),\n        TimeUnit.MONTH,\n        undefined,\n        false,\n        defaultConfig.timeFormat,\n        false\n      );\n      assert.equal(expression, `timeFormat(datum[\"month_a\"], '%B')`);\n    });\n\n    it('should get the right time expression for yearmonth with custom format', () => {\n      const fieldDef = {timeUnit: TimeUnit.YEARMONTH, field: 'a', type: TEMPORAL};\n      const expression = timeFormatExpression(\n        vgField(fieldDef, {expr: 'datum'}),\n        TimeUnit.MONTH,\n        '%Y',\n        true,\n        defaultConfig.timeFormat,\n        false\n      );\n      assert.equal(expression, `timeFormat(datum[\"yearmonth_a\"], '%Y')`);\n    });\n\n    it('should get the right time expression for quarter', () => {\n      const fieldDef = {timeUnit: TimeUnit.QUARTER, field: 'a', type: TEMPORAL};\n      const expression = timeFormatExpression(\n        vgField(fieldDef, {expr: 'datum'}),\n        TimeUnit.QUARTER,\n        undefined,\n        true,\n        defaultConfig.timeFormat,\n        false\n      );\n      assert.equal(expression, `'Q' + quarter(datum[\"quarter_a\"])`);\n    });\n\n    it('should get the right time expression for yearquarter', () => {\n      const expression = timeFormatExpression(\n        'datum[\"data\"]',\n        TimeUnit.YEARQUARTER,\n        undefined,\n        true,\n        defaultConfig.timeFormat,\n        false\n      );\n      assert.equal(expression, `'Q' + quarter(datum[\"data\"]) + ' ' + timeFormat(datum[\"data\"], '%y')`);\n    });\n\n    it('should get the right time expression for yearmonth with custom format and utc scale type', () => {\n      const fieldDef = {timeUnit: TimeUnit.YEARMONTH, field: 'a', type: TEMPORAL};\n      const expression = timeFormatExpression(\n        vgField(fieldDef, {expr: 'datum'}),\n        TimeUnit.MONTH,\n        '%Y',\n        true,\n        defaultConfig.timeFormat,\n        true\n      );\n      assert.equal(expression, `utcFormat(datum[\"yearmonth_a\"], '%Y')`);\n    });\n  });\n\n  describe('numberFormat()', () => {\n    it('should use number format for quantitative scale', () => {\n      assert.equal(numberFormat({field: 'a', type: QUANTITATIVE}, undefined, {numberFormat: 'd'}), 'd');\n    });\n\n    it('should support empty number format', () => {\n      assert.equal(numberFormat({field: 'a', type: QUANTITATIVE}, undefined, {numberFormat: ''}), '');\n    });\n\n    it('should use format if provided', () => {\n      assert.equal(numberFormat({field: 'a', type: QUANTITATIVE}, 'a', {}), 'a');\n    });\n\n    it('should not use number format for binned quantitative scale', () => {\n      assert.equal(numberFormat({bin: true, field: 'a', type: QUANTITATIVE}, undefined, {}), undefined);\n    });\n\n    it('should not use number format for non-quantitative scale', () => {\n      for (const type of [TEMPORAL, NOMINAL, ORDINAL]) {\n        assert.equal(numberFormat({bin: true, field: 'a', type: type}, undefined, {}), undefined);\n      }\n    });\n  });\n});\n"]}