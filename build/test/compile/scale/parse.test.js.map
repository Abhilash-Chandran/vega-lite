{"version":3,"file":"parse.test.js","sourceRoot":"","sources":["../../../../test/compile/scale/parse.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {toSet} from 'vega-util';\nimport {parseScaleCore, parseScales} from '../../../src/compile/scale/parse';\nimport {SELECTION_DOMAIN} from '../../../src/compile/selection';\nimport * as log from '../../../src/log';\nimport {NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES, SCALE_PROPERTIES} from '../../../src/scale';\nimport {without} from '../../../src/util';\nimport {parseModel, parseModelWithScale, parseUnitModelWithScale} from '../../util';\n\ndescribe('src/compile', () => {\n  it('NON_TYPE_RANGE_SCALE_PROPERTIES should be SCALE_PROPERTIES wihtout type, domain, and range properties', () => {\n    expect(toSet(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES)).toEqual(\n      toSet(without(SCALE_PROPERTIES, ['type', 'domain', 'range', 'rangeStep', 'scheme']))\n    );\n  });\n\n  describe('parseScaleCore', () => {\n    it('respects explicit scale type', () => {\n      const model = parseModel({\n        data: {url: 'data/seattle-weather.csv'},\n        layer: [\n          {\n            mark: 'bar',\n            encoding: {\n              y: {\n                aggregate: 'mean',\n                field: 'precipitation',\n                type: 'quantitative'\n              }\n            }\n          },\n          {\n            mark: 'rule',\n            encoding: {\n              y: {\n                aggregate: 'mean',\n                field: 'precipitation',\n                type: 'quantitative',\n                scale: {type: 'log'}\n              }\n            }\n          }\n        ]\n      });\n      parseScaleCore(model);\n      expect(model.getScaleComponent('y').explicit.type).toEqual('log');\n    });\n\n    it('respects explicit scale type', () => {\n      const model = parseModel({\n        data: {url: 'data/seattle-weather.csv'},\n        layer: [\n          {\n            mark: 'bar',\n            encoding: {\n              y: {\n                aggregate: 'mean',\n                field: 'precipitation',\n                type: 'quantitative',\n                scale: {type: 'log'}\n              }\n            }\n          },\n          {\n            mark: 'rule',\n            encoding: {\n              y: {\n                aggregate: 'mean',\n                field: 'precipitation',\n                type: 'quantitative'\n              }\n            }\n          }\n        ]\n      });\n      parseScaleCore(model);\n      expect(model.getScaleComponent('y').explicit.type).toEqual('log');\n    });\n\n    // TODO: this actually shouldn't get merged\n    it(\n      'favors the first explicit scale type',\n      log.wrap(localLogger => {\n        const model = parseModel({\n          data: {url: 'data/seattle-weather.csv'},\n          layer: [\n            {\n              mark: 'bar',\n              encoding: {\n                y: {\n                  aggregate: 'mean',\n                  field: 'precipitation',\n                  type: 'quantitative',\n                  scale: {type: 'log'}\n                }\n              }\n            },\n            {\n              mark: 'rule',\n              encoding: {\n                y: {\n                  aggregate: 'mean',\n                  field: 'precipitation',\n                  type: 'quantitative',\n                  scale: {type: 'pow'}\n                }\n              }\n            }\n          ]\n        });\n        parseScaleCore(model);\n        expect(model.getScaleComponent('y').explicit.type).toEqual('log');\n        expect(localLogger.warns[0]).toEqual(log.message.mergeConflictingProperty('type', 'scale', 'log', 'pow'));\n      })\n    );\n\n    it('favors the band over point', () => {\n      const model = parseModel({\n        data: {url: 'data/seattle-weather.csv'},\n        layer: [\n          {\n            mark: 'point',\n            encoding: {\n              y: {\n                aggregate: 'mean',\n                field: 'precipitation',\n                type: 'quantitative'\n              },\n              x: {field: 'weather', type: 'nominal'}\n            }\n          },\n          {\n            mark: 'bar',\n            encoding: {\n              y: {\n                aggregate: 'mean',\n                field: 'precipitation',\n                type: 'quantitative'\n              },\n              x: {field: 'weather', type: 'nominal'}\n            }\n          }\n        ]\n      });\n      parseScaleCore(model);\n      expect(model.getScaleComponent('x').implicit.type).toEqual('band');\n    });\n\n    it('correctly ignores x/y when lon/lat', () => {\n      const model = parseModel({\n        data: {\n          url: 'data/zipcodes.csv',\n          format: {\n            type: 'csv'\n          }\n        },\n        mark: 'point',\n        encoding: {\n          longitude: {\n            field: 'longitude',\n            type: 'quantitative'\n          },\n          latitude: {\n            field: 'latitude',\n            type: 'quantitative'\n          }\n        }\n      });\n      parseScaleCore(model);\n      expect(model.getScaleComponent('x')).toBeUndefined();\n      expect(model.getScaleComponent('y')).toBeUndefined();\n    });\n\n    it('correctly ignores shape when geojson', () => {\n      const model = parseModel({\n        mark: 'geoshape',\n        data: {url: 'data/income.json'},\n        transform: [\n          {\n            lookup: 'id',\n            from: {\n              data: {\n                url: 'data/us-10m.json',\n                format: {type: 'topojson', feature: 'states'}\n              },\n              key: 'id'\n            },\n            as: 'geo'\n          }\n        ],\n        encoding: {\n          shape: {field: 'geo', type: 'geojson'}\n        }\n      });\n      parseScaleCore(model);\n      expect(model.getScaleComponent('shape')).toBeUndefined();\n    });\n  });\n\n  describe('parseScale', () => {\n    it(\n      'does not throw warning when two equivalent objects are specified',\n      log.wrap(logger => {\n        const model = parseModel({\n          data: {url: 'data/seattle-weather.csv'},\n          layer: [\n            {\n              mark: 'circle',\n              encoding: {\n                y: {\n                  field: 'a',\n                  type: 'nominal',\n                  scale: {rangeStep: 17}\n                }\n              }\n            },\n            {\n              mark: 'point',\n              encoding: {\n                y: {\n                  field: 'a',\n                  type: 'nominal',\n                  scale: {rangeStep: 17}\n                }\n              }\n            }\n          ]\n        });\n        parseScales(model);\n        expect(model.getScaleComponent('y').explicit.range).toEqual({step: 17});\n        expect(logger.warns).toHaveLength(0);\n      })\n    );\n\n    describe('x ordinal point', () => {\n      it('should create an x point scale with rangeStep and no range', () => {\n        const model = parseUnitModelWithScale({\n          mark: 'point',\n          encoding: {\n            x: {field: 'origin', type: 'nominal'}\n          }\n        });\n        const scale = model.getScaleComponent('x');\n        expect(scale.implicit.type).toEqual('point');\n        expect(scale.implicit.range).toEqual({step: 20});\n      });\n    });\n\n    it('should output only padding without default paddingInner and paddingOuter if padding is specified for a band scale', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {field: 'origin', type: 'nominal', scale: {type: 'band', padding: 0.6}}\n        }\n      });\n      const scale = model.getScaleComponent('x');\n      expect(scale.explicit.padding).toEqual(0.6);\n      expect(scale.get('paddingInner')).toBeUndefined();\n      expect(scale.get('paddingOuter')).toBeUndefined();\n    });\n\n    it('should output default paddingInner and paddingOuter = paddingInner/2 if none of padding properties is specified for a band scale', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {field: 'origin', type: 'nominal', scale: {type: 'band'}}\n        },\n        config: {\n          scale: {bandPaddingInner: 0.3}\n        }\n      });\n      const scale = model.getScaleComponent('x');\n      expect(scale.implicit.paddingInner).toEqual(0.3);\n      expect(scale.implicit.paddingOuter).toEqual(0.15);\n      expect(scale.get('padding')).toBeUndefined();\n    });\n\n    describe('nominal with color', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          color: {field: 'origin', type: 'nominal'}\n        }\n      });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should create correct color scale', () => {\n        expect(scale.implicit.name).toEqual('color');\n        expect(scale.implicit.type).toEqual('ordinal');\n        expect(scale.domains).toEqual([\n          {\n            data: 'main',\n            field: 'origin',\n            sort: true\n          }\n        ]);\n        expect(scale.implicit.range).toEqual('category');\n      });\n    });\n\n    describe('ordinal with color', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          color: {field: 'origin', type: 'ordinal'}\n        }\n      });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should create linear color scale', () => {\n        expect(scale.implicit.name).toEqual('color');\n        expect(scale.implicit.type).toEqual('ordinal');\n\n        expect(scale.domains).toEqual([\n          {\n            data: 'main',\n            field: 'origin',\n            sort: true\n          }\n        ]);\n      });\n    });\n\n    describe('quantitative with color', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          color: {field: 'origin', type: 'quantitative'}\n        }\n      });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should create linear color scale', () => {\n        expect(scale.implicit.name).toEqual('color');\n        expect(scale.implicit.type).toEqual('linear');\n        expect(scale.implicit.range).toEqual('ramp');\n\n        expect(scale.domains).toEqual([\n          {\n            data: 'main',\n            field: 'origin'\n          }\n        ]);\n      });\n    });\n\n    describe('color with bin', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          color: {field: 'origin', type: 'quantitative', bin: true}\n        }\n      });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should add correct scales', () => {\n        expect(scale.implicit.name).toEqual('color');\n        expect(scale.implicit.type).toEqual('bin-ordinal');\n        expect(scale.implicit.bins).toEqual({signal: 'bin_maxbins_6_origin_bins'});\n      });\n    });\n\n    describe('ordinal color with bin', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          color: {field: 'origin', type: 'ordinal', bin: true}\n        }\n      });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should add correct scales', () => {\n        expect(scale.implicit.name).toEqual('color');\n        expect(scale.implicit.type).toEqual('ordinal');\n        expect(scale.implicit.bins).toBeUndefined();\n      });\n    });\n\n    describe('opacity with bin', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          opacity: {field: 'origin', type: 'quantitative', bin: true}\n        }\n      });\n\n      const scale = model.getScaleComponent('opacity');\n\n      it('should add correct scales', () => {\n        expect(scale.implicit.name).toEqual('opacity');\n        expect(scale.implicit.type).toEqual('linear');\n        expect(scale.implicit.bins).toEqual({signal: 'bin_maxbins_6_origin_bins'});\n      });\n    });\n\n    describe('size with bin', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          size: {field: 'origin', type: 'quantitative', bin: true}\n        }\n      });\n\n      const scale = model.getScaleComponent('size');\n\n      it('should add correct scales', () => {\n        expect(scale.implicit.name).toEqual('size');\n        expect(scale.implicit.type).toEqual('linear');\n        expect(scale.implicit.bins).toEqual({signal: 'bin_maxbins_6_origin_bins'});\n      });\n    });\n\n    describe('color with time unit', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          color: {field: 'origin', type: 'temporal', timeUnit: 'year'}\n        }\n      });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should add correct scales', () => {\n        expect(scale.implicit.name).toEqual('color');\n        expect(scale.implicit.type).toEqual('time');\n      });\n    });\n\n    describe('selection domain', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'area',\n        encoding: {\n          x: {\n            field: 'date',\n            type: 'temporal',\n            scale: {domain: {selection: 'brush', encoding: 'x'}}\n          },\n          y: {\n            field: 'date',\n            type: 'temporal',\n            scale: {domain: {selection: 'foobar', field: 'Miles_per_Gallon'}}\n          }\n        }\n      });\n\n      const xScale = model.getScaleComponent('x');\n      const yscale = model.getScaleComponent('y');\n\n      it('should add a raw selection domain', () => {\n        expect('domainRaw' in xScale.explicit).toBeTruthy();\n        expect(xScale.explicit.domainRaw['signal']).toBe(SELECTION_DOMAIN + '{\"encoding\":\"x\",\"selection\":\"brush\"}');\n\n        expect('domainRaw' in yscale.explicit).toBeTruthy();\n        expect(yscale.explicit.domainRaw['signal']).toBe(\n          SELECTION_DOMAIN + '{\"field\":\"Miles_per_Gallon\",\"selection\":\"foobar\"}'\n        );\n      });\n    });\n  });\n\n  describe('parseScaleDomain', () => {\n    describe('faceted domains', () => {\n      it('should use cloned subtree', () => {\n        const model = parseModelWithScale({\n          facet: {\n            row: {field: 'symbol', type: 'nominal'}\n          },\n          data: {url: 'foo.csv'},\n          spec: {\n            mark: 'point',\n            encoding: {\n              x: {field: 'a', type: 'quantitative'}\n            }\n          }\n        });\n\n        expect(model.component.scales.x.domains).toEqual([\n          {\n            data: 'scale_child_main',\n            field: 'a'\n          }\n        ]);\n      });\n\n      it('should not use cloned subtree if the data is not faceted', () => {\n        const model = parseModelWithScale({\n          facet: {\n            row: {field: 'symbol', type: 'nominal'}\n          },\n          data: {url: 'foo.csv'},\n          spec: {\n            data: {url: 'foo'},\n            mark: 'point',\n            encoding: {\n              x: {field: 'a', type: 'quantitative'}\n            }\n          }\n        });\n\n        expect(model.component.scales.x.domains).toEqual([\n          {\n            data: 'child_main',\n            field: 'a'\n          }\n        ]);\n      });\n\n      it('should not use cloned subtree if the scale is independent', () => {\n        const model = parseModelWithScale({\n          facet: {\n            row: {field: 'symbol', type: 'nominal'}\n          },\n          data: {url: 'foo.csv'},\n          spec: {\n            mark: 'point',\n            encoding: {\n              x: {field: 'a', type: 'quantitative'}\n            }\n          },\n          resolve: {\n            scale: {\n              x: 'independent'\n            }\n          }\n        });\n\n        expect(model.children[0].component.scales.x.domains).toEqual([\n          {\n            data: 'child_main',\n            field: 'a'\n          }\n        ]);\n      });\n    });\n  });\n});\n"]}