{"version":3,"file":"properties.test.js","sourceRoot":"","sources":["../../../../test/compile/legend/properties.test.ts"],"names":[],"mappings":";AAAA,8BAA8B;;;AAE9B,6BAA4B;AAC5B,yFAAqE;AAErE,QAAQ,CAAC,gBAAgB,EAAE;IACzB,QAAQ,CAAC,UAAU,EAAE;QACnB,EAAE,CAAC,sDAAsD,EAAE;YACzD,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,EAAC,MAAM,EAAE,CAAC,EAAC,IAAI,EAAE,IAAI,EAAC,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAC,CAAC,CAAC;YAEzG,aAAM,CAAC,SAAS,CAAC,MAAM,EAAE;gBACvB,EAAC,MAAM,EAAE,kCAAkC,EAAC;gBAC5C,EAAC,MAAM,EAAE,kCAAkC,EAAC;aAC7C,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE;YACjD,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,EAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC,CAAC,CAAC;YAE7F,aAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE;QACvB,EAAE,CAAC,iDAAiD,EAAE;YACpD,IAAM,MAAM,GAAG,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC/C,aAAM,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE;YAC7C,IAAM,MAAM,GAAG,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YAChD,aAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE;QACzB,EAAE,CAAC,oCAAoC,EAAE;YACvC,IAAM,OAAO,GAAG,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAClD,aAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE;YACjC,IAAM,OAAO,GAAG,UAAU,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC/C,aAAM,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE;YACvC,IAAM,OAAO,GAAG,UAAU,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YACrD,aAAM,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport * as properties from '../../../src/compile/legend/properties';\n\ndescribe('compile/legend', () => {\n  describe('values()', () => {\n    it('should return correct timestamp values for DateTimes', () => {\n      const values = properties.values({values: [{year: 1970}, {year: 1980}]}, {field: 'a', type: 'temporal'});\n\n      assert.deepEqual(values, [\n        {signal: 'datetime(1970, 0, 1, 0, 0, 0, 0)'},\n        {signal: 'datetime(1980, 0, 1, 0, 0, 0, 0)'}\n      ]);\n    });\n\n    it('should simply return values for non-DateTime', () => {\n      const values = properties.values({values: [1, 2, 3, 4]}, {field: 'a', type: 'quantitative'});\n\n      assert.deepEqual(values, [1, 2, 3, 4]);\n    });\n  });\n\n  describe('clipHeight()', () => {\n    it('should return clip height for continuous domain', () => {\n      const height = properties.clipHeight('linear');\n      assert.equal(height, 20);\n    });\n\n    it('should simply return for discrete domain', () => {\n      const height = properties.clipHeight('ordinal');\n      assert.isUndefined(height);\n    });\n  });\n\n  describe('labelOverlap()', () => {\n    it('should return undefined for linear', () => {\n      const overlap = properties.labelOverlap('linear');\n      assert.isUndefined(overlap);\n    });\n\n    it('should return greedy for log', () => {\n      const overlap = properties.labelOverlap('log');\n      assert.equal(overlap, 'greedy');\n    });\n\n    it('should return greedy for threshold', () => {\n      const overlap = properties.labelOverlap('threshold');\n      assert.equal(overlap, 'greedy');\n    });\n  });\n});\n"]}