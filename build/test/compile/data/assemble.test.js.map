{"version":3,"file":"assemble.test.js","sourceRoot":"","sources":["../../../../test/compile/data/assemble.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {AggregateNode} from '../../../src/compile/data/aggregate';\nimport {assembleRootData} from '../../../src/compile/data/assemble';\nimport {OutputNode} from '../../../src/compile/data/dataflow';\nimport {SourceNode} from '../../../src/compile/data/source';\nimport {WindowTransformNode} from '../../../src/compile/data/window';\nimport {Transform} from '../../../src/transform';\n\ndescribe('compile/data/assemble', () => {\n  describe('assembleData', () => {\n    it('should assemble named data source', () => {\n      const src = new SourceNode({name: 'foo'});\n      const outputNodeRefCounts = {};\n      const main = new OutputNode(null, 'mainOut', 'main', outputNodeRefCounts);\n      main.parent = src;\n\n      expect(main.getSource()).toBe('mainOut');\n\n      const data = assembleRootData(\n        {\n          sources: [src],\n          outputNodes: {out: main},\n          outputNodeRefCounts,\n          isFaceted: false\n        },\n        {}\n      );\n\n      expect(data).toHaveLength(1);\n      expect(data[0].name).toBe('foo');\n    });\n\n    it('should assemble raw and main output', () => {\n      const src = new SourceNode({url: 'foo.csv'});\n      const outputNodeRefCounts = {};\n      const raw = new OutputNode(null, 'rawOut', 'raw', outputNodeRefCounts);\n      raw.parent = src;\n      const agg = new AggregateNode(null, new Set(['a']), {b: {count: new Set(['count_*'])}});\n      agg.parent = raw;\n      const main = new OutputNode(null, 'mainOut', 'main', outputNodeRefCounts);\n      main.parent = agg;\n\n      expect(raw.getSource()).toBe('rawOut');\n      expect(main.getSource()).toBe('mainOut');\n\n      const data = assembleRootData(\n        {\n          sources: [src],\n          outputNodes: {out: main},\n          outputNodeRefCounts,\n          isFaceted: false\n        },\n        {}\n      );\n\n      expect(data).toEqual([\n        {\n          name: 'source_0',\n          url: 'foo.csv',\n          format: {type: 'csv'}\n        },\n        {\n          name: 'data_0',\n          source: 'source_0',\n          transform: [\n            {\n              type: 'aggregate',\n              groupby: ['a'],\n              ops: ['count'],\n              fields: ['b'],\n              as: ['count_*']\n            }\n          ]\n        }\n      ]);\n    });\n\n    it('should assemble window transform node', () => {\n      const src = new SourceNode({url: 'foo.csv'});\n      const outputNodeRefCounts = {};\n      const raw = new OutputNode(null, 'rawOut', 'raw', outputNodeRefCounts);\n      raw.parent = src;\n      const transform: Transform = {\n        window: [\n          {\n            op: 'row_number',\n            as: 'ordered_row_number'\n          }\n        ],\n        ignorePeers: false,\n        sort: [\n          {\n            field: 'f',\n            order: 'ascending'\n          }\n        ],\n        groupby: ['f'],\n        frame: [null, 0]\n      };\n      const agg = new WindowTransformNode(null, transform);\n      agg.parent = raw;\n      const main = new OutputNode(null, 'mainOut', 'main', outputNodeRefCounts);\n      main.parent = agg;\n\n      expect(raw.getSource()).toBe('rawOut');\n      expect(main.getSource()).toBe('mainOut');\n\n      const data = assembleRootData(\n        {\n          sources: [src],\n          outputNodes: {out: main},\n          outputNodeRefCounts,\n          isFaceted: false\n        },\n        {}\n      );\n\n      expect(data).toEqual([\n        {\n          name: 'source_0',\n          url: 'foo.csv',\n          format: {type: 'csv'}\n        },\n        {\n          name: 'data_0',\n          source: 'source_0',\n          transform: [\n            {\n              type: 'window',\n              ops: ['row_number'],\n              fields: [null],\n              params: [null],\n              sort: {\n                field: ['f'],\n                order: ['ascending']\n              },\n              ignorePeers: false,\n              as: ['ordered_row_number'],\n              frame: [null, 0],\n              groupby: ['f']\n            }\n          ]\n        }\n      ]);\n    });\n\n    it('should assemble named datasets with datastore', () => {\n      const src = new SourceNode({name: 'foo'});\n      const outputNodeRefCounts = {};\n      const main = new OutputNode(null, 'mainOut', 'main', outputNodeRefCounts);\n      main.parent = src;\n\n      const data = assembleRootData(\n        {\n          sources: [src],\n          outputNodes: {out: main},\n          outputNodeRefCounts,\n          isFaceted: false\n        },\n        {\n          foo: [1, 2, 3]\n        }\n      );\n\n      expect(data).toEqual([\n        {\n          name: 'foo',\n          values: [1, 2, 3]\n        }\n      ]);\n    });\n  });\n});\n"]}