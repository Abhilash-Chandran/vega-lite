{"version":3,"file":"line.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/line.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\n\nimport {COLOR, X, Y} from '../../../src/channel';\nimport {line} from '../../../src/compile/mark/line';\nimport * as log from '../../../src/log';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('Mark: Line', () => {\n  describe('with x, y', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/barley.json'},\n      mark: 'line',\n      encoding: {\n        x: {field: 'year', type: 'ordinal'},\n        y: {field: 'yield', type: 'quantitative'}\n      }\n    });\n    const props = line.encodeEntry(model);\n\n    it('should have scale for x', () => {\n      expect(props.x).toEqual({scale: X, field: 'year'});\n    });\n\n    it('should have scale for y', () => {\n      expect(props.y).toEqual({scale: Y, field: 'yield'});\n    });\n  });\n\n  describe('with x, y, color', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/barley.json'},\n      mark: 'line',\n      encoding: {\n        x: {field: 'year', type: 'ordinal'},\n        y: {field: 'yield', type: 'quantitative'},\n        color: {field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = line.encodeEntry(model);\n\n    it('should have scale for color', () => {\n      expect(props.stroke).toEqual({scale: COLOR, field: 'Acceleration'});\n    });\n  });\n\n  describe('with x, y, size', () => {\n    it('should have scale for size', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/barley.json'},\n        mark: 'line',\n        encoding: {\n          x: {field: 'year', type: 'ordinal'},\n          y: {field: 'yield', type: 'quantitative', aggregate: 'mean'},\n          size: {field: 'variety', type: 'nominal'}\n        }\n      });\n      const props = line.encodeEntry(model);\n\n      expect(props.strokeWidth).toEqual({scale: 'size', field: 'variety'});\n    });\n\n    it(\n      'should drop aggregate size field',\n      log.wrap(localLogger => {\n        const model = parseUnitModelWithScaleAndLayoutSize({\n          data: {url: 'data/barley.json'},\n          mark: 'line',\n          encoding: {\n            x: {field: 'year', type: 'ordinal'},\n            y: {field: 'yield', type: 'quantitative', aggregate: 'mean'},\n            size: {field: 'Acceleration', type: 'quantitative', aggregate: 'mean'}\n          }\n        });\n        const props = line.encodeEntry(model);\n\n        // If size field is dropped, then strokeWidth only have value\n        expect(props.strokeWidth && props.strokeWidth['scale']).toBeFalsy();\n        expect(localLogger.warns[0]).toEqual(log.message.LINE_WITH_VARYING_SIZE);\n      })\n    );\n  });\n\n  describe('with stacked y', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/barley.json'},\n      mark: 'line',\n      encoding: {\n        x: {field: 'year', type: 'ordinal'},\n        y: {field: 'yield', type: 'quantitative', aggregate: 'sum'},\n        color: {field: 'a', type: 'nominal'}\n      },\n      config: {stack: 'zero'}\n    });\n    const props = line.encodeEntry(model);\n\n    it('should use y_end', () => {\n      expect(props.y).toEqual({scale: Y, field: 'sum_yield_end'});\n    });\n  });\n\n  describe('with stacked x', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/barley.json'},\n      mark: 'line',\n      encoding: {\n        y: {field: 'year', type: 'ordinal'},\n        x: {field: 'yield', type: 'quantitative', aggregate: 'sum'},\n        color: {field: 'a', type: 'nominal'}\n      },\n      config: {stack: 'zero'}\n    });\n    const props = line.encodeEntry(model);\n\n    it('should use x_end', () => {\n      expect(props.x).toEqual({scale: X, field: 'sum_yield_end'});\n    });\n  });\n\n  describe('with x', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'line',\n      encoding: {x: {field: 'year', type: 'ordinal'}},\n      data: {url: 'data/barley.json'}\n    });\n\n    const props = line.encodeEntry(model);\n\n    it('should be centered on y', () => {\n      expect(props.y).toEqual({\n        mult: 0.5,\n        signal: 'height'\n      });\n    });\n\n    it('should scale on x', () => {\n      expect(props.x).toEqual({scale: X, field: 'year'});\n    });\n  });\n\n  describe('with y', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'line',\n      encoding: {y: {field: 'year', type: 'ordinal'}},\n      data: {url: 'data/barley.json'}\n    });\n\n    const props = line.encodeEntry(model);\n\n    it('should be centered on x', () => {\n      expect(props.x).toEqual({\n        mult: 0.5,\n        signal: 'width'\n      });\n    });\n\n    it('should scale on y', () => {\n      expect(props.y).toEqual({scale: Y, field: 'year'});\n    });\n  });\n});\n"]}