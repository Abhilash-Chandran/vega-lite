{"version":3,"file":"boxplot.test.js","sourceRoot":"","sources":["../../../test/compositemark/boxplot.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport * as log from '../../src/log';\nimport {normalize} from '../../src/normalize/index';\nimport {Transform} from '../../src/transform';\nimport {defaultConfig} from '.././../src/config';\n\ndescribe('normalizeBoxMinMax', () => {\n  it('should produce an error if both axes have aggregate boxplot', () => {\n    expect(() => {\n      normalize(\n        {\n          description:\n            'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n          data: {url: 'data/population.json'},\n          mark: {\n            type: 'boxplot',\n            extent: 'min-max'\n          },\n          encoding: {\n            x: {aggregate: 'boxplot', field: 'people', type: 'quantitative'},\n            y: {\n              aggregate: 'boxplot',\n              field: 'people',\n              type: 'quantitative',\n              axis: {title: 'population'}\n            },\n            color: {value: 'skyblue'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it('should produce correct transform groupby for vertical boxplot with two quantitative axes and use default orientation', () => {\n    const output = normalize(\n      {\n        description: 'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'boxplot',\n          extent: 'min-max',\n          size: 5\n        },\n        encoding: {\n          x: {field: 'age', type: 'quantitative'},\n          y: {\n            field: 'people',\n            type: 'quantitative',\n            axis: {title: 'population'}\n          },\n          color: {value: 'skyblue'}\n        }\n      },\n      defaultConfig\n    );\n\n    expect(output.transform).toEqual([\n      {\n        aggregate: [\n          {\n            op: 'q1',\n            field: 'people',\n            as: 'lower_box_people'\n          },\n          {\n            op: 'q3',\n            field: 'people',\n            as: 'upper_box_people'\n          },\n          {\n            op: 'median',\n            field: 'people',\n            as: 'mid_box_people'\n          },\n          {\n            op: 'min',\n            field: 'people',\n            as: 'lower_whisker_people'\n          },\n          {\n            op: 'max',\n            field: 'people',\n            as: 'upper_whisker_people'\n          }\n        ],\n        groupby: ['age'] // should group by age\n      }\n    ]);\n  });\n\n  it('should produce an error if neither the x axis or y axis is specified', () => {\n    expect(() => {\n      normalize(\n        {\n          description:\n            'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n          data: {url: 'data/population.json'},\n          mark: {\n            type: 'boxplot',\n            extent: 'min-max'\n          },\n          encoding: {\n            color: {value: 'skyblue'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it(\n    'should produce a warning if continuous axis has aggregate property',\n    log.wrap(localLogger => {\n      const aggregate = 'min';\n      const type = 'boxplot';\n\n      normalize(\n        {\n          description:\n            'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n          data: {url: 'data/population.json'},\n          mark: {\n            type,\n            extent: 'min-max',\n            size: 14\n          },\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {\n              aggregate,\n              field: 'people',\n              type: 'quantitative',\n              axis: {title: 'population'}\n            },\n            color: {value: 'skyblue'}\n          }\n        },\n        defaultConfig\n      );\n\n      expect(localLogger.warns[0]).toEqual(log.message.errorBarContinuousAxisHasCustomizedAggregate(aggregate, type));\n    })\n  );\n\n  it('should produce an error if build 1D boxplot with a discrete axis', () => {\n    expect(() => {\n      normalize(\n        {\n          description:\n            'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n          data: {url: 'data/population.json'},\n          mark: 'boxplot',\n          encoding: {\n            x: {field: 'age', type: 'ordinal'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it('should produce an error if both axes are discrete', () => {\n    expect(() => {\n      normalize(\n        {\n          description:\n            'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n          data: {url: 'data/population.json'},\n          mark: {\n            type: 'boxplot',\n            extent: 'min-max'\n          },\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {\n              field: 'age',\n              type: 'ordinal',\n              axis: {title: 'age'}\n            },\n            color: {value: 'skyblue'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it('should produce an error if in 2D boxplot both axes are not valid field definitions', () => {\n    expect(() => {\n      normalize(\n        {\n          description:\n            'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n          data: {url: 'data/population.json'},\n          mark: {\n            type: 'boxplot',\n            extent: 'min-max'\n          },\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {\n              type: 'ordinal',\n              axis: {title: 'age'}\n            },\n            color: {value: 'skyblue'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it('should produce an error if 1D boxplot only axis is discrete', () => {\n    expect(() => {\n      normalize(\n        {\n          description:\n            'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n          data: {url: 'data/population.json'},\n          mark: 'boxplot',\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            color: {value: 'skyblue'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it('should produce correct transform groupby for vertical boxplot with two quantitative axes and specify orientation with orient', () => {\n    const output = normalize(\n      {\n        description: 'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'boxplot',\n          orient: 'vertical',\n          extent: 'min-max'\n        },\n        encoding: {\n          x: {field: 'age', type: 'quantitative'},\n          y: {\n            field: 'people',\n            type: 'quantitative',\n            axis: {title: 'population'}\n          },\n          color: {value: 'skyblue'}\n        }\n      },\n      defaultConfig\n    );\n    expect(output.transform).toEqual([\n      {\n        aggregate: [\n          {\n            op: 'q1',\n            field: 'people',\n            as: 'lower_box_people'\n          },\n          {\n            op: 'q3',\n            field: 'people',\n            as: 'upper_box_people'\n          },\n          {\n            op: 'median',\n            field: 'people',\n            as: 'mid_box_people'\n          },\n          {\n            op: 'min',\n            field: 'people',\n            as: 'lower_whisker_people'\n          },\n          {\n            op: 'max',\n            field: 'people',\n            as: 'upper_whisker_people'\n          }\n        ],\n        groupby: ['age'] // should group by age\n      }\n    ]);\n  });\n\n  it('should produce correct transform groupby for horizontal boxplot with two quantitative axes and specify orientation with orient', () => {\n    const output = normalize(\n      {\n        description: 'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'boxplot',\n          orient: 'horizontal',\n          extent: 'min-max'\n        },\n        encoding: {\n          y: {field: 'age', type: 'quantitative'},\n          x: {\n            field: 'people',\n            type: 'quantitative',\n            axis: {title: 'population'}\n          },\n          color: {value: 'skyblue'}\n        }\n      },\n      defaultConfig\n    );\n    expect(output.transform).toEqual([\n      {\n        aggregate: [\n          {\n            op: 'q1',\n            field: 'people',\n            as: 'lower_box_people'\n          },\n          {\n            op: 'q3',\n            field: 'people',\n            as: 'upper_box_people'\n          },\n          {\n            op: 'median',\n            field: 'people',\n            as: 'mid_box_people'\n          },\n          {\n            op: 'min',\n            field: 'people',\n            as: 'lower_whisker_people'\n          },\n          {\n            op: 'max',\n            field: 'people',\n            as: 'upper_whisker_people'\n          }\n        ],\n        groupby: ['age'] // group by age\n      }\n    ]);\n  });\n\n  it('should produce correct transform groupby for vertical boxplot with two quantitative axes and specify orientation with aggregate', () => {\n    const output = normalize(\n      {\n        description: 'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'boxplot',\n          extent: 'min-max'\n        },\n        encoding: {\n          x: {field: 'age', type: 'quantitative'},\n          y: {\n            field: 'people',\n            type: 'quantitative',\n            aggregate: 'boxplot',\n            axis: {title: 'population'}\n          },\n          color: {value: 'skyblue'}\n        }\n      },\n      defaultConfig\n    );\n    expect(output.transform).toEqual([\n      {\n        aggregate: [\n          {\n            op: 'q1',\n            field: 'people',\n            as: 'lower_box_people'\n          },\n          {\n            op: 'q3',\n            field: 'people',\n            as: 'upper_box_people'\n          },\n          {\n            op: 'median',\n            field: 'people',\n            as: 'mid_box_people'\n          },\n          {\n            op: 'min',\n            field: 'people',\n            as: 'lower_whisker_people'\n          },\n          {\n            op: 'max',\n            field: 'people',\n            as: 'upper_whisker_people'\n          }\n        ],\n        groupby: ['age']\n      }\n    ]);\n  });\n\n  it('should produce correct transform groupby for horizontal boxplot with two quantitative axes and specify orientation with aggregate', () => {\n    const output = normalize(\n      {\n        description: 'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'boxplot',\n          extent: 'min-max'\n        },\n        encoding: {\n          y: {field: 'age', type: 'quantitative'},\n          x: {\n            field: 'people',\n            type: 'quantitative',\n            aggregate: 'boxplot',\n            axis: {title: 'population'}\n          },\n          color: {value: 'skyblue'}\n        }\n      },\n      defaultConfig\n    );\n    expect(output.transform).toEqual([\n      {\n        aggregate: [\n          {\n            op: 'q1',\n            field: 'people',\n            as: 'lower_box_people'\n          },\n          {\n            op: 'q3',\n            field: 'people',\n            as: 'upper_box_people'\n          },\n          {\n            op: 'median',\n            field: 'people',\n            as: 'mid_box_people'\n          },\n          {\n            op: 'min',\n            field: 'people',\n            as: 'lower_whisker_people'\n          },\n          {\n            op: 'max',\n            field: 'people',\n            as: 'upper_whisker_people'\n          }\n        ],\n        groupby: ['age']\n      }\n    ]);\n  });\n\n  it('should produce correct transform for vertical boxplot with min and max', () => {\n    const output = normalize(\n      {\n        description: 'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'boxplot',\n          extent: 'min-max'\n        },\n        encoding: {\n          x: {field: 'age', type: 'ordinal'},\n          y: {\n            field: 'people',\n            type: 'quantitative',\n            axis: {title: 'population'}\n          },\n          color: {value: 'skyblue'}\n        }\n      },\n      defaultConfig\n    );\n\n    expect(output.transform).toEqual([\n      {\n        aggregate: [\n          {\n            op: 'q1',\n            field: 'people',\n            as: 'lower_box_people'\n          },\n          {\n            op: 'q3',\n            field: 'people',\n            as: 'upper_box_people'\n          },\n          {\n            op: 'median',\n            field: 'people',\n            as: 'mid_box_people'\n          },\n          {\n            op: 'min',\n            field: 'people',\n            as: 'lower_whisker_people'\n          },\n          {\n            op: 'max',\n            field: 'people',\n            as: 'upper_whisker_people'\n          }\n        ],\n        groupby: ['age']\n      }\n    ]);\n  });\n\n  it(\"should not overwrite transform with boxplot's transfroms\", () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'boxplot',\n          extent: 'min-max'\n        },\n        transform: [{calculate: 'age * 2', as: 'age2'}],\n        encoding: {x: {field: 'age', type: 'ordinal'}, y: {field: 'people', type: 'quantitative', title: 'population'}}\n      },\n      defaultConfig\n    );\n\n    const transforms: Transform[] = outputSpec.transform;\n    expect(transforms).toBeDefined();\n    expect(transforms).not.toHaveLength(0);\n    expect(transforms[0]).toEqual({calculate: 'age * 2', as: 'age2'});\n  });\n});\n\ndescribe('normalizeBoxIQR', () => {\n  it('should produce correct layered specs for vertical boxplot with two quantitative axes and use default orientation for a 1.5 * IQR whiskers with boxplot mark type', () => {\n    const output = normalize(\n      {\n        description: 'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n        data: {url: 'data/population.json'},\n        mark: 'boxplot',\n        encoding: {\n          x: {field: 'age', type: 'quantitative'},\n          y: {\n            field: 'people',\n            type: 'quantitative',\n            axis: {title: 'population'}\n          },\n          color: {value: 'skyblue'}\n        }\n      },\n      defaultConfig\n    );\n\n    const outliersUnit = {\n      transform: [\n        {\n          filter:\n            '(datum[\"people\"] < datum[\"lower_box_people\"] - 1.5 * (datum[\"upper_box_people\"] - datum[\"lower_box_people\"])) || (datum[\"people\"] > datum[\"upper_box_people\"] + 1.5 * (datum[\"upper_box_people\"] - datum[\"lower_box_people\"]))'\n        }\n      ],\n      mark: {\n        type: 'point',\n        style: 'boxplot-outliers'\n      },\n      encoding: {\n        x: {field: 'age', type: 'quantitative'},\n        y: {\n          field: 'people',\n          type: 'quantitative'\n        }\n      }\n    };\n\n    const whiskersUnit = {\n      transform: [\n        {\n          filter:\n            '(datum[\"lower_box_people\"] - 1.5 * (datum[\"upper_box_people\"] - datum[\"lower_box_people\"]) <= datum[\"people\"]) && (datum[\"people\"] <= datum[\"upper_box_people\"] + 1.5 * (datum[\"upper_box_people\"] - datum[\"lower_box_people\"]))'\n        },\n        {\n          aggregate: [\n            {\n              as: 'lower_whisker_people',\n              field: 'people',\n              op: 'min'\n            },\n            {\n              as: 'upper_whisker_people',\n              field: 'people',\n              op: 'max'\n            },\n            {\n              as: 'lower_box_people',\n              field: 'lower_box_people',\n              op: 'min'\n            },\n            {\n              as: 'upper_box_people',\n              field: 'upper_box_people',\n              op: 'max'\n            }\n          ],\n          groupby: ['age']\n        }\n      ],\n      layer: [\n        {\n          mark: {\n            type: 'rule',\n            style: 'boxplot-rule'\n          },\n          encoding: {\n            x: {field: 'age', type: 'quantitative'},\n            y: {\n              field: 'lower_whisker_people',\n              type: 'quantitative',\n              axis: {title: 'population'}\n            },\n            y2: {\n              field: 'lower_box_people',\n              type: 'quantitative'\n            }\n          }\n        },\n        {\n          mark: {\n            type: 'rule',\n            style: 'boxplot-rule'\n          },\n          encoding: {\n            x: {field: 'age', type: 'quantitative'},\n            y: {\n              field: 'upper_box_people',\n              type: 'quantitative',\n              axis: {title: 'population'}\n            },\n            y2: {\n              field: 'upper_whisker_people',\n              type: 'quantitative'\n            }\n          }\n        }\n      ]\n    };\n\n    const boxUnit = {\n      transform: [\n        {\n          aggregate: [\n            {\n              op: 'q1',\n              field: 'people',\n              as: 'lower_box_people'\n            },\n            {\n              op: 'q3',\n              field: 'people',\n              as: 'upper_box_people'\n            },\n            {\n              op: 'median',\n              field: 'people',\n              as: 'mid_box_people'\n            },\n            {\n              op: 'min',\n              field: 'people',\n              as: 'min_people'\n            },\n            {\n              op: 'max',\n              field: 'people',\n              as: 'max_people'\n            }\n          ],\n          groupby: ['age']\n        }\n      ],\n      layer: [\n        {\n          mark: {\n            type: 'bar',\n            style: 'boxplot-box',\n            size: 14\n          },\n          encoding: {\n            x: {field: 'age', type: 'quantitative'},\n            y: {\n              field: 'lower_box_people',\n              type: 'quantitative',\n              axis: {title: 'population'}\n            },\n            y2: {\n              field: 'upper_box_people',\n              type: 'quantitative'\n            },\n            color: {value: 'skyblue'}\n          }\n        },\n        {\n          mark: {\n            type: 'tick',\n            orient: 'horizontal',\n            style: 'boxplot-median',\n            color: 'white',\n            size: 14\n          },\n          encoding: {\n            x: {field: 'age', type: 'quantitative'},\n            y: {\n              field: 'mid_box_people',\n              type: 'quantitative',\n              axis: {title: 'population'}\n            }\n          }\n        }\n      ]\n    };\n\n    expect(output).toMatchObject({\n      layer: [\n        {\n          transform: [\n            {\n              joinaggregate: [\n                {\n                  op: 'q1',\n                  field: 'people',\n                  as: 'lower_box_people'\n                },\n                {\n                  op: 'q3',\n                  field: 'people',\n                  as: 'upper_box_people'\n                }\n              ],\n              groupby: ['age']\n            }\n          ],\n          layer: [outliersUnit, whiskersUnit]\n        },\n        boxUnit\n      ]\n    });\n  });\n\n  it('should produce correct layered specs for vertical boxplot with two quantitative axes and use default orientation for a 1.5 * IQR whiskers', () => {\n    const partialOutlierUnit = {\n      transform: [\n        {\n          joinaggregate: [\n            {\n              op: 'q1',\n              field: 'people',\n              as: 'lower_box_people'\n            },\n            {\n              op: 'q3',\n              field: 'people',\n              as: 'upper_box_people'\n            }\n          ],\n          groupby: ['age']\n        }\n      ]\n      // omit the rest of spec as they are unnecessary -- we just need to check the join aggregate\n    };\n\n    const partialBoxUnit = {\n      transform: [\n        {\n          aggregate: [\n            {\n              op: 'q1',\n              field: 'people',\n              as: 'lower_box_people'\n            },\n            {\n              op: 'q3',\n              field: 'people',\n              as: 'upper_box_people'\n            },\n            {\n              op: 'median',\n              field: 'people',\n              as: 'mid_box_people'\n            },\n            {\n              op: 'min',\n              field: 'people',\n              as: 'min_people'\n            },\n            {\n              op: 'max',\n              field: 'people',\n              as: 'max_people'\n            }\n          ],\n          groupby: ['age']\n        }\n      ]\n      // omit the rest of spec as they are unnecessary -- we just need to check the join aggregate\n    };\n\n    const output = normalize(\n      {\n        description: 'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'boxplot',\n          extent: 1.5\n        },\n        encoding: {\n          x: {field: 'age', type: 'quantitative'},\n          y: {\n            field: 'people',\n            type: 'quantitative',\n            axis: {title: 'population'}\n          },\n          color: {value: 'skyblue'}\n        }\n      },\n      defaultConfig\n    );\n    expect(output).toMatchObject({\n      description: 'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n      data: {url: 'data/population.json'},\n      layer: [partialOutlierUnit, partialBoxUnit]\n    });\n  });\n\n  it('should produce correct layered specs for vertical IQR boxplot where color encodes the mean of the people field', () => {\n    const normalizedSpec = normalize(\n      {\n        description: 'A box plot showing median, min, and max in the US population distribution of age groups in 2000.',\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'boxplot',\n          extent: 1.5\n        },\n        encoding: {\n          x: {field: 'age', type: 'quantitative'},\n          y: {\n            field: 'people',\n            type: 'quantitative',\n            axis: {title: 'population'}\n          },\n          color: {\n            aggregate: 'mean',\n            field: 'people',\n            type: 'quantitative'\n          }\n        }\n      },\n      defaultConfig\n    );\n\n    expect(normalizedSpec['layer'][1].layer[0]).toEqual({\n      mark: {\n        type: 'bar',\n        style: 'boxplot-box',\n        size: 14\n      },\n      encoding: {\n        x: {field: 'age', type: 'quantitative'},\n        y: {\n          field: 'lower_box_people',\n          type: 'quantitative',\n          axis: {title: 'population'}\n        },\n        y2: {\n          field: 'upper_box_people',\n          type: 'quantitative'\n        },\n        color: {\n          field: 'mean_people',\n          title: 'Mean of people',\n          type: 'quantitative'\n        },\n        tooltip: [\n          {\n            field: 'max_people',\n            title: 'Max of people',\n            type: 'quantitative'\n          },\n          {\n            field: 'upper_box_people',\n            title: 'Q3 of people',\n            type: 'quantitative'\n          },\n          {\n            field: 'mid_box_people',\n            title: 'Median of people',\n            type: 'quantitative'\n          },\n          {\n            field: 'lower_box_people',\n            title: 'Q1 of people',\n            type: 'quantitative'\n          },\n          {\n            field: 'min_people',\n            title: 'Min of people',\n            type: 'quantitative'\n          },\n          {\n            field: 'age',\n            type: 'quantitative'\n          },\n          {\n            field: 'mean_people',\n            title: 'Mean of people',\n            type: 'quantitative'\n          }\n        ]\n      }\n    });\n  });\n});\n"]}