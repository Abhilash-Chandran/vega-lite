{"version":3,"file":"bin.test.js","sourceRoot":"","sources":["../../test/bin.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAC,MAAM,YAAY,CAAC;AACjE,OAAO,EACL,KAAK,EACL,MAAM,EACN,IAAI,EACJ,WAAW,EACX,OAAO,EACP,GAAG,EACH,KAAK,EACL,IAAI,EACJ,MAAM,EACN,aAAa,EACb,WAAW,EACZ,MAAM,gBAAgB,CAAC;AAExB,QAAQ,CAAC,aAAa,EAAE;IACtB,EAAE,CAAC,gEAAgE,EAAE;QACnE,sDAAsD;QACtD,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC;YACzG,OAAA,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAAnC,CAAmC,CACpC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,aAAa,EAAE;IACtB,EAAE,CAAC,8CAA8C,EAAE;QACjD,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;QAC3C,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,aAAa,EAAE;IACtB,EAAE,CAAC,qDAAqD,EAAE;QACxD,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;QAC3C,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QACxC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,EAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {assert} from 'chai';\nimport {autoMaxBins, binToString, isBinParams} from '../src/bin';\nimport {\n  COLOR,\n  COLUMN,\n  FILL,\n  FILLOPACITY,\n  OPACITY,\n  ROW,\n  SHAPE,\n  SIZE,\n  STROKE,\n  STROKEOPACITY,\n  STROKEWIDTH\n} from '../src/channel';\n\ndescribe('autoMaxBins', () => {\n  it('should assign generate correct defaults for different channels', () => {\n    // Not testing case for 10 because it's already tested\n    [COLOR, FILL, STROKE, STROKEWIDTH, SIZE, OPACITY, FILLOPACITY, STROKEOPACITY, SHAPE, ROW, COLUMN].forEach(a =>\n      assert.deepEqual(autoMaxBins(a), 6)\n    );\n  });\n});\n\ndescribe('binToString', () => {\n  it('should generate the corrrect key for boolean', () => {\n    assert.deepEqual(binToString(true), 'bin');\n    assert.deepEqual(binToString(false), 'bin');\n  });\n});\n\ndescribe('isBinParams', () => {\n  it('should detect whether the input is BinParams or not', () => {\n    assert.deepEqual(isBinParams(true), false);\n    assert.deepEqual(isBinParams({}), true);\n    assert.deepEqual(isBinParams({extent: [0, 1]}), true);\n  });\n});\n"]}