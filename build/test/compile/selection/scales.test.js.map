{"version":3,"file":"scales.test.js","sourceRoot":"","sources":["../../../../test/compile/selection/scales.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {X} from '../../../src/channel';\nimport {assembleScalesForModel} from '../../../src/compile/scale/assemble';\nimport {assembleTopLevelSignals, assembleUnitSelectionSignals} from '../../../src/compile/selection/selection';\nimport {UnitModel} from '../../../src/compile/unit';\nimport * as log from '../../../src/log';\nimport {Domain} from '../../../src/scale';\nimport {parseConcatModel, parseRepeatModel, parseUnitModelWithScale} from '../../util';\n\ndescribe('Selection + Scales', () => {\n  describe('domainRaw', () => {\n    it('is assembled from selection parameter', () => {\n      const model = parseConcatModel({\n        vconcat: [\n          {\n            mark: 'area',\n            selection: {\n              brush: {type: 'interval', encodings: ['x']},\n              brush2: {type: 'multi', fields: ['price'], resolve: 'intersect'}\n            },\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          },\n          {\n            selection: {\n              brush3: {type: 'interval'}\n            },\n            mark: 'area',\n            encoding: {\n              x: {\n                field: 'date',\n                type: 'temporal',\n                scale: {domain: {selection: 'brush', encoding: 'x'}}\n              },\n              y: {\n                field: 'price',\n                type: 'quantitative',\n                scale: {domain: {selection: 'brush2', field: 'price'}}\n              },\n              color: {\n                field: 'symbol',\n                type: 'nominal',\n                scale: {domain: {selection: 'brush2'} as Domain}\n              },\n              opacity: {\n                field: 'symbol',\n                type: 'nominal',\n                scale: {domain: {selection: 'brush3'} as Domain}\n              }\n            }\n          }\n        ],\n        resolve: {\n          scale: {\n            color: 'independent',\n            opacity: 'independent'\n          }\n        }\n      });\n\n      model.parseScale();\n      model.parseSelection();\n\n      const scales = assembleScalesForModel(model.children[1]);\n      const xscale = scales[0];\n      const yscale = scales[1];\n      const cscale = scales[2];\n      const oscale = scales[3];\n\n      assert.isObject(xscale.domain);\n      assert.property(xscale, 'domainRaw');\n      assert.propertyVal(xscale.domainRaw, 'signal', 'brush[\"date\"]');\n\n      assert.isObject(yscale.domain);\n      assert.property(yscale, 'domainRaw');\n      assert.deepPropertyVal(yscale.domainRaw, 'signal', 'brush2[\"price\"]');\n\n      assert.isObject(cscale.domain);\n      assert.property(cscale, 'domainRaw');\n      assert.propertyVal(cscale.domainRaw, 'signal', 'brush2[\"price\"]');\n\n      assert.isObject(oscale.domain);\n      assert.property(oscale, 'domainRaw');\n      assert.propertyVal(oscale.domainRaw, 'signal', 'null');\n    });\n\n    it('should bind both scales in diagonal repeated views', () => {\n      const model = parseRepeatModel({\n        repeat: {\n          row: ['Horsepower', 'Acceleration'],\n          column: ['Miles_per_Gallon', 'Acceleration']\n        },\n        spec: {\n          data: {url: 'data/cars.json'},\n          mark: 'point',\n          selection: {\n            grid: {\n              type: 'interval',\n              resolve: 'global',\n              bind: 'scales'\n            }\n          },\n          encoding: {\n            x: {field: {repeat: 'column'}, type: 'quantitative'},\n            y: {field: {repeat: 'row'}, type: 'quantitative'},\n            color: {field: 'Origin', type: 'nominal'}\n          }\n        }\n      });\n\n      model.parseScale();\n      model.parseSelection();\n\n      const scales = assembleScalesForModel(model.children[3]);\n      assert.isTrue(scales.length === 2);\n      assert.property(scales[0], 'domainRaw');\n      assert.property(scales[1], 'domainRaw');\n      assert.propertyVal(scales[0].domainRaw, 'signal', 'grid[\"Acceleration\"]');\n      assert.propertyVal(scales[1].domainRaw, 'signal', 'grid[\"Acceleration\"]');\n    });\n\n    it('should be merged for layered views', () => {\n      const model = parseConcatModel({\n        data: {url: 'data/sp500.csv'},\n        vconcat: [\n          {\n            layer: [\n              {\n                mark: 'point',\n                encoding: {\n                  x: {\n                    field: 'date',\n                    type: 'temporal',\n                    scale: {domain: {selection: 'brush'}}\n                  },\n                  y: {field: 'price', type: 'quantitative'}\n                }\n              }\n            ]\n          },\n          {\n            mark: 'area',\n            selection: {\n              brush: {type: 'interval', encodings: ['x']}\n            },\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          }\n        ]\n      });\n\n      model.parseScale();\n      model.parseSelection();\n      const scales = assembleScalesForModel(model.children[0]);\n      assert.property(scales[0], 'domainRaw');\n      assert.propertyVal(scales[0].domainRaw, 'signal', 'brush[\"date\"]');\n    });\n  });\n\n  describe('signals', () => {\n    const model = parseRepeatModel({\n      repeat: {\n        row: ['Horsepower', 'Acceleration'],\n        column: ['Miles_per_Gallon', 'Acceleration']\n      },\n      spec: {\n        data: {url: 'data/cars.json'},\n        mark: 'point',\n        selection: {\n          grid: {\n            type: 'interval',\n            resolve: 'global',\n            bind: 'scales'\n          }\n        },\n        encoding: {\n          x: {field: {repeat: 'column'}, type: 'quantitative'},\n          y: {field: {repeat: 'row'}, type: 'quantitative'},\n          color: {field: 'Origin', type: 'nominal'}\n        }\n      }\n    });\n\n    model.parseScale();\n    model.parseSelection();\n\n    it('should be marked as push: outer', () => {\n      const signals = assembleUnitSelectionSignals(model.children[0] as UnitModel, []);\n      const hp = signals.filter(s => s.name === 'grid_Horsepower');\n      const mpg = signals.filter(s => s.name === 'grid_Miles_per_Gallon');\n\n      assert.lengthOf(hp, 1);\n      assert.propertyVal(hp[0], 'push', 'outer');\n      assert.notProperty(hp[0], 'value');\n      assert.notProperty(hp[0], 'update');\n\n      assert.lengthOf(mpg, 1);\n      assert.propertyVal(mpg[0], 'push', 'outer');\n      assert.notProperty(mpg[0], 'value');\n      assert.notProperty(mpg[0], 'update');\n    });\n\n    it('should be assembled at the top-level', () => {\n      const signals = assembleTopLevelSignals(model.children[0] as UnitModel, []);\n      const hp = signals.filter(s => s.name === 'grid_Horsepower');\n      const mpg = signals.filter(s => s.name === 'grid_Miles_per_Gallon');\n      let named = signals.filter(s => s.name === 'grid');\n\n      assert.lengthOf(hp, 1);\n      assert.lengthOf(mpg, 1);\n      assert.lengthOf(named, 1);\n      assert.equal(named[0].update, '{Miles_per_Gallon: grid_Miles_per_Gallon, Horsepower: grid_Horsepower}');\n\n      const signals2 = assembleTopLevelSignals(model.children[1] as UnitModel, signals);\n      const acc = signals2.filter(s => s.name === 'grid_Acceleration');\n      named = signals2.filter(s => s.name === 'grid');\n\n      assert.lengthOf(acc, 1);\n      assert.lengthOf(named, 1);\n      assert.equal(\n        named[0].update,\n        '{Miles_per_Gallon: grid_Miles_per_Gallon, Horsepower: grid_Horsepower, Acceleration: grid_Acceleration}'\n      );\n    });\n  });\n\n  it(\n    'should not bind for unavailable/unsupported scales',\n    log.wrap(localLogger => {\n      let model = parseUnitModelWithScale({\n        data: {url: 'data/cars.json'},\n        selection: {\n          grid: {type: 'interval', bind: 'scales'}\n        },\n        mark: 'circle',\n        encoding: {\n          y: {field: 'Miles_per_Gallon', type: 'quantitative'}\n        }\n      });\n      model.parseSelection();\n      assert.equal(localLogger.warns[0], log.message.cannotProjectOnChannelWithoutField(X));\n\n      model = parseUnitModelWithScale({\n        data: {url: 'data/cars.json'},\n        selection: {\n          grid: {type: 'interval', bind: 'scales'}\n        },\n        mark: 'circle',\n        encoding: {\n          x: {field: 'Origin', type: 'nominal'},\n          y: {field: 'Miles_per_Gallon', type: 'quantitative'}\n        }\n      });\n      model.parseSelection();\n      assert.equal(localLogger.warns[1], log.message.SCALE_BINDINGS_CONTINUOUS);\n    })\n  );\n});\n"]}