{"version":3,"file":"calculate.test.js","sourceRoot":"","sources":["../../../../test/compile/data/calculate.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport {assert} from 'chai';\nimport {CalculateNode} from '../../../src/compile/data/calculate';\nimport {ModelWithField} from '../../../src/compile/model';\nimport {parseUnitModel} from '../../util';\n\nfunction assembleFromSortArray(model: ModelWithField) {\n  const node = CalculateNode.parseAllForSortIndex(null, model) as CalculateNode;\n  return node.assemble();\n}\n\ndescribe('compile/data/calculate', () => {\n  describe('makeAllForSortIndex', () => {\n    it('produces correct formula transform', () => {\n      const model = parseUnitModel({\n        data: {\n          values: [{a: 'A', b: 28}, {a: 'B', b: 55}, {a: 'C', b: 43}]\n        },\n        mark: 'bar',\n        encoding: {\n          x: {field: 'a', type: 'ordinal', sort: ['B', 'A', 'C']},\n          y: {field: 'b', type: 'quantitative'}\n        }\n      });\n      const nodes = assembleFromSortArray(model);\n      expect(nodes).toEqual({\n        type: 'formula',\n        expr: 'datum[\"a\"]===\"B\" ? 0 : datum[\"a\"]===\"A\" ? 1 : datum[\"a\"]===\"C\" ? 2 : 3',\n        as: 'x_a_sort_index'\n      });\n    });\n  });\n\n  describe('dependentFields and producedFields', () => {\n    it('returns the right fields', () => {\n      const node = new CalculateNode(null, {\n        calculate: 'datum.foo + 2',\n        as: 'bar'\n      });\n\n      expect(node.dependentFields()).toEqual({foo: true});\n      expect(node.producedFields()).toEqual({bar: true});\n    });\n  });\n  describe('hash', () => {\n    it('should generate the correct hash', () => {\n      const model = parseUnitModel({\n        data: {\n          values: [{a: 'A', b: 28}, {a: 'B', b: 55}, {a: 'C', b: 43}]\n        },\n        mark: 'bar',\n        encoding: {\n          x: {field: 'a', type: 'ordinal', sort: ['B', 'A', 'C']},\n          y: {field: 'b', type: 'quantitative'}\n        }\n      });\n      const node = CalculateNode.parseAllForSortIndex(null, model) as CalculateNode;\n      assert.deepEqual(node.hash(), 'Calculate 1019364572');\n    });\n  });\n});\n"]}