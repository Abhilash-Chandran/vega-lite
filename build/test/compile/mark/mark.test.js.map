{"version":3,"file":"mark.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/mark.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {COLOR, DETAIL, OPACITY, SIZE, UNIT_CHANNELS} from '../../../src/channel';\nimport {getSort, parseMarkGroup, pathGroupingFields} from '../../../src/compile/mark/mark';\nimport {UnitModel} from '../../../src/compile/unit';\nimport {GEOSHAPE} from '../../../src/mark';\nimport {\n  parseFacetModel,\n  parseUnitModel,\n  parseUnitModelWithScale,\n  parseUnitModelWithScaleAndLayoutSize\n} from '../../util';\n\ndescribe('Mark', () => {\n  describe('parseMarkGroup', () => {\n    // PATH\n    describe('Multi-series Line', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: {type: 'line', style: 'trend'},\n        encoding: {\n          x: {field: 'date', type: 'temporal', axis: {format: '%Y'}},\n          y: {field: 'price', type: 'quantitative'},\n          color: {field: 'symbol', type: 'nominal'}\n        }\n      });\n      it('should have a facet directive and a nested mark group that uses the faceted data.', () => {\n        const markGroup = parseMarkGroup(model)[0];\n        assert.equal(markGroup.name, 'pathgroup');\n        assert.deepEqual(markGroup.from, {\n          facet: {\n            name: 'faceted_path_main',\n            data: 'main',\n            groupby: ['symbol']\n          }\n        });\n        const submarkGroup = markGroup.marks[0];\n        assert.equal(submarkGroup.name, 'marks');\n        assert.equal(submarkGroup.type, 'line');\n        assert.deepEqual(submarkGroup.style, ['line', 'trend']);\n        assert.equal(submarkGroup.from.data, 'faceted_path_main');\n      });\n\n      it('should not have post encoding transform', () => {\n        const markGroup = parseMarkGroup(model)[0];\n        assert.equal(markGroup.name, 'pathgroup');\n        assert.deepEqual(markGroup.from, {\n          facet: {\n            name: 'faceted_path_main',\n            data: 'main',\n            groupby: ['symbol']\n          }\n        });\n        const submarkGroup = markGroup.marks[0];\n        assert.isUndefined(submarkGroup.transform);\n      });\n    });\n\n    describe('Single Line', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'line',\n        encoding: {\n          x: {field: 'date', type: 'temporal', axis: {format: '%Y'}},\n          y: {field: 'price', type: 'quantitative'}\n        }\n      });\n      it('should have mark group with proper data and key', () => {\n        const markGroup = parseMarkGroup(model)[0];\n        assert.equal(markGroup.name, 'marks');\n        assert.equal(markGroup.type, 'line');\n        assert.equal(markGroup.from.data, 'main');\n      });\n\n      it('should not have post encoding transform', () => {\n        const markGroup = parseMarkGroup(model);\n        assert.isUndefined(markGroup[0].transform);\n      });\n\n      // NON-PATH\n    });\n    describe('Points with key', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          x: {field: 'date', type: 'temporal', axis: {format: '%Y'}},\n          y: {field: 'price', type: 'quantitative'},\n          key: {field: 'k', type: 'quantitative'}\n        }\n      });\n      it('should have mark group with proper data and key', () => {\n        const markGroup = parseMarkGroup(model)[0];\n        assert.equal(markGroup.type, 'symbol');\n        assert.equal(markGroup.key.field, 'k');\n        assert.equal(markGroup.from.data, 'main');\n      });\n\n      it('should not have post encoding transform', () => {\n        const markGroup = parseMarkGroup(model);\n        assert.isUndefined(markGroup[0].transform);\n      });\n    });\n\n    it('Geoshape should have post encoding transform', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'geoshape',\n        projection: {\n          type: 'albersUsa'\n        },\n        data: {\n          url: 'data/us-10m.json',\n          format: {\n            type: 'topojson',\n            feature: 'states'\n          }\n        },\n        encoding: {}\n      });\n      const markGroup = parseMarkGroup(model);\n      assert.isDefined(markGroup[0].transform);\n      assert.equal(markGroup[0].transform[0].type, GEOSHAPE);\n    });\n\n    describe('Aggregated Bar with a color with binned x', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'bar',\n        encoding: {\n          x: {type: 'quantitative', field: 'Cost__Other', aggregate: 'sum'},\n          y: {bin: true, type: 'quantitative', field: 'Cost__Total_$'},\n          color: {type: 'ordinal', field: 'Effect__Amount_of_damage'}\n        }\n      });\n      it('should use main stacked data source', () => {\n        const markGroup = parseMarkGroup(model);\n        assert.equal(markGroup[0].from.data, 'main');\n        assert.equal(markGroup[0].style, 'bar');\n      });\n      it('should not have post encoding transform', () => {\n        const markGroup = parseMarkGroup(model);\n        assert.isUndefined(markGroup[0].transform);\n      });\n    });\n\n    describe('Faceted aggregated Bar with a color with binned x', () => {\n      const model = parseFacetModel({\n        facet: {\n          row: {field: 'a', type: 'nominal'}\n        },\n        spec: {\n          mark: 'bar',\n          encoding: {\n            x: {type: 'quantitative', field: 'Cost__Other', aggregate: 'sum'},\n            y: {bin: true, type: 'quantitative', field: 'Cost__Total_$'},\n            color: {type: 'ordinal', field: 'Effect__Amount_of_damage'}\n          }\n        }\n      });\n      it('should use faceted data source', () => {\n        model.parseScale();\n        model.parseLayoutSize();\n\n        const markGroup = parseMarkGroup(model.child as UnitModel);\n        assert.equal(markGroup[0].from.data, 'child_main');\n      });\n\n      it('should not have post encoding transform', () => {\n        model.parseScale();\n        model.parseLayoutSize();\n\n        const markGroup = parseMarkGroup(model.child as UnitModel);\n        assert.isUndefined(markGroup[0].transform);\n      });\n    });\n\n    describe('Aggregated bar', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'bar',\n        encoding: {\n          x: {type: 'quantitative', field: 'Cost__Other', aggregate: 'sum'},\n          y: {bin: true, type: 'quantitative', field: 'Cost__Total_$'}\n        }\n      });\n\n      it('should use main aggregated data source', () => {\n        const markGroup = parseMarkGroup(model);\n        assert.equal(markGroup[0].from.data, 'main');\n      });\n\n      it('should not have post encoding transform', () => {\n        const markGroup = parseMarkGroup(model);\n        assert.isUndefined(markGroup[0].transform);\n      });\n    });\n  });\n\n  describe('getSort', () => {\n    it('should order by order field', () => {\n      const model = parseUnitModel({\n        data: {url: 'data/driving.json'},\n        mark: 'line',\n        encoding: {\n          x: {field: 'miles', type: 'quantitative', scale: {zero: false}},\n          y: {field: 'gas', type: 'quantitative', scale: {zero: false}},\n          order: {field: 'year', type: 'temporal'}\n        }\n      });\n      assert.deepEqual(getSort(model), {\n        field: ['datum[\"year\"]'],\n        order: ['ascending']\n      });\n    });\n\n    it('should have no sort if order = {value: null}', () => {\n      const model = parseUnitModel({\n        data: {url: 'data/driving.json'},\n        mark: 'line',\n        encoding: {\n          x: {field: 'miles', type: 'quantitative', scale: {zero: false}},\n          y: {field: 'gas', type: 'quantitative', scale: {zero: false}},\n          order: {value: null}\n        }\n      });\n      assert.equal(getSort(model), undefined);\n    });\n\n    it('should order by x by default if x is the dimension', () => {\n      const model = parseUnitModelWithScale({\n        data: {url: 'data/movies.json'},\n        mark: 'line',\n        encoding: {\n          x: {\n            bin: {maxbins: 10},\n            field: 'IMDB_Rating',\n            type: 'quantitative'\n          },\n          color: {\n            field: 'Source',\n            type: 'nominal'\n          },\n          y: {\n            aggregate: 'count',\n            type: 'quantitative'\n          }\n        }\n      });\n      assert.deepEqual(getSort(model), {\n        field: 'datum[\"bin_maxbins_10_IMDB_Rating\"]',\n        order: 'descending'\n      });\n    });\n\n    it('should not order by a missing dimension', () => {\n      const model = parseUnitModelWithScale({\n        data: {url: 'data/movies.json'},\n        mark: 'line',\n        encoding: {\n          color: {\n            field: 'Source',\n            type: 'nominal'\n          },\n          y: {\n            aggregate: 'count',\n            type: 'quantitative'\n          }\n        }\n      });\n      assert.deepEqual(getSort(model), undefined);\n    });\n  });\n\n  describe('pathGroupingFields()', () => {\n    it('should return fields for unaggregate detail, color, size, opacity fieldDefs.', () => {\n      for (const channel of [DETAIL, COLOR, SIZE, OPACITY]) {\n        assert.deepEqual(pathGroupingFields('line', {[channel]: {field: 'a', type: 'nominal'}}), ['a']);\n      }\n    });\n\n    it('should not return a field for size of a trail mark.', () => {\n      assert.deepEqual(pathGroupingFields('trail', {size: {field: 'a', type: 'nominal'}}), []);\n    });\n\n    it('should not return fields for aggregate detail, color, size, opacity fieldDefs.', () => {\n      for (const channel of [DETAIL, COLOR, SIZE, OPACITY]) {\n        assert.deepEqual(\n          pathGroupingFields('line', {[channel]: {aggregate: 'mean', field: 'a', type: 'nominal'}}),\n          [],\n          channel\n        );\n      }\n    });\n\n    it('should return condition detail fields for color, size, shape', () => {\n      for (const channel of [COLOR, SIZE, OPACITY]) {\n        assert.deepEqual(\n          pathGroupingFields('line', {\n            [channel]: {\n              condition: {selection: 'sel', field: 'a', type: 'nominal'}\n            }\n          }),\n          ['a']\n        );\n      }\n    });\n\n    it('should not return errors for all channels', () => {\n      for (const channel of UNIT_CHANNELS) {\n        assert.doesNotThrow(() => {\n          pathGroupingFields('line', {\n            [channel]: {field: 'a', type: 'nominal'}\n          });\n        });\n      }\n    });\n  });\n});\n"]}