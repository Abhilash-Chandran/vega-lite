{"version":3,"file":"valueref.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/valueref.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAC9B,OAAO,EAAC,SAAS,EAAE,QAAQ,EAAC,MAAM,oCAAoC,CAAC;AAIvE,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,MAAM,OAAO,GAAY;YACvB,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,GAAG;SACd,CAAC;QACF,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;YACrE,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,oFAAoF,EAAE,GAAG,EAAE;YAC5F,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,MAAM,UAAU,GAAG,GAAG,EAAE,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC;QACtC,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,GAAG,GAAG,QAAQ,CAAC;gBACnB,OAAO,EAAE,GAAG;gBACZ,UAAU,EAAE,EAAC,KAAK,EAAE,OAAO,EAAC;gBAC5B,SAAS,EAAE,SAAS;gBACpB,KAAK,EAAE,SAAS;gBAChB,UAAU;aACX,CAAC,CAAC;YACH,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,EAAC,KAAK,EAAE,OAAO,EAAC,EAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,GAAG,GAAG,QAAQ,CAAC;gBACnB,OAAO,EAAE,GAAG;gBACZ,UAAU,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC;gBAC7B,SAAS,EAAE,SAAS;gBACpB,KAAK,EAAE,SAAS;gBAChB,UAAU;aACX,CAAC,CAAC;YACH,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC,EAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,QAAQ,GAA0B,EAAC,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAC,CAAC;YAClG,MAAM,SAAS,GAA8B,EAAC,KAAK,EAAE,SAAS,EAAC,CAAC;YAChE,MAAM,GAAG,GAAG,QAAQ,CAAC;gBACnB,OAAO,EAAE,GAAG;gBACZ,UAAU,EAAE,QAAQ;gBACpB,WAAW,EAAE,SAAS;gBACtB,SAAS,EAAE,GAAG;gBACd,KAAK,EAAE,SAAS;gBAChB,UAAU;aACX,CAAC,CAAC;YACH,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAC,MAAM,EAAE,yDAAyD,EAAC,CAAC,CAAC;QAC3F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\nimport {getOffset, midPoint} from '../../../src/compile/mark/valueref';\nimport {SecondaryFieldDef, TypedFieldDef} from '../../../src/fielddef';\nimport {MarkDef} from '../../../src/mark';\n\ndescribe('compile/mark/valueref', () => {\n  describe('getOffset', () => {\n    const markDef: MarkDef = {\n      type: 'point',\n      x2Offset: 100\n    };\n    it('should correctly get the offset value for the given channel', () => {\n      expect(getOffset('x2', markDef)).toEqual(100);\n    });\n    it('should return undefined when the offset value for the given channel is not defined', () => {\n      expect(getOffset('x', markDef)).toEqual(undefined);\n    });\n  });\n\n  describe('midPoint()', () => {\n    const defaultRef = () => ({value: 0});\n    it('should return correct value for width', () => {\n      const ref = midPoint({\n        channel: 'x',\n        channelDef: {value: 'width'},\n        scaleName: undefined,\n        scale: undefined,\n        defaultRef\n      });\n      expect(ref).toEqual({field: {group: 'width'}});\n    });\n    it('should return correct value for height', () => {\n      const ref = midPoint({\n        channel: 'y',\n        channelDef: {value: 'height'},\n        scaleName: undefined,\n        scale: undefined,\n        defaultRef\n      });\n      expect(ref).toEqual({field: {group: 'height'}});\n    });\n    it('should return correct value for binned data', () => {\n      const fieldDef: TypedFieldDef<string> = {field: 'bin_start', bin: 'binned', type: 'quantitative'};\n      const fieldDef2: SecondaryFieldDef<string> = {field: 'bin_end'};\n      const ref = midPoint({\n        channel: 'x',\n        channelDef: fieldDef,\n        channel2Def: fieldDef2,\n        scaleName: 'x',\n        scale: undefined,\n        defaultRef\n      });\n      expect(ref).toEqual({signal: 'scale(\"x\", (datum[\"bin_start\"] + datum[\"bin_end\"]) / 2)'});\n    });\n  });\n});\n"]}