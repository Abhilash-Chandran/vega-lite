{"version":3,"file":"type.test.js","sourceRoot":"","sources":["../../../../test/compile/scale/type.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {rangeType, SCALE_CHANNELS, X, Y} from '../../../src/channel';\nimport {scaleType} from '../../../src/compile/scale/type';\nimport {defaultConfig} from '../../../src/config';\nimport * as log from '../../../src/log';\nimport {PRIMITIVE_MARKS} from '../../../src/mark';\nimport {ScaleType} from '../../../src/scale';\nimport {TIMEUNITS} from '../../../src/timeunit';\nimport {NOMINAL, ORDINAL} from '../../../src/type';\nimport * as util from '../../../src/util';\n\nconst defaultScaleConfig = defaultConfig.scale;\n\ndescribe('compile/scale', () => {\n  describe('type()', () => {\n    it('should return null for channel without scale', () => {\n      expect(scaleType({}, 'detail', {type: 'temporal', timeUnit: 'yearmonth'}, 'point', defaultScaleConfig)).toEqual(\n        null\n      );\n    });\n\n    it(\n      'should show warning if users try to override the scale and use bin',\n      log.wrap(localLogger => {\n        expect(\n          scaleType({type: 'point'}, 'color', {type: 'quantitative', bin: true}, 'point', defaultScaleConfig)\n        ).toEqual(ScaleType.BIN_ORDINAL);\n        expect(localLogger.warns[0]).toEqual(\n          log.message.scaleTypeNotWorkWithFieldDef(ScaleType.POINT, ScaleType.BIN_ORDINAL)\n        );\n      })\n    );\n\n    describe('nominal/ordinal', () => {\n      describe('color', () => {\n        it('should return ordinal scale for nominal data by default.', () => {\n          expect(scaleType({}, 'color', {type: 'nominal'}, 'point', defaultScaleConfig)).toEqual(ScaleType.ORDINAL);\n        });\n\n        it('should return ordinal scale for ordinal data.', () => {\n          expect(scaleType({}, 'color', {type: 'nominal'}, 'point', defaultScaleConfig)).toEqual(ScaleType.ORDINAL);\n        });\n      });\n\n      describe('discrete channel (shape)', () => {\n        it('should return ordinal for nominal field', () => {\n          expect(scaleType({}, 'shape', {type: 'nominal'}, 'point', defaultScaleConfig)).toEqual(ScaleType.ORDINAL);\n        });\n\n        it(\n          'should return ordinal even if other type is specified',\n          log.wrap(localLogger => {\n            [ScaleType.LINEAR, ScaleType.BAND, ScaleType.POINT].forEach(badScaleType => {\n              expect(scaleType({type: badScaleType}, 'shape', {type: 'nominal'}, 'point', defaultScaleConfig)).toEqual(\n                ScaleType.ORDINAL\n              );\n              const warns = localLogger.warns;\n              expect(warns[warns.length - 1]).toEqual(\n                log.message.scaleTypeNotWorkWithChannel('shape', badScaleType, 'ordinal')\n              );\n            });\n          })\n        );\n\n        it(\n          'should return ordinal for an ordinal field and throw a warning.',\n          log.wrap(localLogger => {\n            expect(scaleType({}, 'shape', {type: 'ordinal'}, 'point', defaultScaleConfig)).toEqual(ScaleType.ORDINAL);\n            expect(localLogger.warns[0]).toEqual(log.message.discreteChannelCannotEncode('shape', 'ordinal'));\n          })\n        );\n      });\n\n      describe('continuous', () => {\n        it('should return point scale for ordinal X,Y for marks others than rect, rule, and bar', () => {\n          PRIMITIVE_MARKS.forEach(mark => {\n            if (util.contains(['bar', 'rule', 'rect'], mark)) {\n              return;\n            }\n\n            [ORDINAL, NOMINAL].forEach(t => {\n              [X, Y].forEach(channel => {\n                expect(scaleType({}, channel, {type: t}, mark, defaultScaleConfig)).toEqual(ScaleType.POINT);\n              });\n            });\n          });\n        });\n\n        it('should return band scale for ordinal X,Y when mark is rect, rule, bar', () => {\n          [ORDINAL, NOMINAL].forEach(t => {\n            [X, Y].forEach(channel => {\n              ['bar', 'rule', 'rect'].forEach(mark => {\n                expect(scaleType({}, channel, {type: t}, 'rect', defaultScaleConfig)).toEqual(ScaleType.BAND);\n              });\n            });\n          });\n        });\n\n        it('should return point scale for X,Y when mark is point', () => {\n          [ORDINAL, NOMINAL].forEach(t => {\n            [X, Y].forEach(channel => {\n              expect(scaleType({}, channel, {type: t}, 'point', defaultScaleConfig)).toEqual(ScaleType.POINT);\n            });\n          });\n        });\n\n        it(\n          'should return point scale for X,Y when mark is point when ORDINAL SCALE TYPE is specified and throw warning',\n          log.wrap(localLogger => {\n            [ORDINAL, NOMINAL].forEach(t => {\n              [X, Y].forEach(channel => {\n                expect(scaleType({type: 'ordinal'}, channel, {type: t}, 'point', defaultScaleConfig)).toEqual(\n                  ScaleType.POINT\n                );\n                const warns = localLogger.warns;\n                expect(warns[warns.length - 1]).toEqual(\n                  log.message.scaleTypeNotWorkWithChannel(channel, 'ordinal', 'point')\n                );\n              });\n            });\n          })\n        );\n\n        it('should return point scale for ordinal/nominal fields for continuous channels other than x and y.', () => {\n          const OTHER_CONTINUOUS_CHANNELS = SCALE_CHANNELS.filter(\n            c => rangeType(c) === 'continuous' && !util.contains([X, Y], c)\n          );\n          PRIMITIVE_MARKS.forEach(mark => {\n            [ORDINAL, NOMINAL].forEach(t => {\n              OTHER_CONTINUOUS_CHANNELS.forEach(channel => {\n                expect(scaleType({}, channel, {type: t}, mark, defaultScaleConfig)).toEqual(ScaleType.POINT);\n              });\n            });\n          });\n        });\n      });\n    });\n\n    describe('temporal', () => {\n      it('should return sequential scale for temporal color field by default.', () => {\n        expect(scaleType({}, 'color', {type: 'temporal'}, 'point', defaultScaleConfig)).toEqual('time');\n      });\n\n      it(\n        'should return ordinal for temporal field and throw a warning.',\n        log.wrap(localLogger => {\n          expect(\n            scaleType({}, 'shape', {type: 'temporal', timeUnit: 'yearmonth'}, 'point', defaultScaleConfig)\n          ).toEqual(ScaleType.ORDINAL);\n          expect(localLogger.warns[0]).toEqual(log.message.discreteChannelCannotEncode('shape', 'temporal'));\n        })\n      );\n\n      it('should return time for all time units.', () => {\n        for (const timeUnit of TIMEUNITS) {\n          expect(scaleType({}, Y, {type: 'temporal', timeUnit: timeUnit}, 'point', defaultScaleConfig)).toEqual(\n            ScaleType.TIME\n          );\n        }\n      });\n    });\n    describe('quantitative', () => {\n      it('should return sequential scale for quantitative color field by default.', () => {\n        expect(scaleType({}, 'color', {type: 'quantitative'}, 'point', defaultScaleConfig)).toEqual(\n          ScaleType.SEQUENTIAL\n        );\n      });\n\n      it('should return linear scale for piecewise quantitative color field by default.', () => {\n        expect(\n          scaleType(\n            {domain: [1, 2, 3], range: ['red', 'green', 'blue']},\n            'color',\n            {type: 'quantitative'},\n            'point',\n            defaultScaleConfig\n          )\n        ).toEqual(ScaleType.LINEAR);\n      });\n\n      it('should return ordinal bin scale for quantitative color field with binning.', () => {\n        expect(scaleType({}, 'color', {type: 'quantitative', bin: true}, 'point', defaultScaleConfig)).toEqual(\n          ScaleType.BIN_ORDINAL\n        );\n      });\n\n      it(\n        'should return ordinal for encoding quantitative field with a discrete channel and throw a warning.',\n        log.wrap(localLogger => {\n          expect(scaleType({}, 'shape', {type: 'quantitative'}, 'point', defaultScaleConfig)).toEqual(\n            ScaleType.ORDINAL\n          );\n          expect(localLogger.warns[0]).toEqual(log.message.discreteChannelCannotEncode('shape', 'quantitative'));\n        })\n      );\n\n      it('should return linear scale for quantitative by default.', () => {\n        expect(scaleType({}, 'x', {type: 'quantitative'}, 'point', defaultScaleConfig)).toEqual(ScaleType.LINEAR);\n      });\n\n      it('should return bin linear scale for quantitative by default.', () => {\n        expect(scaleType({}, 'opacity', {type: 'quantitative', bin: true}, 'point', defaultScaleConfig)).toEqual(\n          ScaleType.BIN_LINEAR\n        );\n      });\n\n      it('should return linear scale for quantitative x and y.', () => {\n        expect(scaleType({}, 'x', {type: 'quantitative', bin: true}, 'point', defaultScaleConfig)).toEqual(\n          ScaleType.LINEAR\n        );\n      });\n    });\n\n    describe('dataTypeMatchScaleType()', () => {\n      it('should return specified value if datatype is ordinal or nominal and specified scale type is the ordinal or nominal', () => {\n        expect(scaleType({type: ScaleType.ORDINAL}, 'shape', {type: 'ordinal'}, 'point', defaultScaleConfig)).toEqual(\n          ScaleType.ORDINAL\n        );\n      });\n\n      it('should return default scale type if data type is temporal but specified scale type is not time or utc', () => {\n        expect(\n          scaleType({type: ScaleType.LINEAR}, 'x', {type: 'temporal', timeUnit: 'year'}, 'point', defaultScaleConfig)\n        ).toEqual(ScaleType.TIME);\n\n        expect(\n          scaleType(\n            {type: ScaleType.LINEAR},\n            'color',\n            {type: 'temporal', timeUnit: 'year'},\n            'point',\n            defaultScaleConfig\n          )\n        ).toEqual('time');\n      });\n\n      it('should return time if data type is temporal but specified scale type is discrete', () => {\n        expect(\n          scaleType({type: ScaleType.POINT}, 'x', {type: 'temporal', timeUnit: 'year'}, 'point', defaultScaleConfig)\n        ).toEqual(ScaleType.TIME);\n      });\n\n      it('should return default scale type if data type is temporal but specified scale type is time or utc or any discrete type', () => {\n        expect(\n          scaleType({type: ScaleType.LINEAR}, 'x', {type: 'temporal', timeUnit: 'year'}, 'point', defaultScaleConfig)\n        ).toEqual(ScaleType.TIME);\n      });\n\n      it('should return default scale type if data type is quantative but scale type do not support quantative', () => {\n        expect(scaleType({type: ScaleType.TIME}, 'color', {type: 'quantitative'}, 'point', defaultScaleConfig)).toEqual(\n          ScaleType.SEQUENTIAL\n        );\n      });\n\n      it('should return default scale type if data type is quantative and scale type supports quantative', () => {\n        expect(scaleType({type: ScaleType.TIME}, 'x', {type: 'quantitative'}, 'point', defaultScaleConfig)).toEqual(\n          ScaleType.LINEAR\n        );\n      });\n\n      it('should return default scale type if data type is quantative and scale type supports quantative', () => {\n        expect(scaleType({type: ScaleType.TIME}, 'x', {type: 'temporal'}, 'point', defaultScaleConfig)).toEqual(\n          ScaleType.TIME\n        );\n      });\n    });\n  });\n});\n"]}