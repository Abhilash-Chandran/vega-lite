{"version":3,"file":"compile.test.js","sourceRoot":"","sources":["../../../test/compile/compile.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,OAAO,EAAC,MAAM,2BAA2B,CAAC;AAClD,OAAO,KAAK,GAAG,MAAM,eAAe,CAAC;AAErC,QAAQ,CAAC,iBAAiB,EAAE;IAC1B,EAAE,CAAC,qCAAqC,EAAE;QACxC,MAAM,CAAC,MAAM,CACX;YACE,OAAO,CAAC,EAAS,CAAC,CAAC;QACrB,CAAC,EACD,KAAK,EACL,GAAG,CAAC,OAAO,CAAC,YAAY,CACzB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8FAA8F,EAAE;QACjG,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,IAAI,EAAE;gBACJ,MAAM,EAAE,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;aAC1B;YACD,KAAK,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;YACrB,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,EAAE;SACb,CAAC,CAAC,IAAI,CAAC;QAER,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACnC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC9B,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAC,CAAC,CAAC;QAE7D,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc;QACjD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,sBAAsB;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wFAAwF,EAAE;QAC3F,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,OAAO,EAAE,GAAG;YACZ,IAAI,EAAE;gBACJ,MAAM,EAAE,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;aAC1B;YACD,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,EAAE;SACb,CAAC,CAAC,IAAI,CAAC;QAER,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACnC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAE9B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,eAAe;QAClD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,sBAAsB;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE;QAC/C,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,IAAI,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC,EAAC;YACjC,IAAI,EAAE,KAAK;YACX,QAAQ,EAAE;gBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAC;gBAChC,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;aACtC;SACF,CAAC,CAAC,IAAI,CAAC;QAER,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE;YAC7B;gBACE,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,EAAE;aACV;YACD;gBACE,IAAI,EAAE,OAAO;gBACb,MAAM,EAAE,mDAAmD;aAC5D;SACF,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE;QAC3C,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,QAAQ,EAAE;gBACR,MAAM,EAAE,IAAI;aACb;YACD,IAAI,EAAE,EAAC,GAAG,EAAE,SAAS,EAAC;YACtB,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,EAAE;SACb,CAAC,CAAC,IAAI,CAAC;QAER,MAAM,CAAE,IAAI,CAAC,QAAgB,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE;QAC5D,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,QAAQ,EAAE;gBACR,IAAI,EAAE,KAAK;gBACX,QAAQ,EAAE,SAAS;aACpB;YACD,IAAI,EAAE,EAAC,GAAG,EAAE,SAAS,EAAC;YACtB,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,EAAE;SACb,CAAC,CAAC,IAAI,CAAC;QAER,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAC,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE;QAC5C,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,QAAQ,EAAE,KAAK;YACf,IAAI,EAAE,EAAC,GAAG,EAAE,SAAS,EAAC;YACtB,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,EAAE;SACb,CAAC,CAAC,IAAI,CAAC;QAER,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CACA,iDAAiD,EACjD,GAAG,CAAC,IAAI,CAAC,UAAA,WAAW;QAClB,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,IAAI,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC,EAAC;YACjC,IAAI,EAAE,KAAK;YACX,QAAQ,EAAE,KAAK;YACf,QAAQ,EAAE;gBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAC;gBAChC,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;aACtC;SACF,CAAC,CAAC,IAAI,CAAC;QACR,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;QAC/E,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACjC,CAAC,CAAC,CACH,CAAC;IAEF,EAAE,CACA,qCAAqC,EACrC,GAAG,CAAC,IAAI,CAAC,UAAA,WAAW;QAClB,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,IAAI,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC,EAAC;YACjC,QAAQ,EAAE,KAAK;YACf,OAAO,EAAE;gBACP;oBACE,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,EAAE;iBACb;aACF;SACF,CAAC,CAAC,IAAI,CAAC;QACR,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAC/D,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC,CACH,CAAC;IAEF,EAAE,CAAC,yCAAyC,EAAE;QAC5C,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,IAAI,EAAE;gBACJ,MAAM,EAAE,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;aAC1B;YACD,KAAK,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;YACrB,KAAK,EAAE;gBACL;oBACE,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,EAAE;iBACb;aACF;SACF,CAAC,CAAC,IAAI,CAAC;QACR,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAC,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE;QACrD,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,IAAI,EAAE;gBACJ,MAAM,EAAE,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;aAC1B;YACD,KAAK,EAAE,MAAM;YACb,KAAK,EAAE;gBACL;oBACE,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,EAAE;iBACb;aACF;SACF,CAAC,CAAC,IAAI,CAAC;QACR,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAC,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0EAA0E,EAAE;QAC7E,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,IAAI,EAAE;gBACJ,MAAM,EAAE,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;aAC1B;YACD,KAAK,EAAE;gBACL;oBACE,KAAK,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;oBACrB,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,EAAE;iBACb;aACF;SACF,CAAC,CAAC,IAAI,CAAC;QACR,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAC,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CACA,+IAA+I,EAC/I,GAAG,CAAC,IAAI,CAAC,UAAA,WAAW;QAClB,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,IAAI,EAAE;gBACJ,MAAM,EAAE,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;aAC1B;YACD,KAAK,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;YACrB,OAAO,EAAE;gBACP;oBACE,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,EAAE;iBACb;aACF;YACD,MAAM,EAAE,EAAC,KAAK,EAAE,EAAC,MAAM,EAAE,QAAQ,EAAC,EAAC;SACpC,CAAC,CAAC,IAAI,CAAC;QACR,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE;YAC3B,IAAI,EAAE,MAAM;YACZ,MAAM,EAAE,OAAO,CAAC,6CAA6C;SAC9D,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC;IACjF,CAAC,CAAC,CACH,CAAC;IAEF,EAAE,CAAC,gJAAgJ,EAAE;QACnJ,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,IAAI,EAAE;gBACJ,MAAM,EAAE,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;aAC1B;YACD,KAAK,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;YACrB,OAAO,EAAE;gBACP;oBACE,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,EAAE;iBACb;aACF;YACD,MAAM,EAAE,EAAC,KAAK,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,EAAC;SAC7B,CAAC,CAAC,IAAI,CAAC;QACR,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE;YAC3B,IAAI,EAAE,MAAM;YACZ,MAAM,EAAE,OAAO;YACf,MAAM,EAAE,CAAC;SACV,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE;QAChD,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,IAAI,EAAE;gBACJ,MAAM,EAAE,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;aAC1B;YACD,OAAO,EAAE;gBACP;oBACE,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,EAAE;iBACb;aACF;YACD,MAAM,EAAE,EAAC,KAAK,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,EAAC;SAC7B,CAAC,CAAC,IAAI,CAAC;QACR,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE;QAChC,IAAM,IAAI,GAAG,OAAO,CAClB;YACE,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,EAAC,GAAG,EAAE,SAAS,EAAC;YACtB,QAAQ,EAAE,EAAE;SACb,EACD;YACE,MAAM,EAAE;gBACN,UAAU,EAAE,MAAM;aACnB;SACF,CACF,CAAC,IAAI,CAAC;QACP,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE;QAC3C,IAAM,IAAI,GAAG,OAAO,CAClB;YACE,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,EAAC,GAAG,EAAE,SAAS,EAAC;YACtB,QAAQ,EAAE,EAAE;YACZ,MAAM,EAAE;gBACN,UAAU,EAAE,KAAK;aAClB;SACF,EACD;YACE,MAAM,EAAE;gBACN,UAAU,EAAE,MAAM;aACnB;SACF,CACF,CAAC,IAAI,CAAC;QACP,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE;QACrD,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,IAAI,EAAE,UAAU;YAChB,IAAI,EAAE;gBACJ,GAAG,EAAE,kBAAkB;gBACvB,MAAM,EAAE;oBACN,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE,QAAQ;iBAClB;aACF;YACD,QAAQ,EAAE,EAAE;SACb,CAAC,CAAC,IAAI,CAAC;QACR,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE;QACrD,IAAM,IAAI,GAAG,OAAO,CAAC;YACnB,IAAI,EAAE,UAAU;YAChB,UAAU,EAAE;gBACV,IAAI,EAAE,WAAW;aAClB;YACD,IAAI,EAAE;gBACJ,GAAG,EAAE,kBAAkB;gBACvB,MAAM,EAAE;oBACN,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE,QAAQ;iBAClB;aACF;YACD,QAAQ,EAAE,EAAE;SACb,CAAC,CAAC,IAAI,CAAC;QACR,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {compile} from '../../src/compile/compile';\nimport * as log from '../../src/log';\n\ndescribe('compile/compile', () => {\n  it('should throw error for invalid spec', () => {\n    assert.throws(\n      () => {\n        compile({} as any);\n      },\n      Error,\n      log.message.INVALID_SPEC\n    );\n  });\n\n  it('should return a spec with default top-level properties, size signals, data, marks, and title', () => {\n    const spec = compile({\n      data: {\n        values: [{a: 'A', b: 28}]\n      },\n      title: {text: 'test'},\n      mark: 'point',\n      encoding: {}\n    }).spec;\n\n    assert.equal(spec.padding, 5);\n    assert.equal(spec.autosize, 'pad');\n    assert.equal(spec.width, 21);\n    assert.equal(spec.height, 21);\n    assert.deepEqual(spec.title, {text: 'test', frame: 'group'});\n\n    assert.equal(spec.data.length, 1); // just source\n    assert.equal(spec.marks.length, 1); // just the root group\n  });\n\n  it('should return a spec with specified top-level properties, size signals, data and marks', () => {\n    const spec = compile({\n      padding: 123,\n      data: {\n        values: [{a: 'A', b: 28}]\n      },\n      mark: 'point',\n      encoding: {}\n    }).spec;\n\n    assert.equal(spec.padding, 123);\n    assert.equal(spec.autosize, 'pad');\n    assert.equal(spec.width, 21);\n    assert.equal(spec.height, 21);\n\n    assert.equal(spec.data.length, 1); // just source.\n    assert.equal(spec.marks.length, 1); // just the root group\n  });\n\n  it('should use size signal for bar chart width', () => {\n    const spec = compile({\n      data: {values: [{a: 'A', b: 28}]},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'a', type: 'ordinal'},\n        y: {field: 'b', type: 'quantitative'}\n      }\n    }).spec;\n\n    assert.deepEqual(spec.signals, [\n      {\n        name: 'x_step',\n        value: 21\n      },\n      {\n        name: 'width',\n        update: `bandspace(domain('x').length, 0.1, 0.05) * x_step`\n      }\n    ]);\n    assert.equal(spec.height, 200);\n  });\n\n  it('should set resize to true if requested', () => {\n    const spec = compile({\n      autosize: {\n        resize: true\n      },\n      data: {url: 'foo.csv'},\n      mark: 'point',\n      encoding: {}\n    }).spec;\n\n    assert((spec.autosize as any).resize);\n  });\n\n  it('should set autosize to fit and containment if requested', () => {\n    const spec = compile({\n      autosize: {\n        type: 'fit',\n        contains: 'content'\n      },\n      data: {url: 'foo.csv'},\n      mark: 'point',\n      encoding: {}\n    }).spec;\n\n    assert.deepEqual(spec.autosize, {type: 'fit', contains: 'content'});\n  });\n\n  it('should set autosize to fit if requested', () => {\n    const spec = compile({\n      autosize: 'fit',\n      data: {url: 'foo.csv'},\n      mark: 'point',\n      encoding: {}\n    }).spec;\n\n    assert.equal(spec.autosize, 'fit');\n  });\n\n  it(\n    'warn if size is data driven and autosize is fit',\n    log.wrap(localLogger => {\n      const spec = compile({\n        data: {values: [{a: 'A', b: 28}]},\n        mark: 'bar',\n        autosize: 'fit',\n        encoding: {\n          x: {field: 'a', type: 'ordinal'},\n          y: {field: 'b', type: 'quantitative'}\n        }\n      }).spec;\n      assert.equal(localLogger.warns[0], log.message.CANNOT_FIX_RANGE_STEP_WITH_FIT);\n      assert.equal(spec.width, 200);\n      assert.equal(spec.height, 200);\n    })\n  );\n\n  it(\n    'warn if trying to fit composed spec',\n    log.wrap(localLogger => {\n      const spec = compile({\n        data: {values: [{a: 'A', b: 28}]},\n        autosize: 'fit',\n        vconcat: [\n          {\n            mark: 'point',\n            encoding: {}\n          }\n        ]\n      }).spec;\n      assert.equal(localLogger.warns[0], log.message.FIT_NON_SINGLE);\n      assert.equal(spec.autosize, 'pad');\n    })\n  );\n\n  it('should return title for a layered spec.', () => {\n    const spec = compile({\n      data: {\n        values: [{a: 'A', b: 28}]\n      },\n      title: {text: 'test'},\n      layer: [\n        {\n          mark: 'point',\n          encoding: {}\n        }\n      ]\n    }).spec;\n    assert.deepEqual(spec.title, {text: 'test', frame: 'group'});\n  });\n\n  it('should return title (string) for a layered spec.', () => {\n    const spec = compile({\n      data: {\n        values: [{a: 'A', b: 28}]\n      },\n      title: 'test',\n      layer: [\n        {\n          mark: 'point',\n          encoding: {}\n        }\n      ]\n    }).spec;\n    assert.deepEqual(spec.title, {text: 'test', frame: 'group'});\n  });\n\n  it('should return title from a child of a layer spec if parent has no title.', () => {\n    const spec = compile({\n      data: {\n        values: [{a: 'A', b: 28}]\n      },\n      layer: [\n        {\n          title: {text: 'test'},\n          mark: 'point',\n          encoding: {}\n        }\n      ]\n    }).spec;\n    assert.deepEqual(spec.title, {text: 'test', frame: 'group'});\n  });\n\n  it(\n    'should return a title for a concat spec, throw warning if anchor is set to other values than \"start\" and automatically set anchor to \"start\".',\n    log.wrap(localLogger => {\n      const spec = compile({\n        data: {\n          values: [{a: 'A', b: 28}]\n        },\n        title: {text: 'test'},\n        hconcat: [\n          {\n            mark: 'point',\n            encoding: {}\n          }\n        ],\n        config: {title: {anchor: 'middle'}}\n      }).spec;\n      assert.deepEqual(spec.title, {\n        text: 'test',\n        anchor: 'start' // We only support anchor as start for concat\n      });\n      assert.equal(localLogger.warns[0], log.message.cannotSetTitleAnchor('concat'));\n    })\n  );\n\n  it('should return a title for a concat spec, automatically set anchor to \"start\", and augment the title with non-mark title config (e.g., offset).', () => {\n    const spec = compile({\n      data: {\n        values: [{a: 'A', b: 28}]\n      },\n      title: {text: 'test'},\n      hconcat: [\n        {\n          mark: 'point',\n          encoding: {}\n        }\n      ],\n      config: {title: {offset: 5}}\n    }).spec;\n    assert.deepEqual(spec.title, {\n      text: 'test',\n      anchor: 'start',\n      offset: 5\n    });\n  });\n\n  it('should not have title if there is no title.', () => {\n    const spec = compile({\n      data: {\n        values: [{a: 'A', b: 28}]\n      },\n      hconcat: [\n        {\n          mark: 'point',\n          encoding: {}\n        }\n      ],\n      config: {title: {offset: 5}}\n    }).spec;\n    assert.isUndefined(spec.title);\n  });\n\n  it('should use provided config.', () => {\n    const spec = compile(\n      {\n        mark: 'point',\n        data: {url: 'foo.csv'},\n        encoding: {}\n      },\n      {\n        config: {\n          background: 'blue'\n        }\n      }\n    ).spec;\n    assert.equal(spec.config.background, 'blue');\n  });\n\n  it('should merge spec and provided config.', () => {\n    const spec = compile(\n      {\n        mark: 'point',\n        data: {url: 'foo.csv'},\n        encoding: {},\n        config: {\n          background: 'red'\n        }\n      },\n      {\n        config: {\n          background: 'blue'\n        }\n      }\n    ).spec;\n    assert.equal(spec.config.background, 'red');\n  });\n\n  it('should return a spec with projections (implicit)', () => {\n    const spec = compile({\n      mark: 'geoshape',\n      data: {\n        url: 'data/us-10m.json',\n        format: {\n          type: 'topojson',\n          feature: 'states'\n        }\n      },\n      encoding: {}\n    }).spec;\n    assert.isDefined(spec.projections);\n  });\n\n  it('should return a spec with projections (explicit)', () => {\n    const spec = compile({\n      mark: 'geoshape',\n      projection: {\n        type: 'albersUsa'\n      },\n      data: {\n        url: 'data/us-10m.json',\n        format: {\n          type: 'topojson',\n          feature: 'states'\n        }\n      },\n      encoding: {}\n    }).spec;\n    assert.isDefined(spec.projections);\n  });\n});\n"]}