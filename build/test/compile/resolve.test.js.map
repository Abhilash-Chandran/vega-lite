{"version":3,"file":"resolve.test.js","sourceRoot":"","sources":["../../../test/compile/resolve.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {defaultScaleResolve, parseGuideResolve} from '../../src/compile/resolve';\nimport * as log from '../../src/log';\nimport {parseConcatModel, parseFacetModel, parseLayerModel, parseRepeatModel} from '../util';\n\ndescribe('compile/resolve', () => {\n  describe('defaultScaleResolve', () => {\n    it('shares scales for layer model by default.', () => {\n      const model = parseLayerModel({\n        layer: []\n      });\n      expect(defaultScaleResolve('x', model)).toEqual('shared');\n    });\n\n    it('shares scales for facet model by default.', () => {\n      const model = parseFacetModel({\n        facet: {\n          row: {field: 'a', type: 'nominal'}\n        },\n        spec: {mark: 'point', encoding: {}}\n      });\n      expect(defaultScaleResolve('x', model)).toEqual('shared');\n    });\n\n    it('separates xy scales for concat model by default.', () => {\n      const model = parseConcatModel({\n        hconcat: []\n      });\n      expect(defaultScaleResolve('x', model)).toEqual('independent');\n    });\n\n    it('shares non-xy scales for concat model by default.', () => {\n      const model = parseConcatModel({\n        hconcat: []\n      });\n      expect(defaultScaleResolve('color', model)).toEqual('shared');\n    });\n\n    it('separates xy scales for repeat model by default.', () => {\n      const model = parseRepeatModel({\n        repeat: {\n          row: ['a', 'b']\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: {repeat: 'row'}, type: 'quantitative'},\n            color: {field: 'color', type: 'quantitative'}\n          }\n        }\n      });\n      expect(defaultScaleResolve('x', model)).toEqual('independent');\n    });\n\n    it('shares non-xy scales for repeat model by default.', () => {\n      const model = parseRepeatModel({\n        repeat: {\n          row: ['a', 'b']\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: {repeat: 'row'}, type: 'quantitative'},\n            color: {field: 'color', type: 'quantitative'}\n          }\n        }\n      });\n      expect(defaultScaleResolve('color', model)).toEqual('shared');\n    });\n  });\n\n  describe('parseGuideResolve', () => {\n    it('shares axis for a shared scale by default', () => {\n      const axisResolve = parseGuideResolve(\n        {\n          scale: {x: 'shared'},\n          axis: {}\n        },\n        'x'\n      );\n      expect(axisResolve).toEqual('shared');\n    });\n\n    it('separates axis for a shared scale if specified', () => {\n      const axisResolve = parseGuideResolve(\n        {\n          scale: {x: 'shared'},\n          axis: {x: 'independent'}\n        },\n        'x'\n      );\n      expect(axisResolve).toEqual('independent');\n    });\n\n    it('separates legend for a shared scale if specified', () => {\n      const legendResolve = parseGuideResolve(\n        {\n          scale: {color: 'shared'},\n          legend: {color: 'independent'}\n        },\n        'color'\n      );\n      expect(legendResolve).toEqual('independent');\n    });\n\n    it('separates axis for an independent scale by default', () => {\n      const axisResolve = parseGuideResolve(\n        {\n          scale: {x: 'independent'},\n          axis: {}\n        },\n        'x'\n      );\n      expect(axisResolve).toEqual('independent');\n    });\n\n    it(\n      'separates axis for an independent scale even \"shared\" is specified and throw warning',\n      log.wrap(localLogger => {\n        const axisResolve = parseGuideResolve(\n          {\n            scale: {x: 'independent'},\n            axis: {x: 'shared'}\n          },\n          'x'\n        );\n        expect(axisResolve).toEqual('independent');\n        expect(localLogger.warns[0]).toEqual(log.message.independentScaleMeansIndependentGuide('x'));\n      })\n    );\n  });\n});\n"]}