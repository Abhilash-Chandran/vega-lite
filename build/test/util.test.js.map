{"version":3,"file":"util.test.js","sourceRoot":"","sources":["../../test/util.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {entries, fieldIntersection, fill, flatAccessWithDatum, prefixGenerator, unique, uniqueId} from '../src/util';\n\nimport {\n  accessPathDepth,\n  accessPathWithDatum,\n  deleteNestedProperty,\n  hash,\n  replacePathInField,\n  stringify,\n  varName\n} from '../src/util';\n\ndescribe('util', () => {\n  describe('varName', () => {\n    it('replaces all non-alphanumeric characters with _', () => {\n      assert.equal(varName('bin-mpg$!@#%_+1'), 'bin_mpg_______1');\n    });\n\n    it('prepends _ if the string starts with number', () => {\n      assert.equal(varName('1a'), '_1a');\n    });\n  });\n\n  describe('stringify', () => {\n    it('stringifies numbers', () => {\n      assert.equal(stringify(12), '12');\n    });\n\n    it('stringifies booleans', () => {\n      assert.equal(stringify(true), 'true');\n    });\n\n    it('stringifies strings', () => {\n      assert.equal(stringify('foo'), '\"foo\"');\n    });\n\n    it('stringifies objects', () => {\n      assert.equal(stringify({foo: 42}), '{\"foo\":42}');\n    });\n  });\n\n  describe('hash', () => {\n    it('hashes numbers as numbers', () => {\n      assert.equal(hash(12), 12);\n    });\n\n    it('hashes booleans as strings so that they can be used as keys', () => {\n      assert.equal(hash(true), 'true');\n    });\n\n    it('hashes strings as strings', () => {\n      assert.equal(hash('foo'), 'foo');\n    });\n\n    it('hashes objects', () => {\n      assert.equal(hash({foo: 42}), '{\"foo\":42}');\n    });\n  });\n  describe('deleteNestedProperty', () => {\n    it('removes a property from an object', () => {\n      const originalObject = {\n        property1: {property1: 'value1'},\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      const newObject = {\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      deleteNestedProperty(originalObject, ['property1']);\n      assert.equal(stringify(originalObject), stringify(newObject));\n    });\n\n    it('removes nested properties', () => {\n      const originalObject = {\n        property1: {property4: 'value1'},\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      const newObject = {\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      deleteNestedProperty(originalObject, ['property1', 'property4']);\n      assert.equal(stringify(originalObject), stringify(newObject));\n    });\n\n    it('stops when it does not empty the last element', () => {\n      const originalObject = {\n        property1: {property4: 'value1'},\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      const newObject = {\n        property1: {property4: 'value1'},\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3'}\n      };\n      deleteNestedProperty(originalObject, ['property3', 'property7']);\n      assert.equal(stringify(originalObject), stringify(newObject));\n    });\n  });\n\n  describe('accessPathWithDatum', () => {\n    it('should parse foo', () => {\n      assert.equal(accessPathWithDatum('foo'), 'datum[\"foo\"]');\n    });\n\n    it('should parse foo.bar', () => {\n      assert.equal(accessPathWithDatum('foo.bar'), 'datum[\"foo\"] && datum[\"foo\"][\"bar\"]');\n    });\n\n    it('should support cusotom datum', () => {\n      assert.equal(accessPathWithDatum('foo', 'parent'), 'parent[\"foo\"]');\n    });\n  });\n\n  describe('flatAccessWithDatum', () => {\n    it('should parse foo.bar', () => {\n      assert.equal(flatAccessWithDatum('foo.bar'), 'datum[\"foo.bar\"]');\n    });\n\n    it('should return string value of field name', () => {\n      assert.equal(flatAccessWithDatum('foo[\"bar\"].baz'), 'datum[\"foo.bar.baz\"]');\n    });\n\n    it('should support cusotom datum', () => {\n      assert.equal(flatAccessWithDatum('foo', 'parent'), 'parent[\"foo\"]');\n    });\n  });\n\n  describe('accessPathDepth', () => {\n    it('should return 1 if the field is not nested', () => {\n      assert.equal(accessPathDepth('foo'), 1);\n    });\n\n    it('should return 1 if . is escaped', () => {\n      assert.equal(accessPathDepth('foo\\\\.bar'), 1);\n    });\n\n    it('should return 2 for foo.bar', () => {\n      assert.equal(accessPathDepth('foo.bar'), 2);\n    });\n  });\n\n  describe('removePathFromField', () => {\n    it('should convert nested accesses to \\\\.', () => {\n      assert.equal(replacePathInField('foo[\"bar\"].baz'), 'foo\\\\.bar\\\\.baz');\n    });\n\n    it('should keep \\\\.', () => {\n      assert.equal(replacePathInField('foo\\\\.bar'), 'foo\\\\.bar');\n    });\n  });\n\n  describe('prefixGenerator', () => {\n    it('should return the correct value for simple nested field', () => {\n      expect(prefixGenerator({'a.b': true})).toEqual({a: true, 'a[b]': true});\n    });\n\n    it('should return the correct value for multilevel nested field', () => {\n      expect(prefixGenerator({'a[b].c.d': true})).toEqual({\n        a: true,\n        'a[b]': true,\n        'a[b][c]': true,\n        'a[b][c][d]': true\n      });\n    });\n  });\n\n  describe('fieldIntersection', () => {\n    it('should return the correct value for 2 stringsets', () => {\n      expect(fieldIntersection({'a.b': true, d: true}, {'a[b]': true})).toBe(true);\n    });\n    it('should return the correct value for 2 nested but different stringsets', () => {\n      expect(fieldIntersection({'a.b.c': true}, {'a.b.d': true})).toBe(true);\n    });\n\n    it('should return the correct value for 2 nested but different stringsets', () => {\n      expect(fieldIntersection({'a.b.c': true}, {'z.b.c': true})).toBe(false);\n    });\n  });\n\n  describe('unique', () => {\n    it('should collapse the same numbers', () => {\n      expect(unique([1, 2, 3, 2], d => d)).toEqual([1, 2, 3]);\n    });\n    it('should collapse the same items with strings', () => {\n      expect(unique([1, 2, 'a', 'a'], d => d)).toEqual([1, 2, 'a']);\n    });\n  });\n\n  describe('entries', () => {\n    it('should return entries', () => {\n      expect(entries({a: 12, b: 42})).toEqual([{key: 'a', value: 12}, {key: 'b', value: 42}]);\n    });\n  });\n\n  describe('uniqueId', () => {\n    it('should return new id', () => {\n      expect(uniqueId() === uniqueId()).toBeFalsy();\n    });\n  });\n\n  describe('fill', () => {\n    it('should return array of right length and filled with the right values', () => {\n      const arr = fill(42, 5);\n      expect(arr).toHaveLength(5);\n      expect(arr).toEqual([42, 42, 42, 42, 42]);\n    });\n  });\n});\n"]}