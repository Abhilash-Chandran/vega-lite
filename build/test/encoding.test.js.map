{"version":3,"file":"encoding.test.js","sourceRoot":"","sources":["../../test/encoding.test.ts"],"names":[],"mappings":";;;AAAA,6BAA4B;AAC5B,4CAAkD;AAClD,sDAAkC;AAElC,QAAQ,CAAC,UAAU,EAAE;IACnB,QAAQ,CAAC,mBAAmB,EAAE;QAC5B,EAAE,CACA,gDAAgD,EAChD,GAAG,CAAC,IAAI,CAAC,UAAA,MAAM;YACb,IAAM,QAAQ,GAAG,4BAAiB,CAChC;gBACE,KAAK,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;gBACzC,IAAI,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;aACzC,EACD,MAAM,CACP,CAAC;YAEF,aAAM,CAAC,SAAS,CAAC,QAAQ,EAAE;gBACzB,IAAI,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;aACzC,CAAC,CAAC;YACH,aAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;QACrF,CAAC,CAAC,CACH,CAAC;QAEF,EAAE,CACA,kDAAkD,EAClD,GAAG,CAAC,IAAI,CAAC,UAAA,MAAM;YACb,IAAM,QAAQ,GAAG,4BAAiB,CAChC;gBACE,KAAK,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;gBACzC,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;aAC3C,EACD,MAAM,CACP,CAAC;YAEF,aAAM,CAAC,SAAS,CAAC,QAAQ,EAAE;gBACzB,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;aAC3C,CAAC,CAAC;YACH,aAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;QACvF,CAAC,CAAC,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {assert} from 'chai';\nimport {normalizeEncoding} from '../src/encoding';\nimport * as log from '../src/log';\n\ndescribe('encoding', () => {\n  describe('normalizeEncoding', () => {\n    it(\n      'should drop color channel if fill is specified',\n      log.wrap(logger => {\n        const encoding = normalizeEncoding(\n          {\n            color: {field: 'a', type: 'quantitative'},\n            fill: {field: 'b', type: 'quantitative'}\n          },\n          'rule'\n        );\n\n        assert.deepEqual(encoding, {\n          fill: {field: 'b', type: 'quantitative'}\n        });\n        assert.equal(logger.warns[0], log.message.droppingColor('encoding', {fill: true}));\n      })\n    );\n\n    it(\n      'should drop color channel if stroke is specified',\n      log.wrap(logger => {\n        const encoding = normalizeEncoding(\n          {\n            color: {field: 'a', type: 'quantitative'},\n            stroke: {field: 'b', type: 'quantitative'}\n          },\n          'rule'\n        );\n\n        assert.deepEqual(encoding, {\n          stroke: {field: 'b', type: 'quantitative'}\n        });\n        assert.equal(logger.warns[0], log.message.droppingColor('encoding', {stroke: true}));\n      })\n    );\n  });\n});\n"]}