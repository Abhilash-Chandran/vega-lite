{"version":3,"file":"resolve.test.js","sourceRoot":"","sources":["../../test-runtime/resolve.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {Page} from 'puppeteer';\nimport {\n  brush,\n  compositeTypes,\n  embedFn,\n  hits as hitsMaster,\n  parentSelector,\n  pt,\n  resolutions,\n  selectionTypes,\n  spec,\n  testRenderFn,\n  unitNameRegex\n} from './util';\n\ndeclare const page: Page;\n\nfor (const type of selectionTypes) {\n  const embed = embedFn(page);\n  const isInterval = type === 'interval';\n  const hits = isInterval ? hitsMaster.interval : hitsMaster.discrete;\n  const fn = isInterval ? brush : pt;\n\n  describe(`${type} selections at runtime`, async () => {\n    beforeAll(async () => {\n      await page.goto('http://0.0.0.0:8000/test-runtime/');\n    });\n\n    compositeTypes.forEach(specType => {\n      const testRender = testRenderFn(page, `${type}/${specType}`);\n      describe(`in ${specType} views`, async () => {\n        /**\n         * Loop through the views, click to add a selection instance.\n         * Store size should stay constant, but unit names should vary.\n         */\n        it('should have one global selection instance', async () => {\n          const selection = {\n            type,\n            resolve: 'global',\n            ...(specType === 'facet' ? {encodings: ['y']} : {})\n          };\n\n          for (let i = 0; i < hits[specType].length; i++) {\n            await embed(spec(specType, i, selection));\n            const parent = parentSelector(specType, i);\n            const store = await page.evaluate(fn(specType, i, parent));\n            expect(store).toHaveLength(1);\n            expect(store[0].unit).toMatch(unitNameRegex(specType, i));\n            await testRender(`global_${i}`);\n\n            if (i === hits[specType].length - 1) {\n              const cleared = await page.evaluate(fn(`${specType}_clear`, 0, parent));\n              expect(cleared).toHaveLength(0);\n              await testRender(`global_clear_${i}`);\n            }\n          }\n        });\n\n        for (const resolve of resolutions) {\n          const selection = {\n            type,\n            resolve,\n            ...(specType === 'facet' ? {encodings: ['x']} : {})\n          };\n\n          /**\n           * Loop through the views, click to add selection instance and observe\n           * incrementing store size. Then, loop again but click to clear and\n           * observe decrementing store size. Check unit names in each case.\n           */\n          it(`should have one selection instance per ${resolve} view`, async () => {\n            await embed(spec(specType, 0, selection));\n            for (let i = 0; i < hits[specType].length; i++) {\n              const parent = parentSelector(specType, i);\n              const store = await page.evaluate(fn(specType, i, parent));\n              expect(store).toHaveLength(i + 1);\n              expect(store[i].unit).toMatch(unitNameRegex(specType, i));\n              await testRender(`${resolve}_${i}`);\n            }\n\n            await embed(spec(specType, 1, {type, resolve, encodings: ['x']}));\n            for (let i = 0; i < hits[specType].length; i++) {\n              const parent = parentSelector(specType, i);\n              await page.evaluate(fn(specType, i, parent));\n            }\n\n            for (let i = hits[`${specType}_clear`].length - 1; i >= 0; i--) {\n              const parent = parentSelector(specType, i);\n              const store = await page.evaluate(fn(`${specType}_clear`, i, parent));\n              expect(store).toHaveLength(i);\n              if (i > 0) {\n                expect(store[i - 1].unit).toMatch(unitNameRegex(specType, i - 1));\n              }\n              await testRender(`${resolve}_clear_${i}`);\n            }\n          });\n        }\n      });\n    });\n  });\n}\n"]}