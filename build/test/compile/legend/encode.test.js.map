{"version":3,"file":"encode.test.js","sourceRoot":"","sources":["../../../../test/compile/legend/encode.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {COLOR} from '../../../src/channel';\nimport * as encode from '../../../src/compile/legend/encode';\nimport {TimeUnit} from '../../../src/timeunit';\nimport {TEMPORAL} from '../../../src/type';\nimport {parseUnitModelWithScale} from '../../util';\n\ndescribe('compile/legend', function() {\n  describe('encode.symbols', function() {\n    it('should not have fill, strokeDash, or strokeDashOffset', function() {\n\n      const symbol = encode.symbols({field: 'a', type: 'nominal'}, {}, parseUnitModelWithScale({\n          mark: \"point\",\n          encoding: {\n            x: {field: \"a\", type: \"nominal\"},\n            color: {field: \"a\", type: \"nominal\"}\n          }\n        }), COLOR, 'symbol');\n        assert.deepEqual(symbol.fill, {value: 'transparent'});\n        assert.isUndefined((symbol||{}).strokeDash);\n        assert.isUndefined((symbol||{}).strokeDashOffset);\n    });\n\n    it('should return specific symbols.shape.value if user has specified', function() {\n\n      const symbol = encode.symbols({field: 'a', type: 'nominal'}, {}, parseUnitModelWithScale({\n          mark: \"point\",\n          encoding: {\n            x: {field: \"a\", type: \"nominal\"},\n            shape: {value: \"square\"}}\n        }), COLOR, 'symbol');\n        assert.deepEqual(symbol.shape['value'], 'square');\n    });\n\n    it('should have default opacity', function() {\n\n      const symbol = encode.symbols({field: 'a', type: 'nominal'}, {}, parseUnitModelWithScale({\n          mark: \"point\",\n          encoding: {\n            x: {field: \"a\", type: \"nominal\"}}\n        }), COLOR, 'symbol');\n      assert.deepEqual(symbol.opacity['value'], 0.7); // default opacity is 0.7.\n    });\n\n    it('should return the maximum value when there is a condition', function() {\n\n      const symbol = encode.symbols({field: 'a', type: 'nominal'}, {}, parseUnitModelWithScale({\n          mark: \"point\",\n          encoding: {\n            x: {field: \"a\", type: \"nominal\"},\n            opacity: {\n              condition: {selection: \"brush\", value: 1},\n              value: 0\n            }}\n        }), COLOR, 'symbol');\n        assert.deepEqual(symbol.opacity['value'], 1);\n    });\n  });\n\n  describe('encode.gradient', function() {\n    it('should have default opacity', function() {\n      const gradient = encode.gradient({field: 'a', type: 'quantitative'}, {}, parseUnitModelWithScale({\n          mark: \"point\",\n          encoding: {\n            x: {field: \"a\", type: \"quantitative\"}}\n        }), COLOR, 'gradient');\n\n      assert.deepEqual(gradient.opacity['value'], 0.7); // default opacity is 0.7.\n    });\n  });\n\n  describe('encode.labels', function() {\n    it('should return correct expression for the timeUnit: TimeUnit.MONTH', function() {\n\n      const model = parseUnitModelWithScale({\n        mark: \"point\",\n        encoding: {\n          x: {field: \"a\", type: \"temporal\"},\n          color: {field: \"a\", type: \"temporal\", timeUnit: \"month\"}\n        }\n      });\n\n      const fieldDef = {field: 'a', type: TEMPORAL, timeUnit: TimeUnit.MONTH};\n      const label = encode.labels(fieldDef, {}, model, COLOR, 'gradient');\n      const expected = `timeFormat(datum.value, '%b')`;\n      assert.deepEqual(label.text.signal, expected);\n    });\n\n    it('should return correct expression for the timeUnit: TimeUnit.QUARTER', function() {\n\n      const model = parseUnitModelWithScale({\n        mark: \"point\",\n        encoding: {\n          x: {field: \"a\", type: \"temporal\"},\n          color: {field: \"a\", type: \"temporal\", timeUnit: \"quarter\"}}\n      });\n\n      const fieldDef = {field: 'a', type: TEMPORAL, timeUnit: TimeUnit.QUARTER};\n      const label = encode.labels(fieldDef, {}, model, COLOR, 'gradient');\n      const expected = `'Q' + quarter(datum.value)`;\n      assert.deepEqual(label.text.signal, expected);\n    });\n  });\n});\n"]}