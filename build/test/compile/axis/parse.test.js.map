{"version":3,"file":"parse.test.js","sourceRoot":"","sources":["../../../../test/compile/axis/parse.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {Y} from '../../../src/channel';\nimport {parseLayerAxis, parseUnitAxis} from '../../../src/compile/axis/parse';\nimport {parseLayerModel, parseUnitModelWithScale} from '../../util';\n\ndescribe('Axis', () => {\n  // TODO: move this to model.test.ts\n  describe('= true', () => {\n    it('should produce default properties for axis', () => {\n      const model1 = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'}\n        },\n        data: {url: 'data/movies.json'}\n      });\n\n      const model2 = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'}\n        },\n        data: {url: 'data/movies.json'}\n      });\n      assert.deepEqual(model1.axis(Y), model2.axis(Y));\n    });\n  });\n  describe('parseUnitAxis', () => {\n    it('should produce Vega grid', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          x: {\n            field: 'a',\n            type: 'quantitative',\n            axis: {grid: true, gridColor: 'blue', gridWidth: 20}\n          }\n        }\n      });\n      const axisComponent = parseUnitAxis(model);\n      assert.equal(axisComponent['x'].length, 1);\n      assert.equal(axisComponent['x'][0].explicit.grid, true);\n    });\n\n    it('should produce Vega grid when axis config is specified.', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          x: {\n            field: 'a',\n            type: 'quantitative'\n          }\n        },\n        config: {axisX: {grid: true}}\n      });\n      const axisComponent = parseUnitAxis(model);\n      assert.equal(axisComponent['x'].length, 1);\n      assert.equal(axisComponent['x'][0].implicit.grid, true);\n    });\n\n    it('should produce axis component with grid=false', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          x: {\n            field: 'a',\n            type: 'quantitative',\n            axis: {grid: false, gridColor: 'blue', gridWidth: 20}\n          }\n        }\n      });\n      const axisComponent = parseUnitAxis(model);\n      assert.equal(axisComponent['x'].length, 1);\n      assert.equal(axisComponent['x'][0].explicit.grid, false);\n    });\n\n    it('should ignore null scales', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          longitude: {\n            field: 'a',\n            type: 'quantitative'\n          },\n          latitude: {\n            field: 'b',\n            type: 'quantitative'\n          }\n        }\n      });\n      const axisComponent = parseUnitAxis(model);\n      assert.isUndefined(axisComponent['x']);\n      assert.isUndefined(axisComponent['y']);\n    });\n\n    it('should produce Vega grid axis = undefined axis if grid is disabled via config.axisX', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          x: {\n            field: 'a',\n            type: 'quantitative'\n          }\n        },\n        config: {axisX: {grid: false}}\n      });\n      const axisComponent = parseUnitAxis(model);\n      assert.equal(axisComponent['x'].length, 1);\n      assert.equal(axisComponent['x'][0].explicit.grid, undefined);\n    });\n\n    it('should produce Vega grid axis = undefined axis if grid is disabled via config.axis', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          x: {\n            field: 'a',\n            type: 'quantitative'\n          }\n        },\n        config: {axis: {grid: false}}\n      });\n      const axisComponent = parseUnitAxis(model);\n      assert.equal(axisComponent['x'].length, 1);\n      assert.equal(axisComponent['x'][0].explicit.grid, undefined);\n    });\n\n    it('should store the title value if title = null, \"\", or false', () => {\n      for (const val of [null, '', false]) {\n        const model = parseUnitModelWithScale({\n          mark: 'point',\n          encoding: {\n            x: {\n              field: 'a',\n              type: 'quantitative',\n              axis: {title: val as any} // Need to cast as false is not valid, but we want to fall back gracefully\n            }\n          }\n        });\n        const axisComponent = parseUnitAxis(model);\n        assert.equal(axisComponent['x'].length, 1);\n        assert.equal(axisComponent['x'][0].explicit.title, val as any);\n      }\n    });\n\n    it('should store the fieldDef title value if title = null, \"\", or false', () => {\n      for (const val of [null, '', false]) {\n        const model = parseUnitModelWithScale({\n          mark: 'point',\n          encoding: {\n            x: {\n              field: 'a',\n              type: 'quantitative',\n              title: val as any // Need to cast as false is not valid, but we want to fall back gracefully\n            }\n          }\n        });\n        const axisComponent = parseUnitAxis(model);\n        assert.equal(axisComponent['x'].length, 1);\n        assert.equal(axisComponent['x'][0].explicit.title, val as any);\n      }\n    });\n\n    it('should store fieldDef.title as explicit', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          x: {\n            field: 'a',\n            type: 'quantitative',\n            title: 'foo'\n          }\n        }\n      });\n      const axisComponent = parseUnitAxis(model);\n      assert.equal(axisComponent['x'].length, 1);\n      assert.equal(axisComponent['x'][0].explicit.title, 'foo');\n    });\n\n    it('should merge title of fieldDef and fieldDef2', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {\n            field: 'a',\n            type: 'quantitative',\n            title: 'foo'\n          },\n          x2: {\n            field: 'b',\n            type: 'quantitative',\n            title: 'bar'\n          }\n        }\n      });\n      const axisComponent = parseUnitAxis(model);\n      assert.equal(axisComponent['x'].length, 1);\n      assert.equal(axisComponent['x'][0].explicit.title, 'foo, bar');\n    });\n\n    it('should use title of fieldDef2', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {\n            field: 'a',\n            type: 'quantitative'\n          },\n          x2: {\n            field: 'b',\n            type: 'quantitative',\n            title: 'bar'\n          }\n        }\n      });\n      const axisComponent = parseUnitAxis(model);\n      assert.equal(axisComponent['x'].length, 1);\n      assert.equal(axisComponent['x'][0].explicit.title, 'bar');\n    });\n\n    it('should store both x and x2 for ranged mark', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'rule',\n        encoding: {\n          x: {field: 'a', type: 'quantitative'},\n          x2: {field: 'a2', type: 'quantitative'}\n        }\n      });\n      const axisComponent = parseUnitAxis(model);\n      assert.equal(axisComponent['x'].length, 1);\n      assert.deepEqual(axisComponent['x'][0].get('title'), [{field: 'a'}, {field: 'a2'}]);\n    });\n  });\n\n  describe('parseLayerAxis', () => {\n    const globalRuleOverlay = parseLayerModel({\n      layer: [\n        {\n          mark: 'rule',\n          encoding: {\n            y: {\n              aggregate: 'mean',\n              field: 'a',\n              type: 'quantitative'\n            }\n          }\n        },\n        {\n          mark: 'line',\n          encoding: {\n            y: {\n              aggregate: 'mean',\n              field: 'a',\n              type: 'quantitative'\n            },\n            x: {\n              timeUnit: 'month',\n              type: 'temporal',\n              field: 'date'\n            }\n          }\n        }\n      ]\n    });\n    globalRuleOverlay.parseScale();\n    globalRuleOverlay.parseLayoutSize();\n    parseLayerAxis(globalRuleOverlay);\n\n    it('correctly merges gridScale if one layer does not have one of the axis', () => {\n      const axisComponents = globalRuleOverlay.component.axes;\n      assert.equal(axisComponents.y.length, 1);\n      assert.equal(axisComponents.y[0].get('gridScale'), 'x');\n    });\n\n    it('correctly merges similar title', () => {\n      const axisComponents = globalRuleOverlay.component.axes;\n      assert.deepEqual(axisComponents.y[0].get('title'), [{aggregate: 'mean', field: 'a'}]);\n    });\n\n    it('correctly combines different title', () => {\n      const model = parseLayerModel({\n        $schema: 'https://vega.github.io/schema/vega-lite/v2.json',\n        data: {url: 'data/cars.json'},\n        layer: [\n          {\n            mark: 'line',\n            encoding: {\n              x: {field: 'Cylinders', type: 'ordinal'},\n              y: {\n                aggregate: 'max',\n                field: 'Horsepower',\n                type: 'quantitative'\n              },\n              color: {value: 'darkred'}\n            }\n          },\n          {\n            data: {url: 'data/cars.json'},\n            mark: 'line',\n            encoding: {\n              x: {field: 'Cylinders', type: 'ordinal'},\n              y: {\n                aggregate: 'min',\n                field: 'Horsepower',\n                type: 'quantitative'\n              }\n            }\n          }\n        ]\n      });\n      model.parseScale();\n      parseLayerAxis(model);\n      const axisComponents = model.component.axes;\n\n      assert.deepEqual(axisComponents.y[0].get('title'), [\n        {aggregate: 'max', field: 'Horsepower'},\n        {aggregate: 'min', field: 'Horsepower'}\n      ]);\n    });\n  });\n});\n"]}