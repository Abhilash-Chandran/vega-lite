{"version":3,"file":"errorband.test.js","sourceRoot":"","sources":["../../../test/compositemark/errorband.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport * as log from '../../src/log';\nimport {isMarkDef} from '../../src/mark';\nimport {normalize} from '../../src/normalize/index';\nimport {isLayerSpec, isUnitSpec} from '../../src/spec';\nimport {every, some} from '../../src/util';\nimport {defaultConfig} from '.././../src/config';\n\ndescribe('normalizeErrorBand', () => {\n  it('should produce correct layered specs for mean point and vertical error band', () => {\n    expect(\n      normalize(\n        {\n          data: {url: 'data/population.json'},\n          mark: 'errorband',\n          encoding: {x: {field: 'age', type: 'ordinal'}, y: {field: 'people', type: 'quantitative'}}\n        },\n        defaultConfig\n      )\n    ).toEqual({\n      data: {\n        url: 'data/population.json'\n      },\n      transform: [\n        {\n          aggregate: [\n            {\n              op: 'stderr',\n              field: 'people',\n              as: 'extent_people'\n            },\n            {\n              op: 'mean',\n              field: 'people',\n              as: 'center_people'\n            }\n          ],\n          groupby: ['age']\n        },\n        {\n          calculate: 'datum.center_people + datum.extent_people',\n          as: 'upper_people'\n        },\n        {\n          calculate: 'datum.center_people - datum.extent_people',\n          as: 'lower_people'\n        }\n      ],\n      layer: [\n        {\n          mark: {\n            opacity: 0.3,\n            type: 'area',\n            style: 'errorband-band'\n          },\n          encoding: {\n            y: {\n              field: 'lower_people',\n              type: 'quantitative',\n              title: 'people'\n            },\n            y2: {\n              field: 'upper_people',\n              type: 'quantitative'\n            },\n            x: {\n              field: 'age',\n              type: 'ordinal'\n            },\n            tooltip: [\n              {field: 'center_people', title: 'Mean of people', type: 'quantitative'},\n              {field: 'upper_people', title: 'Mean + stderr of people', type: 'quantitative'},\n              {field: 'lower_people', title: 'Mean - stderr of people', type: 'quantitative'},\n              {field: 'age', type: 'ordinal'}\n            ]\n          }\n        }\n      ]\n    });\n  });\n\n  it('should produce correct layered specs with rect + rule, instead of area + line, in 1D error band', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {type: 'errorband', borders: true},\n        encoding: {y: {field: 'people', type: 'quantitative'}}\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    if (layer) {\n      expect(\n        some(layer, unitSpec => {\n          return isUnitSpec(unitSpec) && isMarkDef(unitSpec.mark) && unitSpec.mark.type === 'rect';\n        })\n      ).toBe(true);\n      expect(\n        some(layer, unitSpec => {\n          return isUnitSpec(unitSpec) && isMarkDef(unitSpec.mark) && unitSpec.mark.type === 'rule';\n        })\n      ).toBe(true);\n    } else {\n      expect(false).toBe(true);\n    }\n  });\n\n  it('should produce correct layered specs with area + line, in 2D error band', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {type: 'errorband', borders: true},\n        encoding: {\n          y: {field: 'people', type: 'quantitative'},\n          x: {field: 'age', type: 'ordinal'}\n        }\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    if (layer) {\n      expect(\n        some(layer, unitSpec => {\n          return isUnitSpec(unitSpec) && isMarkDef(unitSpec.mark) && unitSpec.mark.type === 'area';\n        })\n      ).toBe(true);\n      expect(\n        some(layer, unitSpec => {\n          return isUnitSpec(unitSpec) && isMarkDef(unitSpec.mark) && unitSpec.mark.type === 'line';\n        })\n      ).toBe(true);\n    } else {\n      expect(false).toBe(true);\n    }\n  });\n\n  it('should produce correct layered specs with interpolation in 2D error band', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {type: 'errorband', interpolate: 'monotone'},\n        encoding: {\n          y: {field: 'people', type: 'quantitative'},\n          x: {field: 'age', type: 'ordinal'}\n        }\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    if (layer) {\n      expect(\n        every(layer, unitSpec => {\n          return isUnitSpec(unitSpec) && isMarkDef(unitSpec.mark) && unitSpec.mark.interpolate === 'monotone';\n        })\n      ).toBe(true);\n    } else {\n      expect(false).toBe(true);\n    }\n  });\n\n  it('should produce correct layered specs with out interpolation in 1D error band', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {type: 'errorband', interpolate: 'bundle', tension: 1},\n        encoding: {\n          y: {field: 'people', type: 'quantitative'}\n        }\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    if (layer) {\n      expect(\n        every(layer, unitSpec => {\n          return isUnitSpec(unitSpec) && isMarkDef(unitSpec.mark) && !unitSpec.mark.interpolate;\n        })\n      ).toBe(true);\n    } else {\n      expect(false).toBe(true);\n    }\n  });\n\n  it(\n    'should produce a warning 1D error band has interpolate property',\n    log.wrap(localLogger => {\n      normalize(\n        {\n          data: {url: 'data/population.json'},\n          mark: {type: 'errorband', interpolate: 'monotone'},\n          encoding: {\n            y: {field: 'people', type: 'quantitative'}\n          }\n        },\n        defaultConfig\n      );\n\n      expect(localLogger.warns[0]).toEqual(log.message.errorBand1DNotSupport('interpolate'));\n    })\n  );\n\n  it(\n    'should produce a warning 1D error band has tension property',\n    log.wrap(localLogger => {\n      normalize(\n        {\n          data: {url: 'data/population.json'},\n          mark: {type: 'errorband', tension: 1},\n          encoding: {\n            y: {field: 'people', type: 'quantitative'}\n          }\n        },\n        defaultConfig\n      );\n\n      expect(localLogger.warns[0]).toEqual(log.message.errorBand1DNotSupport('tension'));\n    })\n  );\n});\n"]}