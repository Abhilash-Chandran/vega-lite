{"version":3,"file":"transformextract.test.js","sourceRoot":"","sources":["../../test/transformextract.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport * as fs from 'fs';\nimport {compile} from '../src/compile/compile';\nimport {normalize, NormalizedSpec, TopLevelSpec} from '../src/spec';\nimport {extractTransforms} from '../src/transformextract';\nimport {initConfig} from './../src/config';\n\ndescribe('extractTransforms()', () => {\n  const specsDir = './examples/specs/';\n  // List of specs which don't compile to same Vega when their transforms are extracted due to\n  // various bugs.\n  const failsList = new Set([\n    'area_temperature_range.vl.json',\n    'bar_aggregate_count.vl.json',\n    'bar_aggregate_sort_by_encoding.vl.json',\n    'bar_aggregate_sort_mean.vl.json',\n    'bar_binned_data.vl.json',\n    'bar_month.vl.json',\n    'bar_month_temporal.vl.json',\n    'bar_sort_by_count.vl.json',\n    'circle_binned.vl.json',\n    'circle_binned_maxbins_2.vl.json',\n    'circle_binned_maxbins_5.vl.json',\n    'circle_binned_maxbins_10.vl.json',\n    'circle_binned_maxbins_20.vl.json',\n    'circle_github_punchcard.vl.json',\n    'concat_bar_layer_circle.vl.json',\n    'concat_marginal_histograms.vl.json',\n    'errorbar_aggregate.vl.json',\n    'errorbar_horizontal_aggregate.vl.json',\n    'facet_independent_scale_layer_broken.vl.json',\n    'hconcat_weather.vl.json',\n    'histogram.vl.json',\n    'histogram_bin_change.vl.json',\n    'histogram_bin_transform.vl.json',\n    'histogram_no_spacing.vl.json',\n    'histogram_ordinal.vl.json',\n    'histogram_ordinal_sort.vl.json',\n    'histogram_sort_mean.vl.json',\n    'interactive_concat_layer.vl.json',\n    'interactive_layered_crossfilter.vl.json',\n    'interactive_layered_crossfilter_discrete.vl.json',\n    'interactive_seattle_weather.vl.json',\n    'layer_bar_dual_axis.vl.json',\n    'layer_bar_dual_axis_minmax.vl.json',\n    'layer_bar_month.vl.json',\n    'layer_circle_independent_color.vl.json',\n    'layer_falkensee.vl.json',\n    'layer_histogram.vl.json',\n    'layer_histogram_global_mean.vl.json',\n    'layer_line_color_rule.vl.json',\n    'layer_line_errorband_2d_horizontal_borders_strokedash.vl.json',\n    'layer_line_errorband_ci.vl.json',\n    'layer_line_errorband_pre_aggregated.vl.json',\n    'layer_overlay.vl.json',\n    'layer_point_errorbar_1d_horizontal.vl.json',\n    'layer_point_errorbar_1d_vertical.vl.json',\n    'layer_point_errorbar_2d_horizontal.vl.json',\n    'layer_point_errorbar_2d_horizontal_ci.vl.json',\n    'layer_point_errorbar_2d_horizontal_color_encoding.vl.json',\n    'layer_point_errorbar_2d_horizontal_custom_ticks.vl.json',\n    'layer_point_errorbar_2d_horizontal_iqr.vl.json',\n    'layer_point_errorbar_2d_horizontal_stdev.vl.json',\n    'layer_point_errorbar_2d_vertical.vl.json',\n    'layer_point_errorbar_ci.vl.json',\n    'layer_point_errorbar_stdev.vl.json',\n    'layer_precipitation_mean.vl.json',\n    'layer_rect_extent.vl.json',\n    'layer_scatter_errorband_1D_stdev_global_mean.vl.json',\n    'line_calculate.vl.json',\n    'line_color_binned.vl.json',\n    'line_max_year.vl.json',\n    'line_mean_month.vl.json',\n    'line_month.vl.json',\n    'line_quarter_legend.vl.json',\n    'line_timeunit_transform.vl.json',\n    'point_2d_aggregate.vl.json',\n    'point_binned_color.vl.json',\n    'point_binned_opacity.vl.json',\n    'point_binned_size.vl.json',\n    'point_dot_timeunit_color.vl.json',\n    'point_aggregate_detail.vl.json',\n    'rect_binned_heatmap.vl.json',\n    'rect_heatmap_weather.vl.json',\n    'rect_lasagna_future.vl.json',\n    'repeat_histogram.vl.json',\n    'repeat_histogram_flights.vl.json',\n    'repeat_layer.vl.json',\n    'repeat_line_weather.vl.json',\n    'rule_extent.vl.json',\n    'selection_brush_timeunit.vl.json',\n    'selection_layer_bar_month.vl.json',\n    'selection_project_binned_interval.vl.json',\n    'stacked_bar_count.vl.json',\n    'stacked_bar_size.vl.json',\n    'stacked_bar_weather.vl.json',\n    'test_aggregate_nested.vl.json',\n    'time_parse_local.vl.json',\n    'time_parse_utc_format.vl.json',\n    'trellis_bar_histogram.vl.json',\n    'trellis_bar_histogram_label_rotated.vl.json',\n    'trellis_barley.vl.json',\n    'trellis_barley_layer_median.vl.json',\n    'trellis_column_year.vl.json',\n    'trellis_cross_sort.vl.json',\n    'trellis_cross_sort_array.vl.json',\n    'trellis_line_quarter.vl.json',\n    'vconcat_weather.vl.json',\n    'window_mean_difference.vl.json'\n  ]);\n  for (const file of fs.readdirSync(specsDir)) {\n    const filepath = specsDir + file;\n    if (filepath.slice(-5) === '.json') {\n      it(`should${failsList.has(file) ? ' NOT ' : ' '}compile ${filepath} to the same spec`, () => {\n        const specString = fs.readFileSync(filepath, 'utf8');\n\n        const spec = JSON.parse(specString);\n        const config = initConfig(spec.config);\n        const extractSpec = extractTransforms(normalize(spec, config), config) as TopLevelSpec;\n\n        const originalCompiled = compile(spec);\n        const transformCompiled = compile(extractSpec);\n\n        if (failsList.has(file)) {\n          expect(transformCompiled).not.toEqual(originalCompiled);\n        } else {\n          expect(transformCompiled).toEqual(originalCompiled);\n        }\n      });\n    }\n  }\n\n  describe('extractTransformsSingle()', () => {\n    it('should extract transforms from faceted spec', () => {\n      const spec: NormalizedSpec = {\n        name: 'faceted',\n        description: 'faceted spec',\n        data: {url: 'data/movies.json'},\n        facet: {\n          column: {field: 'MPAA_Rating', type: 'ordinal'}\n        },\n        spec: {\n          mark: 'point',\n          width: 123,\n          height: 234,\n          encoding: {\n            x: {field: 'Worldwide_Gross', type: 'quantitative'},\n            y: {type: 'quantitative', aggregate: 'count'}\n          }\n        }\n      };\n      const config = initConfig({});\n      const output = extractTransforms(spec, config);\n      expect(output).toEqual({\n        name: 'faceted',\n        description: 'faceted spec',\n        data: {url: 'data/movies.json'},\n        facet: {\n          column: {field: 'MPAA_Rating', type: 'ordinal'}\n        },\n        spec: {\n          transform: [\n            {\n              aggregate: [{op: 'count', as: 'count_*'}],\n              groupby: ['Worldwide_Gross']\n            }\n          ],\n          mark: 'point',\n          width: 123,\n          height: 234,\n          encoding: {\n            x: {field: 'Worldwide_Gross', type: 'quantitative'},\n            y: {field: 'count_*', type: 'quantitative', title: 'Count of Records'}\n          }\n        }\n      });\n    });\n  });\n  describe('extractTransformsLayered()', () => {\n    it('should extract transforms from a layered spec', () => {\n      const spec: NormalizedSpec = {\n        data: {url: 'data/seattle-weather.csv'},\n        layer: [\n          {\n            mark: 'bar',\n            encoding: {\n              x: {\n                timeUnit: 'month',\n                field: 'date',\n                type: 'ordinal'\n              },\n              y: {\n                aggregate: 'mean',\n                field: 'precipitation',\n                type: 'quantitative',\n                axis: {\n                  grid: false\n                }\n              }\n            }\n          },\n          {\n            mark: 'line',\n            encoding: {\n              x: {\n                timeUnit: 'month',\n                field: 'date',\n                type: 'ordinal'\n              },\n              y: {\n                aggregate: 'mean',\n                field: 'temp_max',\n                type: 'quantitative',\n                axis: {\n                  grid: false\n                },\n                scale: {zero: false}\n              },\n              color: {value: 'firebrick'}\n            }\n          }\n        ],\n        resolve: {scale: {y: 'independent'}}\n      };\n      const config = initConfig({});\n      const output = extractTransforms(normalize(spec, config), config);\n      expect(output).toEqual(\n        normalize(\n          {\n            data: {url: 'data/seattle-weather.csv'},\n            layer: [\n              {\n                transform: [\n                  {timeUnit: 'month', field: 'date', as: 'month_date'},\n                  {\n                    aggregate: [{op: 'mean', field: 'precipitation', as: 'mean_precipitation'}],\n                    groupby: ['month_date']\n                  }\n                ],\n                mark: 'bar',\n                encoding: {\n                  x: {\n                    field: 'month_date',\n                    type: 'ordinal',\n                    title: 'date (month)',\n                    axis: {format: '%b'}\n                  },\n                  y: {\n                    field: 'mean_precipitation',\n                    type: 'quantitative',\n                    title: 'Mean of precipitation',\n                    axis: {\n                      grid: false\n                    }\n                  }\n                }\n              },\n              {\n                mark: 'line',\n                transform: [\n                  {timeUnit: 'month', field: 'date', as: 'month_date'},\n                  {\n                    aggregate: [{op: 'mean', field: 'temp_max', as: 'mean_temp_max'}],\n                    groupby: ['month_date']\n                  }\n                ],\n                encoding: {\n                  x: {\n                    field: 'month_date',\n                    type: 'ordinal',\n                    title: 'date (month)',\n                    axis: {format: '%b'}\n                  },\n                  y: {\n                    field: 'mean_temp_max',\n                    type: 'quantitative',\n                    title: 'Mean of temp_max',\n                    axis: {\n                      grid: false\n                    },\n                    scale: {zero: false}\n                  },\n                  color: {value: 'firebrick'}\n                }\n              }\n            ],\n            resolve: {scale: {y: 'independent'}}\n          },\n          config\n        )\n      );\n    });\n  });\n});\n"]}