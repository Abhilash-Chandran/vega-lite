{"version":3,"file":"spec.test.js","sourceRoot":"","sources":["../../test/spec.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport {assert} from 'chai';\nimport {Field, FieldDef} from '../src/fielddef';\nimport {fieldDefs} from '../src/spec';\n\ndescribe('fieldDefs()', () => {\n  it('should get all non-duplicate fieldDefs from an encoding', () => {\n    const spec: any = {\n      data: {url: 'data/cars.json'},\n      mark: 'point',\n      encoding: {\n        x: {field: 'Horsepower', type: 'quantitative'},\n        y: {field: 'Miles_per_Gallon', type: 'quantitative'}\n      }\n    };\n\n    assert.sameDeepMembers<FieldDef<Field>>(fieldDefs(spec), [\n      {field: 'Horsepower', type: 'quantitative'},\n      {field: 'Miles_per_Gallon', type: 'quantitative'}\n    ]);\n  });\n\n  it('should get all non-duplicate fieldDefs from all layer in a LayerSpec', () => {\n    const layerSpec: any = {\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      layer: [\n        {\n          description: \"Google's stock price over time.\",\n          mark: 'line',\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        },\n        {\n          description: \"Google's stock price over time.\",\n          mark: 'point',\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'},\n            color: {field: 'symbol', type: 'nominal'}\n          },\n          config: {mark: {filled: true}}\n        }\n      ]\n    };\n\n    assert.sameDeepMembers<FieldDef<Field>>(fieldDefs(layerSpec), [\n      {field: 'date', type: 'temporal'},\n      {field: 'price', type: 'quantitative'},\n      {field: 'symbol', type: 'nominal'}\n    ]);\n  });\n\n  it('should get all non-duplicate fieldDefs from all layer in a LayerSpec (merging duplicate fields with different scale types)', () => {\n    const layerSpec: any = {\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      layer: [\n        {\n          description: \"Google's stock price over time.\",\n          mark: 'line',\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        },\n        {\n          description: \"Google's stock price over time.\",\n          mark: 'point',\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'},\n            color: {field: 'date', type: 'temporal', scale: {type: 'pow'}}\n          },\n          config: {mark: {filled: true}}\n        }\n      ]\n    };\n\n    assert.sameDeepMembers<FieldDef<Field>>(fieldDefs(layerSpec), [\n      {field: 'date', type: 'temporal'},\n      {field: 'price', type: 'quantitative'}\n    ]);\n  });\n\n  it('should get all non-duplicate fieldDefs from facet and layer in a FacetSpec', () => {\n    const facetSpec: any = {\n      data: {url: 'data/movies.json'},\n      facet: {row: {field: 'MPAA_Rating', type: 'ordinal'}},\n      spec: {\n        mark: 'point',\n        encoding: {\n          x: {field: 'Worldwide_Gross', type: 'quantitative'},\n          y: {field: 'US_DVD_Sales', type: 'quantitative'}\n        }\n      }\n    };\n\n    assert.sameDeepMembers<FieldDef<Field>>(fieldDefs(facetSpec), [\n      {field: 'MPAA_Rating', type: 'ordinal'},\n      {field: 'Worldwide_Gross', type: 'quantitative'},\n      {field: 'US_DVD_Sales', type: 'quantitative'}\n    ]);\n  });\n});\n"]}