{"version":3,"file":"datetime.test.js","sourceRoot":"","sources":["../../test/datetime.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {dateTimeExpr} from '../src/datetime';\nimport * as log from '../src/log';\n\ndescribe('datetime', () => {\n  describe('dateTimeExpr', () => {\n    it(\n      'should drop day if day is combined with year/month/date',\n      log.wrap(localLogger => {\n        const d = {\n          year: 2007,\n          day: 'monday'\n        };\n        const expr = dateTimeExpr(d, true);\n        expect(expr).toEqual('datetime(2007, 0, 1, 0, 0, 0, 0)');\n        expect(localLogger.warns[0]).toEqual(log.message.droppedDay(d));\n      })\n    );\n\n    it('should normalize numeric quarter correctly', () => {\n      const expr = dateTimeExpr(\n        {\n          quarter: 2\n        },\n        true\n      );\n      expect(expr).toEqual('datetime(0, 1*3, 1, 0, 0, 0, 0)');\n    });\n\n    it(\n      'should log warning for quarter > 4',\n      log.wrap(localLogger => {\n        expect(\n          dateTimeExpr(\n            {\n              quarter: 5\n            },\n            true\n          )\n        ).toEqual('datetime(0, 4*3, 1, 0, 0, 0, 0)');\n        expect(localLogger.warns[0]).toEqual(log.message.invalidTimeUnit('quarter', 5));\n      })\n    );\n\n    it('should throw error for invalid quarter', () => {\n      expect(() => {\n        dateTimeExpr({quarter: 'Q'}, true);\n      }).toThrow();\n    });\n\n    it('should normalize numeric month correctly', () => {\n      const expr = dateTimeExpr(\n        {\n          month: 1\n        },\n        true\n      );\n      expect(expr).toEqual('datetime(0, 0, 1, 0, 0, 0, 0)');\n    });\n\n    it('should normalize month name correctly', () => {\n      expect(\n        dateTimeExpr(\n          {\n            month: 'January'\n          },\n          true\n        )\n      ).toEqual('datetime(0, 0, 1, 0, 0, 0, 0)');\n      expect(\n        dateTimeExpr(\n          {\n            month: 'january'\n          },\n          true\n        )\n      ).toEqual('datetime(0, 0, 1, 0, 0, 0, 0)');\n      expect(\n        dateTimeExpr(\n          {\n            month: 'Jan'\n          },\n          true\n        )\n      ).toEqual('datetime(0, 0, 1, 0, 0, 0, 0)');\n      expect(\n        dateTimeExpr(\n          {\n            month: 'jan'\n          },\n          true\n        )\n      ).toEqual('datetime(0, 0, 1, 0, 0, 0, 0)');\n    });\n\n    it('should throw error for invalid month', () => {\n      expect(() => {\n        dateTimeExpr({month: 'J'}, true);\n      }).toThrow();\n    });\n\n    it('should normalize numeric day (of week) correctly', () => {\n      expect(\n        dateTimeExpr(\n          {\n            day: 0\n          },\n          true\n        )\n      ).toEqual('datetime(2006, 0, 0+1, 0, 0, 0, 0)');\n      expect(\n        dateTimeExpr(\n          {\n            day: 7\n          },\n          true\n        )\n      ).toEqual('datetime(2006, 0, 0+1, 0, 0, 0, 0)');\n    });\n\n    it('should normalize day name correctly and use year 2006 to ensure correct', () => {\n      expect(\n        dateTimeExpr(\n          {\n            day: 'Sunday'\n          },\n          true\n        )\n      ).toEqual('datetime(2006, 0, 0+1, 0, 0, 0, 0)');\n      expect(\n        dateTimeExpr(\n          {\n            day: 'sunday'\n          },\n          true\n        )\n      ).toEqual('datetime(2006, 0, 0+1, 0, 0, 0, 0)');\n      expect(\n        dateTimeExpr(\n          {\n            day: 'Sun'\n          },\n          true\n        )\n      ).toEqual('datetime(2006, 0, 0+1, 0, 0, 0, 0)');\n      expect(\n        dateTimeExpr(\n          {\n            day: 'sun'\n          },\n          true\n        )\n      ).toEqual('datetime(2006, 0, 0+1, 0, 0, 0, 0)');\n    });\n\n    it('should throw error for invalid day', () => {\n      expect(() => {\n        dateTimeExpr({day: 'S'}, true);\n      }).toThrow();\n    });\n\n    it('should use utc expression if utc is specified', () => {\n      const d = {\n        year: 2007,\n        day: 'monday',\n        utc: true\n      };\n      const expr = dateTimeExpr(d, true);\n      expect(expr).toEqual('utc(2007, 0, 1, 0, 0, 0, 0)');\n    });\n\n    // Note: Other part of coverage handled by timeUnit.fieldExpr's test\n  });\n});\n"]}