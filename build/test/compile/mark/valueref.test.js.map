{"version":3,"file":"valueref.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/valueref.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAC9B,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,SAAS,EAAE,QAAQ,EAAC,MAAM,oCAAoC,CAAC;AAIvE,QAAQ,CAAC,uBAAuB,EAAE;IAChC,QAAQ,CAAC,WAAW,EAAE;QACpB,IAAM,OAAO,GAAY;YACvB,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,GAAG;SACd,CAAC;QACF,EAAE,CAAC,6DAA6D,EAAE;YAChE,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,oFAAoF,EAAE;YACvF,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,SAAS,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE;QACrB,EAAE,CAAC,uCAAuC,EAAE;YAC1C,IAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,OAAO,EAAC,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YACnG,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,EAAC,KAAK,EAAE,OAAO,EAAC,EAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,wCAAwC,EAAE;YAC3C,IAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YACpG,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC,EAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,6CAA6C,EAAE;YAChD,IAAM,QAAQ,GAAqB,EAAC,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAC,CAAC;YAC7F,IAAM,SAAS,GAAqB,EAAC,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,cAAc,EAAC,CAAC;YAC7E,IAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YACrF,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,EAAC,MAAM,EAAE,yDAAyD,EAAC,CAAC,CAAC;QAC7F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\nimport {assert} from 'chai';\nimport {getOffset, midPoint} from '../../../src/compile/mark/valueref';\nimport {FieldDef} from '../../../src/fielddef';\nimport {MarkDef} from '../../../src/mark';\n\ndescribe('compile/mark/valueref', () => {\n  describe('getOffset', () => {\n    const markDef: MarkDef = {\n      type: 'point',\n      x2Offset: 100\n    };\n    it('should correctly get the offset value for the given channel', () => {\n      assert.equal(getOffset('x2', markDef), 100);\n    });\n    it('should return undefined when the offset value for the given channel is not defined', () => {\n      assert.equal(getOffset('x', markDef), undefined);\n    });\n  });\n\n  describe('midPoint()', () => {\n    it('should return correct value for width', () => {\n      const ref = midPoint('x', {value: 'width'}, undefined, undefined, undefined, undefined, undefined);\n      assert.deepEqual(ref, {field: {group: 'width'}});\n    });\n    it('should return correct value for height', () => {\n      const ref = midPoint('y', {value: 'height'}, undefined, undefined, undefined, undefined, undefined);\n      assert.deepEqual(ref, {field: {group: 'height'}});\n    });\n    it('should return correct value for binned data', () => {\n      const fieldDef: FieldDef<string> = {field: 'bin_start', bin: 'binned', type: 'quantitative'};\n      const fieldDef2: FieldDef<string> = {field: 'bin_end', type: 'quantitative'};\n      const ref = midPoint('x', fieldDef, fieldDef2, 'x', undefined, undefined, undefined);\n      assert.deepEqual(ref, {signal: 'scale(\"x\", (datum[\"bin_start\"] + datum[\"bin_end\"]) / 2)'});\n    });\n  });\n});\n"]}