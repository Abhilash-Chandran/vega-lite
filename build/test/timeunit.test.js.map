{"version":3,"file":"timeunit.test.js","sourceRoot":"","sources":["../../test/timeunit.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {containsTimeUnit, convert, fieldExpr, formatExpression, TimeUnit} from '../src/timeunit';\n\ndescribe('timeUnit', () => {\n  describe('containsTimeUnit', () => {\n    it('should return true for quarter given quarter', () => {\n      const fullTimeUnit = TimeUnit.QUARTER;\n      const timeUnit = TimeUnit.QUARTER;\n      assert.equal(containsTimeUnit(fullTimeUnit, timeUnit), true);\n    });\n\n    it('should return true for yearquarter given quarter', () => {\n      const fullTimeUnit = TimeUnit.YEARQUARTER;\n      const timeUnit = TimeUnit.QUARTER;\n      assert.equal(containsTimeUnit(fullTimeUnit, timeUnit), true);\n    });\n\n    it('should return true for SECONDS and MILLISECONDS given SECONDSMILLISECONDS', () => {\n      const fullTimeUnit = TimeUnit.SECONDSMILLISECONDS;\n      const timeUnit = TimeUnit.SECONDS;\n      assert.equal(containsTimeUnit(fullTimeUnit, timeUnit), true);\n    });\n\n    it('should return true for MILLISECONDS given SECONDSMILLISECONDS', () => {\n      const fullTimeUnit = TimeUnit.SECONDSMILLISECONDS;\n      const timeUnit = TimeUnit.MILLISECONDS;\n      assert.equal(containsTimeUnit(fullTimeUnit, timeUnit), true);\n    });\n\n    it('should return false for quarter given year', () => {\n      const fullTimeUnit = TimeUnit.YEAR;\n      const timeUnit = TimeUnit.QUARTER;\n      assert.equal(containsTimeUnit(fullTimeUnit, timeUnit), false);\n    });\n\n    it('should return false for SECONDS given MILLISECONDS', () => {\n      const fullTimeUnit = TimeUnit.MILLISECONDS;\n      const timeUnit = TimeUnit.SECONDS;\n      assert.equal(containsTimeUnit(fullTimeUnit, timeUnit), false);\n    });\n  });\n\n  describe('fieldExpr', () => {\n    it('should return correct field expression for YEARMONTHDATEHOURSMINUTESSECONDS', () => {\n      assert.equal(\n        fieldExpr(TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS, 'x'),\n        'datetime(year(datum[\"x\"]), month(datum[\"x\"]), date(datum[\"x\"]), hours(datum[\"x\"]), minutes(datum[\"x\"]), seconds(datum[\"x\"]), 0)'\n      );\n    });\n\n    it('should return correct field expression for QUARTER', () => {\n      assert.equal(fieldExpr(TimeUnit.QUARTER, 'x'), 'datetime(0, (quarter(datum[\"x\"])-1)*3, 1, 0, 0, 0, 0)');\n    });\n\n    it('should return correct field expression for DAY', () => {\n      assert.equal(fieldExpr(TimeUnit.DAY, 'x'), 'datetime(2006, 0, day(datum[\"x\"])+1, 0, 0, 0, 0)');\n    });\n\n    it('should return correct field expression for MILLISECONDS', () => {\n      assert.equal(fieldExpr(TimeUnit.MILLISECONDS, 'x'), 'datetime(0, 0, 1, 0, 0, 0, milliseconds(datum[\"x\"]))');\n    });\n\n    it('should return correct field expression with utc for MILLISECONDS', () => {\n      assert.equal(fieldExpr(TimeUnit.UTCQUARTER, 'x'), 'datetime(0, (utcquarter(datum[\"x\"])-1)*3, 1, 0, 0, 0, 0)');\n\n      assert.equal(fieldExpr(TimeUnit.UTCMILLISECONDS, 'x'), 'datetime(0, 0, 1, 0, 0, 0, utcmilliseconds(datum[\"x\"]))');\n    });\n  });\n\n  describe('convert', () => {\n    it('should throw an error for the DAY timeunit', () => {\n      assert.throws(\n        () => {\n          convert(TimeUnit.DAY, new Date(2000, 11, 2, 23, 59, 59, 999));\n        },\n        Error,\n        \"Cannot convert to TimeUnits containing 'day'\"\n      );\n    });\n\n    it('should return expected result for YEARQUARTER', () => {\n      const date: Date = convert(TimeUnit.YEARQUARTER, new Date(2000, 11, 2, 23, 59, 59, 999));\n      assert.equal(date.getTime(), new Date(2000, 9, 1, 0, 0, 0, 0).getTime());\n    });\n\n    it('should return expected result for UTCYEARQUARTER', () => {\n      const date: Date = convert(TimeUnit.UTCYEARQUARTER, new Date(Date.UTC(2000, 11, 2, 23, 59, 59, 999)));\n      assert.equal(date.getTime(), new Date(Date.UTC(2000, 9, 1, 0, 0, 0, 0)).getTime());\n    });\n\n    it('should return expected result for YEARQUARTERMONTH', () => {\n      const date: Date = convert(TimeUnit.YEARQUARTERMONTH, new Date(2000, 11, 2, 23, 59, 59, 999));\n      assert.equal(date.getTime(), new Date(2000, 11, 1, 0, 0, 0, 0).getTime());\n    });\n\n    it('should return expected result for YEARMONTH', () => {\n      const date: Date = convert(TimeUnit.YEARMONTH, new Date(2000, 11, 2, 23, 59, 59, 999));\n      assert.equal(date.getTime(), new Date(2000, 11, 1, 0, 0, 0, 0).getTime());\n    });\n\n    it('should return expected result for UTCYEARMONTH', () => {\n      const date: Date = convert(TimeUnit.UTCYEARMONTH, new Date(Date.UTC(2000, 11, 2, 23, 59, 59, 999)));\n      assert.equal(date.getTime(), new Date(Date.UTC(2000, 11, 1, 0, 0, 0, 0)).getTime());\n    });\n\n    it('should return expected result for UTCYEARMONTH', () => {\n      const date: Date = convert(TimeUnit.UTCYEAR, new Date(Date.UTC(2000, 11, 2, 23, 59, 59, 999)));\n      assert.equal(date.getTime(), new Date(Date.UTC(2000, 0, 1, 0, 0, 0, 0)).getTime());\n    });\n\n    it('should return expected result for YEARMONTHDATE', () => {\n      const date: Date = convert(TimeUnit.YEARMONTHDATE, new Date(2000, 11, 2, 23, 59, 59, 999));\n      assert.equal(date.getTime(), new Date(2000, 11, 2, 0, 0, 0, 0).getTime());\n    });\n\n    it('should return expected result for YEARMONTHDATEHOURS', () => {\n      const date: Date = convert(TimeUnit.YEARMONTHDATEHOURS, new Date(2000, 11, 2, 23, 59, 59, 999));\n      assert.equal(date.getTime(), new Date(2000, 11, 2, 23, 0, 0, 0).getTime());\n    });\n\n    it('should return expected result for YEARMONTHDATEHOURSMINUTES', () => {\n      const date: Date = convert(TimeUnit.YEARMONTHDATEHOURSMINUTES, new Date(2000, 11, 2, 23, 59, 59, 999));\n      assert.equal(date.getTime(), new Date(2000, 11, 2, 23, 59, 0, 0).getTime());\n    });\n\n    it('should return expected result for YEARMONTHDATEHOURSMINUTESSECONDS', () => {\n      const date: Date = convert(TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS, new Date(2000, 11, 2, 23, 59, 59, 999));\n      assert.equal(date.getTime(), new Date(2000, 11, 2, 23, 59, 59, 0).getTime());\n    });\n\n    it('should return expected result for QUARTERMONTH', () => {\n      const date: Date = convert(TimeUnit.QUARTERMONTH, new Date(2000, 11, 2, 23, 59, 59, 999));\n      assert.equal(date.getTime(), new Date(1900, 11, 1, 0, 0, 0, 0).getTime());\n    });\n\n    it('should return expected result for HOURSMINUTES', () => {\n      const date: Date = convert(TimeUnit.HOURSMINUTES, new Date(2000, 11, 2, 23, 59, 59, 999));\n      assert.equal(date.getTime(), new Date(1900, 0, 1, 23, 59, 0, 0).getTime());\n    });\n\n    it('should return expected result for HOURSMINUTESSECONDS', () => {\n      const date: Date = convert(TimeUnit.HOURSMINUTESSECONDS, new Date(2000, 11, 2, 23, 59, 59, 999));\n      assert.equal(date.getTime(), new Date(1900, 0, 1, 23, 59, 59, 0).getTime());\n    });\n\n    it('should return expected result for MINUTESSECONDS', () => {\n      const date: Date = convert(TimeUnit.MINUTESSECONDS, new Date(2000, 11, 2, 23, 59, 59, 999));\n      assert.equal(date.getTime(), new Date(1900, 0, 1, 0, 59, 59, 0).getTime());\n    });\n\n    it('should return expected result for SECONDSMILLISECONDS', () => {\n      const date: Date = convert(TimeUnit.SECONDSMILLISECONDS, new Date(2000, 11, 2, 23, 59, 59, 999));\n      assert.equal(date.getTime(), new Date(1900, 0, 1, 0, 0, 59, 999).getTime());\n    });\n  });\n\n  describe('template', () => {\n    it('should return correct template for YEARMONTHDATEHOURSMINUTESSECONDS', () => {\n      assert.equal(\n        formatExpression(TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS, 'datum.x', undefined, false),\n        \"timeFormat(datum.x, '%b %d, %Y %H:%M:%S')\"\n      );\n    });\n\n    it('should return correct template for YEARMONTH (No comma)', () => {\n      assert.equal(formatExpression(TimeUnit.YEARMONTH, 'datum.x', undefined, false), \"timeFormat(datum.x, '%b %Y')\");\n    });\n\n    it('should return correct template for DAY', () => {\n      assert.equal(formatExpression(TimeUnit.DAY, 'datum.x', undefined, false), \"timeFormat(datum.x, '%A')\");\n    });\n\n    it('should return correct template for DAY (shortened)', () => {\n      assert.equal(formatExpression(TimeUnit.DAY, 'datum.x', true, false), \"timeFormat(datum.x, '%a')\");\n    });\n\n    it('should return correct template for QUARTER', () => {\n      assert.equal(formatExpression(TimeUnit.QUARTER, 'datum.x', undefined, false), \"'Q' + quarter(datum.x)\");\n    });\n\n    it('should return correct template for YEARQUARTER', () => {\n      assert.equal(\n        formatExpression(TimeUnit.YEARQUARTER, 'datum.x', undefined, false),\n        \"'Q' + quarter(datum.x) + ' ' + timeFormat(datum.x, '%Y')\"\n      );\n    });\n\n    it('should return correct template for milliseconds', () => {\n      assert.equal(formatExpression(TimeUnit.MILLISECONDS, 'datum.x', undefined, false), \"timeFormat(datum.x, '%L')\");\n    });\n\n    it('should return correct template for no timeUnit', () => {\n      assert.equal(formatExpression(undefined, 'datum.x', undefined, false), undefined);\n    });\n\n    it('should return correct template for YEARMONTH (No comma) with utc scale', () => {\n      assert.equal(formatExpression(TimeUnit.YEARMONTH, 'datum.x', undefined, true), \"utcFormat(datum.x, '%b %Y')\");\n    });\n  });\n});\n"]}