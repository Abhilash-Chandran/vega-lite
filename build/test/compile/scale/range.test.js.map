{"version":3,"file":"range.test.js","sourceRoot":"","sources":["../../../../test/compile/scale/range.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\n\nimport {\n  defaultContinuousToDiscreteCount,\n  interpolateRange,\n  parseRangeForChannel\n} from '../../../src/compile/scale/range';\nimport {makeExplicit, makeImplicit} from '../../../src/compile/split';\nimport {Config, defaultConfig} from '../../../src/config';\nimport * as log from '../../../src/log';\nimport {Mark} from '../../../src/mark';\nimport {CONTINUOUS_TO_CONTINUOUS_SCALES, DISCRETE_DOMAIN_SCALES, ScaleType} from '../../../src/scale';\nimport {NOMINAL, ORDINAL, QUANTITATIVE} from '../../../src/type';\n\ndescribe('compile/scale', () => {\n  describe('parseRange()', () => {\n    describe('position', () => {\n      it('should return [0, plot_width] for x-continuous scales by default.', () => {\n        for (const scaleType of CONTINUOUS_TO_CONTINUOUS_SCALES) {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'x',\n              scaleType,\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              true,\n              'point',\n              false,\n              'plot_width',\n              []\n            ),\n            makeImplicit([0, {signal: 'plot_width'}])\n          );\n        }\n      });\n\n      it('should return [plot_height,0] for y-continuous scales by default.', () => {\n        for (const scaleType of CONTINUOUS_TO_CONTINUOUS_SCALES) {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'y',\n              scaleType,\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              true,\n              'point',\n              false,\n              'plot_height',\n              []\n            ),\n            makeImplicit([{signal: 'plot_height'}, 0])\n          );\n        }\n      });\n\n      it('should return [0, plot_height] for y-discrete scales with height by default.', () => {\n        for (const scaleType of DISCRETE_DOMAIN_SCALES) {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'y',\n              scaleType,\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              true,\n              'point',\n              true,\n              'plot_height',\n              []\n            ),\n            makeImplicit([0, {signal: 'plot_height'}])\n          );\n        }\n      });\n\n      it(\n        'should support custom range.',\n        log.wrap(localLogger => {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'x',\n              'linear',\n              QUANTITATIVE,\n              {range: [0, 100]},\n              defaultConfig,\n              true,\n              'point',\n              false,\n              'plot_width',\n              []\n            ),\n            makeExplicit([0, 100])\n          );\n          assert.deepEqual(localLogger.warns.length, 0);\n        })\n      );\n\n      it('should return config.scale.rangeStep for band/point scales by default.', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'x',\n              scaleType,\n              NOMINAL,\n              {},\n              defaultConfig,\n              undefined,\n              'point',\n              false,\n              'plot_width',\n              []\n            ),\n            makeImplicit({step: 21})\n          );\n        }\n      });\n\n      it(\"should return config.scale.textXRangeStep by default for text mark's x band/point scales.\", () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'x',\n              scaleType,\n              NOMINAL,\n              {},\n              {scale: {textXRangeStep: 55}},\n              undefined,\n              'text',\n              false,\n              'plot_width',\n              []\n            ),\n            makeImplicit({step: 55})\n          );\n        }\n      });\n\n      it('should return specified rangeStep if topLevelSize is undefined for band/point scales', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'x',\n              scaleType,\n              NOMINAL,\n              {rangeStep: 23},\n              defaultConfig,\n              undefined,\n              'text',\n              false,\n              'plot_width',\n              []\n            ),\n            makeExplicit({step: 23})\n          );\n        }\n      });\n\n      it(\n        'should drop rangeStep if topLevelSize is specified for band/point scales',\n        log.wrap(localLogger => {\n          for (const scaleType of ['point', 'band'] as ScaleType[]) {\n            assert.deepEqual(\n              parseRangeForChannel(\n                'x',\n                scaleType,\n                NOMINAL,\n                {rangeStep: 23},\n                defaultConfig,\n                undefined,\n                'text',\n                true,\n                'plot_width',\n                []\n              ),\n              makeImplicit([0, {signal: 'plot_width'}])\n            );\n          }\n          assert.equal(localLogger.warns[0], log.message.rangeStepDropped('x'));\n        })\n      );\n\n      it('should return default topLevelSize if rangeStep is null for band/point scales', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'x',\n              scaleType,\n              NOMINAL,\n              {rangeStep: null},\n              defaultConfig,\n              undefined,\n              'text',\n              false,\n              'plot_width',\n              []\n            ),\n            makeImplicit([0, {signal: 'plot_width'}])\n          );\n        }\n      });\n\n      it('should return default topLevelSize if rangeStep config is null', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'x',\n              scaleType,\n              NOMINAL,\n              {},\n              {view: {width: 200}, scale: {rangeStep: null}},\n              undefined,\n              'point',\n              false,\n              'plot_width',\n              []\n            ),\n            makeImplicit([0, {signal: 'plot_width'}])\n          );\n        }\n      });\n\n      it('should return default topLevelSize for text if textXRangeStep config is null', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'x',\n              scaleType,\n              NOMINAL,\n              {},\n              {view: {width: 200}, scale: {textXRangeStep: null}},\n              undefined,\n              'text',\n              false,\n              'plot_width',\n              []\n            ),\n            makeImplicit([0, {signal: 'plot_width'}])\n          );\n        }\n      });\n\n      it('should drop rangeStep for continuous scales', () => {\n        for (const scaleType of CONTINUOUS_TO_CONTINUOUS_SCALES) {\n          log.wrap(localLogger => {\n            assert.deepEqual(\n              parseRangeForChannel(\n                'x',\n                scaleType,\n                QUANTITATIVE,\n                {rangeStep: 23},\n                defaultConfig,\n                undefined,\n                'text',\n                true,\n                'plot_width',\n                []\n              ),\n              makeImplicit([0, {signal: 'plot_width'}])\n            );\n            assert.equal(\n              localLogger.warns[0],\n              log.message.scalePropertyNotWorkWithScaleType(scaleType, 'rangeStep', 'x')\n            );\n          })();\n        }\n      });\n    });\n\n    describe('color', () => {\n      it('should use the specified scheme for a nominal color field.', () => {\n        assert.deepEqual(\n          parseRangeForChannel(\n            'color',\n            'ordinal',\n            NOMINAL,\n            {scheme: 'warm'},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          ),\n          makeExplicit({scheme: 'warm'})\n        );\n      });\n\n      it('should use the specified scheme with extent for a nominal color field.', () => {\n        assert.deepEqual(\n          parseRangeForChannel(\n            'color',\n            'ordinal',\n            NOMINAL,\n            {scheme: {name: 'warm', extent: [0.2, 1]}},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          ),\n          makeExplicit({scheme: 'warm', extent: [0.2, 1]})\n        );\n      });\n\n      it('should use the specified range for a nominal color field.', () => {\n        assert.deepEqual(\n          parseRangeForChannel(\n            'color',\n            'ordinal',\n            NOMINAL,\n            {range: ['red', 'green', 'blue']},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          ),\n          makeExplicit(['red', 'green', 'blue'])\n        );\n      });\n\n      it('should use default category range in Vega for a nominal color field.', () => {\n        assert.deepEqual(\n          parseRangeForChannel(\n            'color',\n            'ordinal',\n            NOMINAL,\n            {},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          ),\n          makeImplicit('category')\n        );\n      });\n\n      it('should use default ordinal range in Vega for an ordinal color field.', () => {\n        assert.deepEqual(\n          parseRangeForChannel(\n            'color',\n            'ordinal',\n            ORDINAL,\n            {},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          ),\n          makeImplicit('ordinal')\n        );\n      });\n\n      it('should use default ramp range in Vega for a temporal/quantitative color field.', () => {\n        assert.deepEqual(\n          parseRangeForChannel(\n            'color',\n            'sequential',\n            QUANTITATIVE,\n            {},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          ),\n          makeImplicit('ramp')\n        );\n      });\n\n      it('should use the specified scheme with count for a quantitative color field.', () => {\n        assert.deepEqual(\n          parseRangeForChannel(\n            'color',\n            'ordinal',\n            QUANTITATIVE,\n            {scheme: {name: 'viridis', count: 3}},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          ),\n          makeExplicit({scheme: 'viridis', count: 3})\n        );\n      });\n\n      it('should use default ordinal range for quantile/quantize scales', () => {\n        const scales: ScaleType[] = ['quantile', 'quantize'];\n        scales.forEach(discretizingScale => {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'color',\n              discretizingScale,\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              undefined,\n              'point',\n              false,\n              'plot_width',\n              []\n            ),\n            makeImplicit({scheme: 'blues', count: 4})\n          );\n        });\n      });\n\n      it('should use default ordinal range for threshold scale', () => {\n        assert.deepEqual(\n          parseRangeForChannel(\n            'color',\n            'threshold',\n            QUANTITATIVE,\n            {},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          ),\n          makeImplicit({scheme: 'blues', count: 3})\n        );\n      });\n\n      it('should use default color range for log scale', () => {\n        assert.deepEqual(\n          parseRangeForChannel(\n            'color',\n            'log',\n            QUANTITATIVE,\n            {},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          ),\n          makeImplicit(['#f7fbff', '#0e427f'])\n        );\n      });\n    });\n\n    describe('opacity', () => {\n      it(\"should use default opacityRange as opacity's scale range.\", () => {\n        assert.deepEqual(\n          parseRangeForChannel(\n            'opacity',\n            'linear',\n            QUANTITATIVE,\n            {},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          ),\n          makeImplicit([defaultConfig.scale.minOpacity, defaultConfig.scale.maxOpacity])\n        );\n      });\n    });\n\n    describe('size', () => {\n      describe('bar', () => {\n        it('should return [minBandSize, maxBandSize] if both are specified', () => {\n          const config = {\n            scale: {minBandSize: 2, maxBandSize: 9}\n          };\n          assert.deepEqual(\n            parseRangeForChannel('size', 'linear', QUANTITATIVE, {}, config, undefined, 'bar', false, 'plot_width', []),\n            makeImplicit([2, 9])\n          );\n        });\n\n        it('should return [continuousBandSize, xRangeStep-1] by default since min/maxSize config are not specified', () => {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'size',\n              'linear',\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              undefined,\n              'bar',\n              false,\n              'plot_width',\n              []\n            ),\n            makeImplicit([2, defaultConfig.scale.rangeStep - 1])\n          );\n        });\n      });\n\n      describe('tick', () => {\n        it('should return [minBandSize, maxBandSize] if both are specified', () => {\n          const config = {\n            scale: {minBandSize: 4, maxBandSize: 9}\n          };\n          assert.deepEqual(\n            parseRangeForChannel(\n              'size',\n              'linear',\n              QUANTITATIVE,\n              {},\n              config,\n              undefined,\n              'tick',\n              false,\n              'plot_width',\n              []\n            ),\n            makeImplicit([4, 9])\n          );\n        });\n\n        it('should return [(default)minBandSize, rangeStep-1] by default since maxSize config is not specified', () => {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'size',\n              'linear',\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              undefined,\n              'tick',\n              false,\n              'plot_width',\n              []\n            ),\n            makeImplicit([defaultConfig.scale.minBandSize, defaultConfig.scale.rangeStep - 1])\n          );\n        });\n      });\n\n      describe('text', () => {\n        it('should return [minFontSize, maxFontSize]', () => {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'size',\n              'linear',\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              undefined,\n              'text',\n              false,\n              'plot_width',\n              []\n            ),\n            makeImplicit([defaultConfig.scale.minFontSize, defaultConfig.scale.maxFontSize])\n          );\n        });\n      });\n\n      describe('rule', () => {\n        it('should return [minStrokeWidth, maxStrokeWidth]', () => {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'size',\n              'linear',\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              undefined,\n              'rule',\n              false,\n              'plot_width',\n              []\n            ),\n            makeImplicit([defaultConfig.scale.minStrokeWidth, defaultConfig.scale.maxStrokeWidth])\n          );\n        });\n      });\n\n      describe('point, square, circle', () => {\n        it('should return [minSize, maxSize]', () => {\n          for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            const config = {\n              scale: {\n                minSize: 5,\n                maxSize: 25\n              }\n            };\n\n            assert.deepEqual(\n              parseRangeForChannel('size', 'linear', QUANTITATIVE, {}, config, undefined, m, false, 'plot_width', []),\n              makeImplicit([5, 25])\n            );\n          }\n        });\n\n        it('should return [0, (minBandSize-2)^2] if both x and y are discrete and size is quantitative (thus use zero=true, by default)', () => {\n          for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            assert.deepEqual(\n              parseRangeForChannel(\n                'size',\n                'linear',\n                QUANTITATIVE,\n                {},\n                defaultConfig,\n                true,\n                m,\n                false,\n                'plot_width',\n                [11, 13] // xyRangeSteps\n              ),\n              makeImplicit([0, 81])\n            );\n          }\n        });\n\n        it('should return [9, (minBandSize-2)^2] if both x and y are discrete and size is not quantitative (thus use zero=false, by default)', () => {\n          for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            assert.deepEqual(\n              parseRangeForChannel(\n                'size',\n                'linear',\n                QUANTITATIVE,\n                {},\n                defaultConfig,\n                false,\n                m,\n                false,\n                'plot_width',\n                [11, 13] // xyRangeSteps\n              ),\n              makeImplicit([9, 81])\n            );\n          }\n        });\n\n        it('should return [9, (minBandSize-2)^2] if both x and y are discrete and size is quantitative but use zero=false', () => {\n          for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            assert.deepEqual(\n              parseRangeForChannel(\n                'size',\n                'linear',\n                QUANTITATIVE,\n                {},\n                defaultConfig,\n                false,\n                m,\n                false,\n                'plot_width',\n                [11, 13] // xyRangeSteps\n              ),\n              makeImplicit([9, 81])\n            );\n          }\n        });\n\n        it('should return [0, (xRangeStep-2)^2] if x is discrete and y is continuous and size is quantitative (thus use zero=true, by default)', () => {\n          for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            assert.deepEqual(\n              parseRangeForChannel(\n                'size',\n                'linear',\n                QUANTITATIVE,\n                {},\n                defaultConfig,\n                true,\n                m,\n                false,\n                'plot_width',\n                [11] // xyRangeSteps only have one value\n              ),\n              makeImplicit([0, 81])\n            );\n          }\n        });\n\n        it('should return range interpolation of length 4 for quantile/quantize scales', () => {\n          const scales: ScaleType[] = ['quantile', 'quantize'];\n          scales.forEach(discretizingScale => {\n            assert.deepEqual(\n              parseRangeForChannel(\n                'size',\n                discretizingScale,\n                QUANTITATIVE,\n                {},\n                defaultConfig,\n                undefined,\n                'point',\n                false,\n                'plot_width',\n                []\n              ),\n              makeImplicit([9, 126.33333333333333, 243.66666666666666, 361])\n            );\n          });\n        });\n\n        it('should return range interpolation of length 4 for threshold scale', () => {\n          assert.deepEqual(\n            parseRangeForChannel(\n              'size',\n              'threshold',\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              undefined,\n              'point',\n              false,\n              'plot_width',\n              []\n            ),\n            makeImplicit([9, 185, 361])\n          );\n        });\n      });\n    });\n\n    describe('shape', () => {\n      it(\"should use default symbol range in Vega as shape's scale range.\", () => {\n        assert.deepEqual(\n          parseRangeForChannel(\n            'shape',\n            'ordinal',\n            QUANTITATIVE,\n            {},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          ),\n          makeImplicit('symbol')\n        );\n      });\n    });\n  });\n\n  describe('defaultContinuousToDiscreteCount', () => {\n    it('should use config.scale.quantileCount for quantile scale', () => {\n      const config: Config = {\n        scale: {\n          quantileCount: 4\n        }\n      };\n      assert.equal(defaultContinuousToDiscreteCount('quantile', config, undefined, 'x'), 4);\n    });\n\n    it('should use config.scale.quantizeCount for quantize scale', () => {\n      const config: Config = {\n        scale: {\n          quantizeCount: 4\n        }\n      };\n      assert.equal(defaultContinuousToDiscreteCount('quantize', config, undefined, 'x'), 4);\n    });\n\n    it('should use domain size for threshold scale', () => {\n      assert.equal(defaultContinuousToDiscreteCount('threshold', {}, [1, 10], 'x'), 3);\n    });\n\n    it('should throw warning and default to 4 for scale without domain', () => {\n      log.wrap(localLogger => {\n        assert.equal(defaultContinuousToDiscreteCount('quantize', {}, undefined, 'x'), 4);\n        assert.equal(localLogger.warns[0], log.message.domainRequiredForThresholdScale('x'));\n      });\n    });\n  });\n\n  describe('interpolateRange', () => {\n    it('should return the correct interpolation of 1 - 100 with cardinality of 5', () => {\n      assert.deepEqual(interpolateRange(0, 100, 5), [0, 25, 50, 75, 100]);\n    });\n  });\n});\n"]}