{"version":3,"file":"optimize.test.js","sourceRoot":"","sources":["../../../../test/compile/data/optimize.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {DataFlowNode, OutputNode} from '../../../src/compile/data/dataflow';\nimport {ParseNode} from '../../../src/compile/data/formatparse';\nimport {optimizeDataflow} from '../../../src/compile/data/optimize';\nimport {MergeParse} from '../../../src/compile/data/optimizers';\nimport {SourceNode} from '../../../src/compile/data/source';\n\ndescribe('compile/data/optimize', () => {\n  describe('mergeParse', () => {\n    it('should merge non-conflicting ParseNodes', () => {\n      const root = new DataFlowNode(null, 'root');\n      // ts-ignore is used to suppress the noUnusedLocals error\n      // @ts-ignore\n      const parse1 = new ParseNode(root, {a: 'number', b: 'string'});\n      // @ts-ignore\n      const parse2 = new ParseNode(root, {b: 'string', c: 'boolean'});\n      const optimizer = new MergeParse();\n      optimizer.run(parse1);\n      assert.deepEqual(root.children.length, 1);\n      const mergedParseNode = root.children[0] as ParseNode;\n      assert.deepEqual(mergedParseNode.parse, {a: 'number', b: 'string', c: 'boolean'});\n    });\n\n    it('should not merge conflicting ParseNodes', () => {\n      const root = new DataFlowNode(null, 'root');\n      // @ts-ignore\n      const parse1 = new ParseNode(root, {a: 'number', b: 'string'});\n      // @ts-ignore\n      const parse2 = new ParseNode(root, {a: 'boolean', d: 'date'});\n      const optimizer = new MergeParse();\n      optimizer.run(parse1);\n      assert.deepEqual(root.children.length, 1);\n      const mergedParseNode = root.children[0] as ParseNode;\n      assert.deepEqual(mergedParseNode.parse, {b: 'string', d: 'date'});\n      const children = mergedParseNode.children as [ParseNode, ParseNode];\n      assert.deepEqual(children[0].parse, {a: 'number'});\n      assert.deepEqual(children[1].parse, {a: 'boolean'});\n    });\n  });\n  describe('optimizeDataFlow', () => {\n    it('should move up common parse', () => {\n      const source = new SourceNode(null);\n      const parseOne = new ParseNode(source, {a: 'time', b: 'number'});\n      const parseTwo = new ParseNode(source, {a: 'time', b: 'date'});\n      // @ts-ignore\n      const outputOne = new OutputNode(parseOne, 'foo', null, {foo: 1});\n      // @ts-ignore\n      const outputTwo = new OutputNode(parseTwo, 'bar', null, {bar: 1});\n\n      optimizeDataflow({sources: [source]} as any);\n\n      expect(source.children.length).toEqual(1);\n      expect(source.children[0]).toBeInstanceOf(ParseNode);\n\n      const commonParse = source.children[0] as ParseNode;\n      expect(commonParse.parse).toEqual({a: 'time'});\n      expect(commonParse.children.length).toEqual(2);\n\n      expect(commonParse.children[0]).toBeInstanceOf(ParseNode);\n      expect(commonParse.children[0]).toMatchObject(parseOne);\n\n      expect(commonParse.children[1]).toBeInstanceOf(ParseNode);\n      expect(commonParse.children[1]).toMatchObject(parseTwo);\n    });\n    it('should push parse up from lowest level first to avoid conflicting common parse', () => {\n      const source = new SourceNode(null);\n      const parseOne = new ParseNode(source, {a: 'time'});\n      const parseTwo = new ParseNode(source, {b: 'number'});\n      const parseThree = new ParseNode(parseTwo, {a: 'number'});\n      // @ts-ignore\n      const outputOne = new OutputNode(parseOne, 'foo', null, {foo: 1});\n      // @ts-ignore\n      const outputTwo = new OutputNode(parseThree, 'bar', null, {bar: 1});\n\n      optimizeDataflow({sources: [source]} as any);\n\n      expect(source.children.length).toEqual(1);\n      expect(source.children[0]).toBeInstanceOf(ParseNode);\n\n      const commonParse = source.children[0] as ParseNode;\n      expect(commonParse.parse).toEqual({b: 'number'});\n\n      expect(commonParse.children.length).toEqual(2);\n      expect(commonParse.children[0]).toBeInstanceOf(ParseNode);\n      expect(commonParse.children[1]).toBeInstanceOf(ParseNode);\n\n      const p1 = commonParse.children[0] as ParseNode;\n      const p2 = commonParse.children[1] as ParseNode;\n\n      expect(p1.parse).toEqual({a: 'time'});\n      expect(p2.parse).toEqual({a: 'number'});\n    });\n  });\n});\n"]}