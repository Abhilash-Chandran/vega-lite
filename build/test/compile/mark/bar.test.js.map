{"version":3,"file":"bar.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/bar.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\n\nimport {bar} from '../../../src/compile/mark/bar';\nimport {fieldInvalidPredicate, fieldInvalidTestValueRef} from '../../../src/compile/mark/valueref';\nimport {PositionFieldDef, SecondaryFieldDef} from '../../../src/fielddef';\nimport * as log from '../../../src/log';\nimport {defaultBarConfig} from '../../../src/mark';\nimport {defaultScaleConfig} from '../../../src/scale';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('Mark: Bar', () => {\n  describe('simple vertical', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'Origin', type: 'nominal'},\n        y: {type: 'quantitative', field: 'Acceleration', aggregate: 'mean'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar, with y from zero to field value and with band value for x/width ', () => {\n      expect(props.x).toEqual({scale: 'x', field: 'Origin'});\n      expect(props.width).toEqual({scale: 'x', band: true});\n      expect(props.y).toEqual({scale: 'y', field: 'mean_Acceleration'});\n      expect(props.y2).toEqual({scale: 'y', value: 0});\n      expect(props.height).toBeUndefined();\n    });\n  });\n\n  it('should draw vertical bar, with y from zero to field value and bar with quantitative x, x2, and y', () => {\n    const x: PositionFieldDef<string> = {field: 'bin_start', type: 'quantitative'};\n    const x2: SecondaryFieldDef<string> = {field: 'bin_end'};\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x,\n        x2,\n        y: {type: 'quantitative', field: 'Acceleration'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n    expect(props.x).toEqual([{test: fieldInvalidPredicate(x), value: 0}, {scale: 'x', field: 'bin_start'}]);\n    expect(props.x2).toEqual([{test: fieldInvalidPredicate(x2), value: 0}, {scale: 'x', field: 'bin_end'}]);\n    expect(props.y).toEqual({scale: 'y', field: 'Acceleration'});\n    expect(props.y2).toEqual({scale: 'y', value: 0});\n    expect(props.height).toBeUndefined();\n  });\n\n  it('should draw vertical bar, with y from zero to field value and with band value for x/width when domain that includes zero is specified', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'Origin', type: 'nominal'},\n        y: {type: 'quantitative', field: 'Acceleration', aggregate: 'mean', scale: {domain: [-1, 1]}}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    expect(props.x).toEqual({scale: 'x', field: 'Origin'});\n    expect(props.width).toEqual({scale: 'x', band: true});\n    expect(props.y).toEqual({scale: 'y', field: 'mean_Acceleration'});\n    expect(props.y2).toEqual({scale: 'y', value: 0});\n    expect(props.height).toBeUndefined();\n  });\n\n  it(\n    'should draw vertical bar, with y from \"group: height\" to field value when domain that excludes zero is specified',\n    log.wrap(logger => {\n      const y: PositionFieldDef<string> = {\n        type: 'quantitative',\n        field: 'Acceleration',\n        aggregate: 'mean',\n        scale: {domain: [1, 2]}\n      };\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/cars.json'},\n        mark: 'bar',\n        encoding: {\n          x: {field: 'Origin', type: 'nominal'},\n          y\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      expect(props.y).toEqual([fieldInvalidTestValueRef(y, 'y'), {scale: 'y', field: 'mean_Acceleration'}]);\n      expect(props.y2).toEqual({field: {group: 'height'}});\n      expect(props.height).toBeUndefined();\n\n      expect(logger.warns[0]).toEqual(log.message.nonZeroScaleUsedWithLengthMark('bar', 'y', {zeroFalse: false}));\n    })\n  );\n\n  it(\n    'should draw vertical bar, with y from \"group: height\" to field value when zero=false for y-scale',\n    log.wrap(logger => {\n      const y: PositionFieldDef<string> = {\n        type: 'quantitative',\n        field: 'Acceleration',\n        aggregate: 'mean',\n        scale: {zero: false}\n      };\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/cars.json'},\n        mark: 'bar',\n        encoding: {\n          x: {field: 'Origin', type: 'nominal'},\n          y\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      expect(props.y).toEqual([\n        {test: fieldInvalidPredicate(y), field: {group: 'height'}},\n        {scale: 'y', field: 'mean_Acceleration'}\n      ]);\n      expect(props.y2).toEqual({field: {group: 'height'}});\n      expect(props.height).toBeUndefined();\n\n      expect(logger.warns[0]).toEqual(log.message.nonZeroScaleUsedWithLengthMark('bar', 'y', {zeroFalse: true}));\n    })\n  );\n\n  it(\n    'should draw vertical bar, with y from \"group: height\" to field value when y-scale type is log',\n    log.wrap(logger => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/cars.json'},\n        mark: 'bar',\n        encoding: {\n          x: {field: 'Origin', type: 'nominal'},\n          y: {type: 'quantitative', field: 'Acceleration', aggregate: 'mean', scale: {type: 'log'}}\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      expect(props.y).toEqual({scale: 'y', field: 'mean_Acceleration'});\n      expect(props.y2).toEqual({field: {group: 'height'}});\n      expect(props.height).toBeUndefined();\n\n      expect(logger.warns[0]).toEqual(log.message.nonZeroScaleUsedWithLengthMark('bar', 'y', {scaleType: 'log'}));\n    })\n  );\n\n  describe('simple horizontal', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar from zero to field value and with band value for x/width', () => {\n      expect(props.y).toEqual({scale: 'y', field: 'Origin'});\n      expect(props.height).toEqual({scale: 'y', band: true});\n      expect(props.x).toEqual({scale: 'x', field: 'mean_Acceleration'});\n      expect(props.x2).toEqual({scale: 'x', value: 0});\n      expect(props.width).toBeUndefined();\n    });\n  });\n\n  it('should draw horizontal bar, with y from zero to field value and bar with quantitative x, x2, and y', () => {\n    const y: PositionFieldDef<string> = {field: 'bin_start', type: 'quantitative'};\n    const y2: PositionFieldDef<string> = {field: 'bin_end', type: 'quantitative'};\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y,\n        y2,\n        x: {type: 'quantitative', field: 'Acceleration'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n    expect(props.y).toEqual([\n      {test: fieldInvalidPredicate(y), field: {group: 'height'}},\n      {scale: 'y', field: 'bin_start'}\n    ]);\n    expect(props.y2).toEqual([\n      {test: fieldInvalidPredicate(y2), field: {group: 'height'}},\n      {scale: 'y', field: 'bin_end'}\n    ]);\n    expect(props.x).toEqual({scale: 'x', field: 'Acceleration'});\n    expect(props.x2).toEqual({scale: 'x', value: 0});\n    expect(props.height).toBeUndefined();\n  });\n\n  describe('simple horizontal with point scale', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal', scale: {type: 'point'}},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar from zero to field value and y with center position and height = rangeStep - 1', () => {\n      expect(props.yc).toEqual({scale: 'y', field: 'Origin'});\n      expect(props.height).toEqual({value: defaultScaleConfig.rangeStep - 1});\n      expect(props.x).toEqual({scale: 'x', field: 'mean_Acceleration'});\n      expect(props.x2).toEqual({scale: 'x', value: 0});\n      expect(props.width).toBeUndefined();\n    });\n  });\n\n  describe('simple horizontal with size value', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'},\n        size: {value: 5}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should set height to 5 and center y', () => {\n      expect(props.height).toEqual({value: 5});\n      expect(props.yc).toEqual({scale: 'y', field: 'Origin', band: 0.5});\n    });\n  });\n\n  describe('simple horizontal with size value in mark def', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: {type: 'bar', size: 5},\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should set height to 5 and center y', () => {\n      expect(props.height).toEqual({value: 5});\n      expect(props.yc).toEqual({scale: 'y', field: 'Origin', band: 0.5});\n    });\n  });\n\n  describe('simple horizontal with size field', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'},\n        size: {aggregate: 'mean', field: 'Horsepower', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar from zero to field value and with band value for x/width', () => {\n      expect(props.yc).toEqual({scale: 'y', field: 'Origin', band: 0.5});\n      expect(props.height).toEqual({scale: 'size', field: 'mean_Horsepower'});\n      expect(props.x).toEqual({scale: 'x', field: 'mean_Acceleration'});\n      expect(props.x2).toEqual({scale: 'x', value: 0});\n      expect(props.width).toBeUndefined();\n    });\n  });\n\n  describe('horizontal binned', () => {\n    const y: PositionFieldDef<string> = {bin: true, field: 'Horsepower', type: 'quantitative'};\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y,\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with y and y2', () => {\n      expect(props.y2).toEqual([fieldInvalidTestValueRef(y, 'y'), {scale: 'y', field: 'bin_maxbins_10_Horsepower'}]);\n      expect(props.y).toEqual([\n        fieldInvalidTestValueRef(y, 'y'),\n        {\n          scale: 'y',\n          field: 'bin_maxbins_10_Horsepower_end',\n          offset: defaultBarConfig.binSpacing\n        }\n      ]);\n      expect(props.height).toBeUndefined();\n    });\n  });\n\n  describe('horizontal binned, sort descending', () => {\n    const y: PositionFieldDef<string> = {bin: true, field: 'Horsepower', type: 'quantitative', sort: 'descending'};\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y,\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with y and y2', () => {\n      expect(props.y2).toEqual([\n        fieldInvalidTestValueRef(y, 'y'),\n        {scale: 'y', field: 'bin_maxbins_10_Horsepower', offset: defaultBarConfig.binSpacing}\n      ]);\n      expect(props.y).toEqual([fieldInvalidTestValueRef(y, 'y'), {scale: 'y', field: 'bin_maxbins_10_Horsepower_end'}]);\n      expect(props.height).toBeUndefined();\n    });\n  });\n\n  describe('horizontal binned, reverse', () => {\n    const y: PositionFieldDef<string> = {bin: true, field: 'Horsepower', type: 'quantitative', scale: {reverse: true}};\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y,\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with y and y2', () => {\n      expect(props.y2).toEqual([\n        fieldInvalidTestValueRef(y, 'y'),\n        {scale: 'y', field: 'bin_maxbins_10_Horsepower', offset: defaultBarConfig.binSpacing}\n      ]);\n      expect(props.y).toEqual([fieldInvalidTestValueRef(y, 'y'), {scale: 'y', field: 'bin_maxbins_10_Horsepower_end'}]);\n      expect(props.height).toBeUndefined();\n    });\n  });\n\n  describe('vertical binned', () => {\n    const x: PositionFieldDef<string> = {bin: true, field: 'Horsepower', type: 'quantitative'};\n\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x,\n        y: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with x and x2', () => {\n      expect(props.x2).toEqual([\n        fieldInvalidTestValueRef(x, 'x'),\n        {scale: 'x', field: 'bin_maxbins_10_Horsepower', offset: defaultBarConfig.binSpacing}\n      ]);\n      expect(props.x).toEqual([fieldInvalidTestValueRef(x, 'x'), {scale: 'x', field: 'bin_maxbins_10_Horsepower_end'}]);\n      expect(props.width).toBeUndefined();\n    });\n  });\n\n  describe('vertical binned, sort descending', () => {\n    const x: PositionFieldDef<string> = {bin: true, field: 'Horsepower', type: 'quantitative', sort: 'descending'};\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x,\n        y: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with x and x2', () => {\n      expect(props.x2).toEqual([fieldInvalidTestValueRef(x, 'x'), {scale: 'x', field: 'bin_maxbins_10_Horsepower'}]);\n      expect(props.x).toEqual([\n        fieldInvalidTestValueRef(x, 'x'),\n        {\n          scale: 'x',\n          field: 'bin_maxbins_10_Horsepower_end',\n          offset: defaultBarConfig.binSpacing\n        }\n      ]);\n      expect(props.width).toBeUndefined();\n    });\n  });\n\n  describe('horizontal binned with ordinal', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {bin: true, field: 'Horsepower', type: 'ordinal'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with y', () => {\n      expect(props.y).toEqual({scale: 'y', field: 'bin_maxbins_10_Horsepower_range'});\n      expect(props.height).toEqual({scale: 'y', band: true});\n    });\n  });\n\n  describe('vertical binned with ordinal', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {bin: true, field: 'Horsepower', type: 'ordinal'},\n        y: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with y', () => {\n      expect(props.x).toEqual({scale: 'x', field: 'bin_maxbins_10_Horsepower_range'});\n      expect(props.width).toEqual({scale: 'x', band: true});\n    });\n  });\n\n  describe('horizontal binned with no spacing', () => {\n    const y: PositionFieldDef<string> = {bin: true, field: 'Horsepower', type: 'quantitative'};\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y,\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      },\n      config: {bar: {binSpacing: 0}}\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with y and y2', () => {\n      expect(props.y2).toEqual([fieldInvalidTestValueRef(y, 'y'), {scale: 'y', field: 'bin_maxbins_10_Horsepower'}]);\n      expect(props.y).toEqual([fieldInvalidTestValueRef(y, 'y'), {scale: 'y', field: 'bin_maxbins_10_Horsepower_end'}]);\n      expect(props.height).toBeUndefined();\n    });\n  });\n\n  describe('vertical binned with no spacing', () => {\n    const x: PositionFieldDef<string> = {bin: true, field: 'Horsepower', type: 'quantitative'};\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x,\n        y: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      },\n      config: {bar: {binSpacing: 0}}\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with x and x2', () => {\n      expect(props.x2).toEqual([fieldInvalidTestValueRef(x, 'x'), {scale: 'x', field: 'bin_maxbins_10_Horsepower'}]);\n      expect(props.x).toEqual([fieldInvalidTestValueRef(x, 'x'), {scale: 'x', field: 'bin_maxbins_10_Horsepower_end'}]);\n      expect(props.width).toBeUndefined();\n    });\n  });\n\n  describe('simple horizontal binned with size', () => {\n    const y: PositionFieldDef<string> = {bin: true, field: 'Horsepower', type: 'quantitative'};\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y,\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'},\n        size: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with y centered on bin_mid and height = size field', () => {\n      expect(props.yc).toEqual([\n        {\n          test: fieldInvalidPredicate(y),\n          field: {group: 'height'}\n        },\n        {\n          signal: 'scale(\"y\", (datum[\"bin_maxbins_10_Horsepower\"] + datum[\"bin_maxbins_10_Horsepower_end\"]) / 2)'\n        }\n      ]);\n      expect(props.height).toEqual({scale: 'size', field: 'mean_Acceleration'});\n    });\n  });\n\n  describe('vertical binned with size', () => {\n    const x: PositionFieldDef<string> = {bin: true, field: 'Horsepower', type: 'quantitative'};\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x,\n        y: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'},\n        size: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with x centered on bin_mid and width = size field', () => {\n      expect(props.xc).toEqual([\n        {\n          test: fieldInvalidPredicate(x),\n          value: 0\n        },\n        {\n          signal: 'scale(\"x\", (datum[\"bin_maxbins_10_Horsepower\"] + datum[\"bin_maxbins_10_Horsepower_end\"]) / 2)'\n        }\n      ]);\n      expect(props.width).toEqual({scale: 'size', field: 'mean_Acceleration'});\n    });\n  });\n\n  describe('vertical, with log', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'Origin', type: 'nominal'},\n        y: {scale: {type: 'log'}, type: 'quantitative', field: 'Acceleration', aggregate: 'mean'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should end on axis and has no height', () => {\n      expect(props.y2).toEqual({field: {group: 'height'}});\n      expect(props.height).toBeUndefined();\n    });\n  });\n\n  describe('horizontal, with log', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {scale: {type: 'log'}, type: 'quantitative', field: 'Acceleration', aggregate: 'mean'}\n      }\n    });\n\n    const props = bar.encodeEntry(model);\n\n    it('should end on axis and has no width', () => {\n      expect(props.x2).toEqual({value: 0});\n      expect(props.width).toBeUndefined();\n    });\n  });\n\n  describe('vertical, with fit mode', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      width: 120,\n      height: 120,\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'Origin', type: 'nominal'},\n        y: {aggregate: 'mean', field: 'Horsepower', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should use x and with band true', () => {\n      expect(props.x).toEqual({\n        scale: 'x',\n        field: 'Origin'\n      });\n      expect(props.width).toEqual({\n        scale: 'x',\n        band: true\n      });\n    });\n  });\n\n  describe('horizontal, with fit mode', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      width: 120,\n      height: 120,\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {aggregate: 'mean', field: 'Horsepower', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should use y with band true', () => {\n      expect(props.y).toEqual({\n        scale: 'y',\n        field: 'Origin'\n      });\n      expect(props.height).toEqual({\n        scale: 'y',\n        band: true\n      });\n    });\n  });\n\n  describe('vertical with zero=false', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'Origin', type: 'nominal'},\n        y: {scale: {zero: false}, type: 'quantitative', field: 'Acceleration', aggregate: 'mean'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should end on axis nad have no height', () => {\n      expect(props.y2).toEqual({field: {group: 'height'}});\n      expect(props.height).toBeUndefined();\n    });\n  });\n\n  describe('horizontal with zero=false', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {scale: {zero: false}, type: 'quantitative', field: 'Acceleration', aggregate: 'mean'}\n      }\n    });\n\n    const props = bar.encodeEntry(model);\n    it('should end on axis and have no width', () => {\n      expect(props.x2).toEqual({value: 0});\n      expect(props.width).toBeUndefined();\n    });\n  });\n\n  describe('1D vertical', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'bar',\n      encoding: {y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'}},\n      data: {url: 'data/movies.json'}\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should have y end on axis, have no-height and have x-offset', () => {\n      expect(props.y).toEqual({scale: 'y', field: 'sum_US_Gross'});\n      expect(props.y2).toEqual({scale: 'y', value: 0});\n      expect(props.height).toBeUndefined();\n      expect(props.xc).toEqual({\n        mult: 0.5,\n        signal: 'width'\n      });\n    });\n  });\n\n  describe('1D vertical with size value', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'bar',\n      encoding: {\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'},\n        size: {value: 5}\n      },\n      data: {url: 'data/movies.json'}\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should have width = 5', () => {\n      expect(props.width).toEqual({value: 5});\n    });\n  });\n\n  describe('1D vertical with config.mark.size', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'bar',\n      encoding: {\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'}\n      },\n      data: {url: 'data/movies.json'},\n      config: {\n        mark: {size: 5}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should not use config.mark.size', () => {\n      expect(props.width).toEqual({value: 19});\n    });\n  });\n\n  describe('1D vertical with config.bar.discreteBandSize', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/movies.json'},\n      mark: 'bar',\n      encoding: {\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'}\n      },\n      config: {\n        bar: {discreteBandSize: 5}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should have width = 5', () => {\n      expect(props.width).toEqual({value: 5});\n    });\n  });\n\n  describe('2D vertical with point scale and config.bar.discreteBandSize', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/movies.json'},\n      mark: 'bar',\n      encoding: {\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'},\n        x: {type: 'nominal', field: 'Major_Genre', scale: {type: 'point'}}\n      },\n      config: {\n        bar: {discreteBandSize: 5}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should have width = 5', () => {\n      expect(props.width).toEqual({value: 5});\n    });\n  });\n\n  describe('2D vertical with config.bar.discreteBandSize', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/movies.json'},\n      mark: 'bar',\n      encoding: {\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'},\n        x: {type: 'nominal', field: 'Major_Genre'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should have width = 5', () => {\n      expect(props.width).toEqual({scale: 'x', band: true});\n    });\n  });\n\n  describe('1D vertical with config.bar.size', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/movies.json'},\n      mark: 'bar',\n      encoding: {\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'}\n      },\n      config: {\n        bar: {size: 5}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should have width = 5', () => {\n      expect(props.width).toEqual({value: 5});\n    });\n  });\n\n  describe('1D vertical with config.style.bar.size', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/movies.json'},\n      mark: 'bar',\n      encoding: {\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'}\n      },\n      config: {\n        style: {bar: {size: 5}}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should have width = 5', () => {\n      expect(props.width).toEqual({value: 5});\n    });\n  });\n\n  describe('1D horizontal', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'bar',\n      encoding: {x: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'}},\n      data: {url: 'data/movies.json'}\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should end on axis, have no width, and have y-offset', () => {\n      expect(props.x).toEqual({scale: 'x', field: 'sum_US_Gross'});\n      expect(props.x2).toEqual({scale: 'x', value: 0});\n      expect(props.width).toBeUndefined();\n      expect(props.yc).toEqual({\n        mult: 0.5,\n        signal: 'height'\n      });\n    });\n  });\n\n  describe('QxQ horizontal', () => {\n    // This is generally a terrible idea, but we should still test\n    // if the output show expected results\n    const y: PositionFieldDef<string> = {field: 'Horsepower', type: 'quantitative'};\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'Acceleration', type: 'quantitative'},\n        y\n      },\n      config: {\n        mark: {orient: 'horizontal'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should produce horizontal bar using x, x2', () => {\n      expect(props.x).toEqual({scale: 'x', field: 'Acceleration'});\n      expect(props.x2).toEqual({scale: 'x', value: 0});\n      expect(props.yc).toEqual([\n        {test: fieldInvalidPredicate(y), field: {group: 'height'}},\n        {scale: 'y', field: 'Horsepower'}\n      ]);\n      expect(props.height).toEqual({value: defaultBarConfig.continuousBandSize});\n    });\n  });\n\n  describe('QxQ vertical', () => {\n    // This is generally a terrible idea, but we should still test\n    // if the output show expected results\n    const x: PositionFieldDef<string> = {field: 'Acceleration', type: 'quantitative'};\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x,\n        y: {field: 'Horsepower', type: 'quantitative'}\n      },\n      config: {\n        mark: {orient: 'vertical'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should produce horizontal bar using x, x2', () => {\n      expect(props.xc).toEqual([{test: fieldInvalidPredicate(x), value: 0}, {scale: 'x', field: 'Acceleration'}]);\n      expect(props.width).toEqual({value: defaultBarConfig.continuousBandSize});\n      expect(props.y).toEqual({scale: 'y', field: 'Horsepower'});\n      expect(props.y2).toEqual({scale: 'y', value: 0});\n    });\n  });\n\n  describe('OxN', () => {\n    // This is generally a terrible idea, but we should still test\n    // if the output show expected results\n    it('should produce vertical bar using x, width', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/cars.json'},\n        mark: 'bar',\n        encoding: {\n          x: {field: 'Origin', type: 'nominal'},\n          y: {field: 'Cylinders', type: 'ordinal'}\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      expect(props.x).toEqual({scale: 'x', field: 'Origin'});\n      expect(props.width).toEqual({scale: 'x', band: true});\n      expect(props.y).toEqual({scale: 'y', field: 'Cylinders'});\n      expect(props.height).toEqual({scale: 'y', band: true});\n    });\n  });\n\n  describe('ranged bar', () => {\n    // TODO: gantt chart with temporal\n\n    // TODO: gantt chart with ordinal\n\n    it('vertical bars should work with aggregate', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/population.json'},\n        mark: 'bar',\n        encoding: {\n          x: {field: 'age', type: 'ordinal'},\n          y: {field: 'people', aggregate: 'q1', type: 'quantitative'},\n          y2: {field: 'people', aggregate: 'q3', type: 'quantitative'}\n        }\n      });\n\n      const props = bar.encodeEntry(model);\n      expect(props.x).toEqual({scale: 'x', field: 'age'});\n      expect(props.y).toEqual({scale: 'y', field: 'q1_people'});\n      expect(props.y2).toEqual({scale: 'y', field: 'q3_people'});\n    });\n\n    it('horizontal bars should work with aggregate', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/population.json'},\n        mark: 'bar',\n        encoding: {\n          y: {field: 'age', type: 'ordinal'},\n          x: {field: 'people', aggregate: 'q1', type: 'quantitative'},\n          x2: {field: 'people', aggregate: 'q3', type: 'quantitative'}\n        }\n      });\n\n      const props = bar.encodeEntry(model);\n      expect(props.y).toEqual({scale: 'y', field: 'age'});\n      expect(props.x).toEqual({scale: 'x', field: 'q1_people'});\n      expect(props.x2).toEqual({scale: 'x', field: 'q3_people'});\n    });\n  });\n\n  describe('vertical binned data', () => {\n    describe('default offset', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'bar',\n        encoding: {\n          x: {\n            field: 'bin_start',\n            bin: 'binned',\n            type: 'quantitative',\n            axis: {\n              tickMinStep: 2\n            }\n          },\n          x2: {\n            field: 'bin_end',\n            type: 'quantitative'\n          },\n          y: {\n            field: 'count',\n            type: 'quantitative'\n          }\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      it('should draw bar with x and x2', () => {\n        expect(props.x2).toEqual({scale: 'x', field: 'bin_start', offset: 1});\n        expect(props.x).toEqual({scale: 'x', field: 'bin_end'});\n        expect(props.y).toEqual({scale: 'y', field: 'count'});\n        expect(props.y2).toEqual({scale: 'y', value: 0});\n        expect(props.width).toBeUndefined();\n      });\n    });\n\n    describe('custom offset', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: {type: 'bar', binSpacing: 10},\n        encoding: {\n          x: {\n            field: 'bin_start',\n            bin: 'binned',\n            type: 'quantitative',\n            axis: {\n              tickMinStep: 2\n            }\n          },\n          x2: {\n            field: 'bin_end',\n            type: 'quantitative'\n          },\n          y: {\n            field: 'count',\n            type: 'quantitative'\n          }\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      it('should draw bar with x and x2', () => {\n        expect(props.x2).toEqual({scale: 'x', field: 'bin_start', offset: 10});\n        expect(props.x).toEqual({scale: 'x', field: 'bin_end'});\n        expect(props.y).toEqual({scale: 'y', field: 'count'});\n        expect(props.y2).toEqual({scale: 'y', value: 0});\n        expect(props.width).toBeUndefined();\n      });\n    });\n  });\n\n  describe('horizontal binned data', () => {\n    describe('default offset', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'bar',\n        encoding: {\n          y: {\n            field: 'bin_start',\n            bin: 'binned',\n            type: 'quantitative',\n            axis: {\n              tickMinStep: 2\n            }\n          },\n          y2: {\n            field: 'bin_end',\n            type: 'quantitative'\n          },\n          x: {\n            field: 'count',\n            type: 'quantitative'\n          }\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      it('should draw bar with y and y2', () => {\n        expect(props.y2).toEqual({scale: 'y', field: 'bin_start'});\n        expect(props.y).toEqual({scale: 'y', field: 'bin_end', offset: 1});\n        expect(props.x).toEqual({scale: 'x', field: 'count'});\n        expect(props.x2).toEqual({scale: 'x', value: 0});\n        expect(props.width).toBeUndefined();\n      });\n    });\n\n    describe('custom offset', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: {type: 'bar', binSpacing: 10},\n        encoding: {\n          y: {\n            field: 'bin_start',\n            bin: 'binned',\n            type: 'quantitative',\n            axis: {\n              tickMinStep: 2\n            }\n          },\n          y2: {\n            field: 'bin_end',\n            type: 'quantitative'\n          },\n          x: {\n            field: 'count',\n            type: 'quantitative'\n          }\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      it('should draw bar with y and y2', () => {\n        expect(props.y2).toEqual({scale: 'y', field: 'bin_start'});\n        expect(props.y).toEqual({scale: 'y', field: 'bin_end', offset: 10});\n        expect(props.x).toEqual({scale: 'x', field: 'count'});\n        expect(props.x2).toEqual({scale: 'x', value: 0});\n        expect(props.width).toBeUndefined();\n      });\n    });\n  });\n});\n"]}