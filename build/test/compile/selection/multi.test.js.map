{"version":3,"file":"multi.test.js","sourceRoot":"","sources":["../../../../test/compile/selection/multi.test.ts"],"names":[],"mappings":";;;AAAA,8BAA8B;AAC9B,6BAA4B;AAE5B,uFAAyD;AACzD,0FAAsE;AACtE,mCAAmD;AAEnD,QAAQ,CAAC,iBAAiB,EAAE;IAC1B,IAAM,KAAK,GAAG,8BAAuB,CAAC;QACpC,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE;YACR,CAAC,EAAE,EAAC,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAC;YAC9C,CAAC,EAAE,EAAC,KAAK,EAAE,kBAAkB,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,EAAE,IAAI,EAAC;YAC/D,KAAK,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAC;SAC1C;KACF,CAAC,CAAC;IAEH,IAAM,QAAQ,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC,kBAAkB,CAAC,KAAK,EAAE;QAChF,GAAG,EAAE,EAAC,IAAI,EAAE,OAAO,EAAC;QACpB,GAAG,EAAE;YACH,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,IAAI;YACb,EAAE,EAAE,WAAW;YACf,MAAM,EAAE,eAAe;YACvB,SAAS,EAAE,CAAC,GAAG,EAAE,OAAO,CAAC;SAC1B;KACF,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,sBAAsB,EAAE;QACzB,IAAM,KAAK,GAAG,eAAK,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QACpD,aAAM,CAAC,eAAe,CAAC,KAAK,EAAE;YAC5B;gBACE,IAAI,EAAE,WAAW;gBACjB,KAAK,EAAE,EAAE;gBACT,EAAE,EAAE;oBACF;wBACE,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM;wBAC9B,MAAM,EACJ,iIAAiI;wBACnI,KAAK,EAAE,IAAI;qBACZ;iBACF;aACF;SACF,CAAC,CAAC;QAEH,IAAM,KAAK,GAAG,eAAK,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QACpD,aAAM,CAAC,eAAe,CAAC,KAAK,EAAE;YAC5B;gBACE,IAAI,EAAE,WAAW;gBACjB,KAAK,EAAE,EAAE;gBACT,EAAE,EAAE;oBACF;wBACE,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM;wBAC9B,MAAM,EACJ,6XAA6X;wBAC/X,KAAK,EAAE,IAAI;qBACZ;iBACF;aACF;SACF,CAAC,CAAC;QAEH,IAAM,OAAO,GAAG,SAAS,CAAC,4BAA4B,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAClE,aAAM,CAAC,kBAAkB,CAAC,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE;QACzB,IAAM,IAAI,GAAU,EAAE,CAAC;QACvB,aAAM,CAAC,eAAe,CAAC,SAAS,CAAC,yBAAyB,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE;YACvE,EAAC,IAAI,EAAE,WAAW,EAAC;YACnB,EAAC,IAAI,EAAE,WAAW,EAAC;SACpB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE;QACvB,IAAM,KAAK,GAAU,EAAE,CAAC;QACxB,KAAK,CAAC,SAAS,CAAC,SAAS,GAAG,EAAC,GAAG,EAAE,QAAQ,CAAC,KAAK,CAAC,EAAC,CAAC;QACnD,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,0BAA0B,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable quotemark */\nimport {assert} from 'chai';\n\nimport multi from '../../../src/compile/selection/multi';\nimport * as selection from '../../../src/compile/selection/selection';\nimport {parseUnitModelWithScale} from '../../util';\n\ndescribe('Multi Selection', () => {\n  const model = parseUnitModelWithScale({\n    mark: 'circle',\n    encoding: {\n      x: {field: 'Horsepower', type: 'quantitative'},\n      y: {field: 'Miles_per_Gallon', type: 'quantitative', bin: true},\n      color: {field: 'Origin', type: 'nominal'}\n    }\n  });\n\n  const selCmpts = (model.component.selection = selection.parseUnitSelection(model, {\n    one: {type: 'multi'},\n    two: {\n      type: 'multi',\n      nearest: true,\n      on: 'mouseover',\n      toggle: 'event.ctrlKey',\n      encodings: ['y', 'color']\n    }\n  }));\n\n  it('builds tuple signals', () => {\n    const oneSg = multi.signals(model, selCmpts['one']);\n    assert.sameDeepMembers(oneSg, [\n      {\n        name: 'one_tuple',\n        value: {},\n        on: [\n          {\n            events: selCmpts['one'].events,\n            update:\n              'datum && item().mark.marktype !== \\'group\\' ? {unit: \"\", encodings: [], fields: [\"_vgsid_\"], values: [datum[\"_vgsid_\"]]} : null',\n            force: true\n          }\n        ]\n      }\n    ]);\n\n    const twoSg = multi.signals(model, selCmpts['two']);\n    assert.sameDeepMembers(twoSg, [\n      {\n        name: 'two_tuple',\n        value: {},\n        on: [\n          {\n            events: selCmpts['two'].events,\n            update:\n              'datum && item().mark.marktype !== \\'group\\' ? {unit: \"\", encodings: [\"y\", \"color\"], fields: [\"Miles_per_Gallon\", \"Origin\"], values: [[(item().isVoronoi ? datum.datum : datum)[\"bin_maxbins_10_Miles_per_Gallon\"], (item().isVoronoi ? datum.datum : datum)[\"bin_maxbins_10_Miles_per_Gallon_end\"]], (item().isVoronoi ? datum.datum : datum)[\"Origin\"]], \"bin_Miles_per_Gallon\": 1} : null',\n            force: true\n          }\n        ]\n      }\n    ]);\n\n    const signals = selection.assembleUnitSelectionSignals(model, []);\n    assert.includeDeepMembers(signals, oneSg.concat(twoSg));\n  });\n\n  it('builds unit datasets', () => {\n    const data: any[] = [];\n    assert.sameDeepMembers(selection.assembleUnitSelectionData(model, data), [\n      {name: 'one_store'},\n      {name: 'two_store'}\n    ]);\n  });\n\n  it('leaves marks alone', () => {\n    const marks: any[] = [];\n    model.component.selection = {one: selCmpts['one']};\n    assert.equal(selection.assembleUnitSelectionMarks(model, marks), marks);\n  });\n});\n"]}