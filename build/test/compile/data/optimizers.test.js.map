{"version":3,"file":"optimizers.test.js","sourceRoot":"","sources":["../../../../test/compile/data/optimizers.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport {DataFlowNode} from '../../../src/compile/data/dataflow';\nimport {ImputeNode} from '../../../src/compile/data/impute';\nimport {MergeIdenticalNodes} from '../../../src/compile/data/optimizers';\nimport {Transform} from '../../../src/transform';\nimport {FilterNode} from './../../../src/compile/data/filter';\n\ndescribe('compile/data/optimizer', () => {\n  describe('mergeIdenticalNodes', () => {\n    it('should merge two impute nodes with identical transforms', () => {\n      const transform: Transform = {\n        impute: 'y',\n        key: 'x',\n        method: 'value',\n        value: 200\n      };\n      const root = new DataFlowNode(null, 'root');\n      const transform1 = new ImputeNode(root, transform);\n      // @ts-ignore\n      const transform2 = new ImputeNode(root, transform);\n      const optimizer = new MergeIdenticalNodes();\n      optimizer.run(root);\n      expect(root.children).toHaveLength(1);\n      expect(root.children[0]).toEqual(transform1);\n      expect(optimizer.mutatedFlag).toEqual(true);\n    });\n\n    it('should merge only the children that have the same transform', () => {\n      const transform: Transform = {\n        impute: 'y',\n        key: 'x',\n        method: 'value',\n        value: 200\n      };\n      const root = new DataFlowNode(null, 'root');\n      const transform1 = new ImputeNode(root, transform);\n      // @ts-ignore\n      const transform2 = new ImputeNode(root, transform);\n      const transform3 = new FilterNode(root, null, 'datum.x > 2');\n      // @ts-ignore\n      const transform4 = new FilterNode(root, null, 'datum.x > 2');\n      const optimizer = new MergeIdenticalNodes();\n      optimizer.run(root);\n      expect(root.children).toHaveLength(2);\n      expect(root.children).toEqual([transform1, transform3]);\n    });\n  });\n\n  describe('mergeNodes', () => {\n    it('should merge nodes correctly', () => {\n      const parent = new DataFlowNode(null, 'root');\n\n      const a = new DataFlowNode(parent, 'a');\n      const b = new DataFlowNode(parent, 'b');\n\n      const a1 = new DataFlowNode(a, 'a1');\n      const a2 = new DataFlowNode(a, 'a2');\n\n      const b1 = new DataFlowNode(b, 'b1');\n      const b2 = new DataFlowNode(b, 'b2');\n\n      expect(parent.children).toHaveLength(2);\n      expect(a.children).toHaveLength(2);\n      expect(b.children).toHaveLength(2);\n      const optimizer = new MergeIdenticalNodes();\n      optimizer.mergeNodes(parent, [a, b]);\n      optimizer.setMutated();\n      expect(optimizer.mutatedFlag).toEqual(true);\n      expect(parent.children).toHaveLength(1);\n      expect(a.children).toHaveLength(4);\n\n      expect(a1.parent).toBe(a);\n      expect(a2.parent).toBe(a);\n      expect(b1.parent).toBe(a);\n      expect(b2.parent).toBe(a);\n    });\n  });\n});\n"]}