{"version":3,"file":"resolve.test.js","sourceRoot":"","sources":["../../test-runtime/resolve.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {\n  brush,\n  compositeTypes,\n  embedFn,\n  hits as hitsMaster,\n  parentSelector,\n  pt,\n  resolutions,\n  selectionTypes,\n  spec,\n  testRenderFn,\n  unitNameRegex\n} from './util';\n\nselectionTypes.forEach(type => {\n  const embed = embedFn(browser);\n  const isInterval = type === 'interval';\n  const hits = isInterval ? hitsMaster.interval : hitsMaster.discrete;\n  const fn = isInterval ? brush : pt;\n\n  describe(`${type} selections at runtime`, () => {\n    compositeTypes.forEach(specType => {\n      const testRender = testRenderFn(browser, `${type}/${specType}`);\n      describe(`in ${specType} views`, () => {\n        // Loop through the views, click to add a selection instance.\n        // Store size should stay constant, but unit names should vary.\n        it('should have one global selection instance', () => {\n          const selection = {\n            type,\n            resolve: 'global',\n            ...(specType === 'facet' ? {encodings: ['y']} : {})\n          };\n\n          for (let i = 0; i < hits[specType].length; i++) {\n            embed(spec(specType, i, selection));\n            const parent = parentSelector(specType, i);\n            const store = browser.execute(fn(specType, i, parent)).value;\n            assert.lengthOf(store, 1);\n            assert.match(store[0].unit, unitNameRegex(specType, i));\n            testRender(`global_${i}`);\n\n            if (i === hits[specType].length - 1) {\n              const cleared = browser.execute(fn(`${specType}_clear`, 0, parent)).value;\n              assert.lengthOf(cleared, 0);\n              testRender(`global_clear_${i}`);\n            }\n          }\n        });\n\n        resolutions.forEach(resolve => {\n          const selection = {\n            type,\n            resolve,\n            ...(specType === 'facet' ? {encodings: ['x']} : {})\n          };\n\n          // Loop through the views, click to add selection instance and observe\n          // incrementing store size. Then, loop again but click to clear and\n          // observe decrementing store size. Check unit names in each case.\n          it(`should have one selection instance per ${resolve} view`, () => {\n            embed(spec(specType, 0, selection));\n            for (let i = 0; i < hits[specType].length; i++) {\n              const parent = parentSelector(specType, i);\n              const store = browser.execute(fn(specType, i, parent)).value;\n              assert.lengthOf(store, i + 1);\n              assert.match(store[i].unit, unitNameRegex(specType, i));\n              testRender(`${resolve}_${i}`);\n            }\n\n            embed(spec(specType, 1, {type, resolve, encodings: ['x']}));\n            for (let i = 0; i < hits[specType].length; i++) {\n              const parent = parentSelector(specType, i);\n              browser.execute(fn(specType, i, parent));\n            }\n\n            for (let i = hits[`${specType}_clear`].length - 1; i >= 0; i--) {\n              const parent = parentSelector(specType, i);\n              const store = browser.execute(fn(`${specType}_clear`, i, parent)).value;\n              assert.lengthOf(store, i);\n              if (i > 0) {\n                assert.match(store[i - 1].unit, unitNameRegex(specType, i - 1));\n              }\n              testRender(`${resolve}_clear_${i}`);\n            }\n          });\n        });\n      });\n    });\n  });\n});\n"]}