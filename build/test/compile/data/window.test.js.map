{"version":3,"file":"window.test.js","sourceRoot":"","sources":["../../../../test/compile/data/window.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {WindowTransformNode} from '../../../src/compile/data/window';\nimport {Transform} from '../../../src/transform';\nimport {DataFlowNode} from './../../../src/compile/data/dataflow';\n\ndescribe('compile/data/window', () => {\n  it('should return a proper vg transform', () => {\n    const transform: Transform = {\n      window: [\n        {\n          op: 'row_number',\n          as: 'ordered_row_number'\n        }\n      ],\n      ignorePeers: false,\n      sort: [\n        {\n          field: 'f',\n          order: 'ascending'\n        }\n      ],\n      groupby: ['f'],\n      frame: [null, 0]\n    };\n    const window = new WindowTransformNode(null, transform);\n    expect(window.assemble()).toEqual({\n      type: 'window',\n      ops: ['row_number'],\n      fields: [null],\n      params: [null],\n      sort: {\n        field: ['f'],\n        order: ['ascending']\n      },\n      ignorePeers: false,\n      as: ['ordered_row_number'],\n      frame: [null, 0],\n      groupby: ['f']\n    });\n  });\n\n  it('should augment as with default as', () => {\n    const transform: Transform = {\n      window: [\n        {\n          op: 'row_number',\n          as: undefined // intentionally omit for testing\n        }\n      ],\n      ignorePeers: false,\n      sort: [\n        {\n          field: 'f',\n          order: 'ascending'\n        }\n      ],\n      groupby: ['f'],\n      frame: [null, 0]\n    };\n    const window = new WindowTransformNode(null, transform);\n    expect(window.assemble()).toEqual({\n      type: 'window',\n      ops: ['row_number'],\n      fields: [null],\n      params: [null],\n      sort: {\n        field: ['f'],\n        order: ['ascending']\n      },\n      ignorePeers: false,\n      as: ['row_number'],\n      frame: [null, 0],\n      groupby: ['f']\n    });\n  });\n\n  it('should return a proper produced fields', () => {\n    const transform: Transform = {\n      window: [\n        {\n          op: 'row_number',\n          as: 'ordered_row_number'\n        },\n        {\n          op: 'count',\n          as: 'count_field'\n        },\n        {\n          op: 'sum',\n          as: 'sum_field'\n        }\n      ],\n      ignorePeers: false,\n      sort: [\n        {\n          field: 'f',\n          order: 'ascending'\n        }\n      ],\n      groupby: ['g'],\n      frame: [null, 0]\n    };\n    const window = new WindowTransformNode(null, transform);\n    expect(window.producedFields()).toEqual(new Set(['count_field', 'ordered_row_number', 'sum_field']));\n  });\n\n  it('should generate the correct dependent fields', () => {\n    const transform: Transform = {\n      window: [\n        {\n          op: 'row_number',\n          as: 'ordered_row_number'\n        }\n      ],\n      ignorePeers: false,\n      sort: [\n        {\n          field: 'f',\n          order: 'ascending'\n        }\n      ],\n      groupby: ['g'],\n      frame: [null, 0]\n    };\n    const window = new WindowTransformNode(null, transform);\n    expect(window.dependentFields()).toEqual(new Set(['g', 'f']));\n  });\n\n  it('should clone to an equivalent version', () => {\n    const transform: Transform = {\n      window: [\n        {\n          op: 'row_number',\n          as: 'ordered_row_number'\n        }\n      ],\n      ignorePeers: false,\n      sort: [\n        {\n          field: 'f',\n          order: 'ascending'\n        }\n      ],\n      groupby: ['f'],\n      frame: [null, 0]\n    };\n    const window = new WindowTransformNode(null, transform);\n    expect(window).toEqual(window.clone());\n  });\n\n  it('should never clone parent', () => {\n    const parent = new DataFlowNode(null);\n    const window = new WindowTransformNode(parent, null);\n    expect(window.clone().parent).toBeNull();\n  });\n\n  it('should generate the correct hash', () => {\n    const transform: Transform = {\n      window: [\n        {\n          op: 'row_number',\n          as: 'ordered_row_number'\n        }\n      ],\n      ignorePeers: false,\n      sort: [\n        {\n          field: 'f',\n          order: 'ascending'\n        }\n      ],\n      groupby: ['f'],\n      frame: [null, 0]\n    };\n    const window = new WindowTransformNode(null, transform);\n    const hash = window.hash();\n    expect(hash).toBe(\n      'WindowTransform {\"frame\":[null,0],\"groupby\":[\"f\"],\"ignorePeers\":false,\"sort\":[{\"field\":\"f\",\"order\":\"ascending\"}],\"window\":[{\"as\":\"ordered_row_number\",\"op\":\"row_number\"}]}'\n    );\n  });\n});\n"]}