{"version":3,"file":"facets.test.js","sourceRoot":"","sources":["../../../../test/compile/selection/facets.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAG9B,OAAO,EAAC,QAAQ,EAAC,MAAM,gCAAgC,CAAC;AACxD,OAAO,EAAC,oBAAoB,EAAC,MAAM,yCAAyC,CAAC;AAE7E,OAAO,EAAC,UAAU,EAAC,MAAM,YAAY,CAAC;AAEtC,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,MAAM,KAAK,GAAG,UAAU,CAAC;QACvB,IAAI,EAAE,EAAC,GAAG,EAAE,oBAAoB,EAAC;QACjC,KAAK,EAAE;YACL,MAAM,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAC;YAC1C,GAAG,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,IAAI,EAAC;SAC9C;QACD,IAAI,EAAE;YACJ,KAAK,EAAE;gBACL;oBACE,IAAI,EAAE,MAAM;oBACZ,QAAQ,EAAE,EAAC,CAAC,EAAE,EAAC,KAAK,EAAE,EAAE,EAAC,EAAC;iBAC3B;gBACD;oBACE,SAAS,EAAE;wBACT,GAAG,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC;wBACrB,GAAG,EAAE,EAAC,IAAI,EAAE,OAAO,EAAC;wBACpB,KAAK,EAAE,EAAC,IAAI,EAAE,UAAU,EAAC;qBAC1B;oBACD,IAAI,EAAE,MAAM;oBACZ,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,EAAE,EAAC;qBACf;iBACF;aACF;SACF;KACF,CAAC,CAAC;IAEH,KAAK,CAAC,KAAK,EAAE,CAAC;IACd,MAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAc,CAAC;IAExD,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACxC,MAAM,CAAC,oBAAoB,CAAC,KAAmB,EAAE,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC;YACnE,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,EAAE;YACT,EAAE,EAAE;gBACF;oBACE,MAAM,EAAE,CAAC,EAAC,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAC,CAAC;oBAC9C,MAAM,EAAE,8CAA8C;iBACvD;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAC5B,uGAAuG,CACxG,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable quotemark */\n\nimport {FacetModel} from '../../../src/compile/facet';\nimport {unitName} from '../../../src/compile/selection';\nimport {assembleFacetSignals} from '../../../src/compile/selection/assemble';\nimport {UnitModel} from '../../../src/compile/unit';\nimport {parseModel} from '../../util';\n\ndescribe('Faceted Selections', () => {\n  const model = parseModel({\n    data: {url: 'data/anscombe.json'},\n    facet: {\n      column: {field: 'Series', type: 'nominal'},\n      row: {field: 'X', type: 'nominal', bin: true}\n    },\n    spec: {\n      layer: [\n        {\n          mark: 'rule',\n          encoding: {y: {value: 10}}\n        },\n        {\n          selection: {\n            one: {type: 'single'},\n            twp: {type: 'multi'},\n            three: {type: 'interval'}\n          },\n          mark: 'rule',\n          encoding: {\n            x: {value: 10}\n          }\n        }\n      ]\n    }\n  });\n\n  model.parse();\n  const unit = model.children[0].children[1] as UnitModel;\n\n  it('should assemble a facet signal', () => {\n    expect(assembleFacetSignals(model as FacetModel, [])).toContainEqual({\n      name: 'facet',\n      value: {},\n      on: [\n        {\n          events: [{source: 'scope', type: 'mousemove'}],\n          update: 'isTuple(facet) ? facet : group(\"cell\").datum'\n        }\n      ]\n    });\n  });\n\n  it('should name the unit with the facet keys', () => {\n    expect(unitName(unit)).toEqual(\n      `\"child_layer_1\" + '__facet_row_' + (facet[\"bin_maxbins_6_X\"]) + '__facet_column_' + (facet[\"Series\"])`\n    );\n  });\n});\n"]}