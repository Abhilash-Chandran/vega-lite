{"version":3,"file":"facet.test.js","sourceRoot":"","sources":["../../../../test/compile/data/facet.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {FacetNode} from '../../../src/compile/data/facet';\nimport {parseFacetModelWithScale} from '../../util';\n\ndescribe('compile/data/facet', () => {\n  describe('assemble', () => {\n    it('should calculate column distinct if child has an independent discrete scale with step', () => {\n      const model = parseFacetModelWithScale({\n        $schema: 'https://vega.github.io/schema/vega-lite/v3.json',\n        description: 'A trellis bar chart showing the US population distribution of age groups and gender in 2000.',\n        data: {url: 'data/population.json'},\n        facet: {column: {field: 'gender', type: 'nominal'}},\n        spec: {\n          mark: 'bar',\n          encoding: {\n            y: {\n              aggregate: 'sum',\n              field: 'people',\n              type: 'quantitative',\n              axis: {title: 'population'}\n            },\n            x: {\n              field: 'age',\n              type: 'ordinal',\n              scale: {rangeStep: 17}\n            },\n            color: {\n              field: 'gender',\n              type: 'nominal',\n              scale: {range: ['#EA98D2', '#659CCA']}\n            }\n          }\n        },\n        resolve: {\n          scale: {x: 'independent'}\n        },\n        config: {view: {fill: 'yellow'}}\n      });\n\n      const node = new FacetNode(null, model, 'facetName', 'dataName');\n      const data = node.assemble();\n\n      expect(data[0]).toEqual({\n        name: 'column_domain',\n        source: 'dataName',\n        transform: [\n          {\n            type: 'aggregate',\n            groupby: ['gender'],\n            fields: ['age'],\n            ops: ['distinct'],\n            as: ['distinct_age']\n          }\n        ]\n      });\n    });\n\n    it('should calculate column and row distinct if child has an independent discrete scale with step and the facet has both row and column', () => {\n      const model = parseFacetModelWithScale({\n        $schema: 'https://vega.github.io/schema/vega-lite/v3.json',\n        data: {\n          values: [\n            {r: 'r1', c: 'c1', a: 'a1', b: 'b1'},\n            {r: 'r1', c: 'c1', a: 'a2', b: 'b2'},\n            {r: 'r2', c: 'c2', a: 'a1', b: 'b1'},\n            {r: 'r3', c: 'c2', a: 'a3', b: 'b2'}\n          ]\n        },\n        facet: {\n          row: {field: 'r', type: 'nominal'},\n          column: {field: 'c', type: 'nominal'}\n        },\n        spec: {\n          mark: 'rect',\n          encoding: {\n            y: {field: 'b', type: 'nominal'},\n            x: {field: 'a', type: 'nominal'}\n          }\n        },\n        resolve: {\n          scale: {\n            x: 'independent',\n            y: 'independent'\n          }\n        }\n      });\n\n      const node = new FacetNode(null, model, 'facetName', 'dataName');\n      const data = node.assemble();\n\n      // crossed data\n      expect(data[0]).toEqual({\n        name: 'cross_column_domain_row_domain',\n        source: 'dataName',\n        transform: [\n          {\n            type: 'aggregate',\n            groupby: ['c', 'r'],\n            fields: ['a', 'b'],\n            ops: ['distinct', 'distinct']\n          }\n        ]\n      });\n\n      expect(data[1]).toEqual({\n        name: 'column_domain',\n        source: 'cross_column_domain_row_domain',\n        transform: [\n          {\n            type: 'aggregate',\n            groupby: ['c'],\n            fields: ['distinct_a'],\n            ops: ['max'],\n            as: ['distinct_a']\n          }\n        ]\n      });\n\n      expect(data[2]).toEqual({\n        name: 'row_domain',\n        source: 'cross_column_domain_row_domain',\n        transform: [\n          {\n            type: 'aggregate',\n            groupby: ['r'],\n            fields: ['distinct_b'],\n            ops: ['max'],\n            as: ['distinct_b']\n          }\n        ]\n      });\n    });\n\n    it('should calculate column and row sort array', () => {\n      const model = parseFacetModelWithScale({\n        $schema: 'https://vega.github.io/schema/vega-lite/v3.json',\n        data: {\n          name: 'a'\n        },\n        facet: {\n          row: {field: 'r', type: 'nominal', sort: ['r1', 'r2']},\n          column: {field: 'c', type: 'nominal', sort: ['c1', 'c2']}\n        },\n        spec: {\n          mark: 'rect',\n          encoding: {\n            y: {field: 'b', type: 'quantitative'},\n            x: {field: 'a', type: 'quantitative'}\n          }\n        }\n      });\n\n      const node = new FacetNode(null, model, 'facetName', 'dataName');\n      const data = node.assemble();\n\n      expect(data[0]).toEqual({\n        name: 'column_domain',\n        source: 'dataName',\n        transform: [\n          {\n            type: 'aggregate',\n            groupby: ['c'],\n            fields: ['column_c_sort_index'],\n            ops: ['max'],\n            as: ['column_c_sort_index']\n          }\n        ]\n      });\n\n      expect(data[1]).toEqual({\n        name: 'row_domain',\n        source: 'dataName',\n        transform: [\n          {\n            type: 'aggregate',\n            groupby: ['r'],\n            fields: ['row_r_sort_index'],\n            ops: ['max'],\n            as: ['row_r_sort_index']\n          }\n        ]\n      });\n    });\n\n    it('should calculate column and row sort field', () => {\n      const model = parseFacetModelWithScale({\n        $schema: 'https://vega.github.io/schema/vega-lite/v3.json',\n        data: {\n          name: 'a'\n        },\n        facet: {\n          row: {field: 'r', type: 'nominal', sort: {op: 'median', field: 'b'}},\n          column: {field: 'c', type: 'nominal', sort: {field: 'a'}}\n        },\n        spec: {\n          mark: 'rect',\n          encoding: {\n            y: {field: 'b', type: 'quantitative'},\n            x: {field: 'a', type: 'quantitative'}\n          }\n        }\n      });\n\n      const node = new FacetNode(null, model, 'facetName', 'dataName');\n      const data = node.assemble();\n\n      expect(data[0]).toEqual({\n        name: 'column_domain',\n        source: 'dataName',\n        transform: [\n          {\n            type: 'aggregate',\n            groupby: ['c'],\n            fields: ['a'],\n            ops: ['mean'],\n            as: ['a']\n          }\n        ]\n      });\n\n      expect(data[1]).toEqual({\n        name: 'row_domain',\n        source: 'dataName',\n        transform: [\n          {\n            type: 'aggregate',\n            groupby: ['r'],\n            fields: ['b'],\n            ops: ['median'],\n            as: ['median_b']\n          }\n        ]\n      });\n    });\n  });\n\n  describe('hash', () => {\n    it('should generate the correct hash', () => {\n      const model = parseFacetModelWithScale({\n        $schema: 'https://vega.github.io/schema/vega-lite/v2.json',\n        data: {\n          name: 'a'\n        },\n        facet: {\n          row: {field: 'r', type: 'nominal', sort: {op: 'median', field: 'b'}},\n          column: {field: 'c', type: 'nominal', sort: {op: 'median', field: 'a'}}\n        },\n        spec: {\n          mark: 'rect',\n          encoding: {\n            y: {field: 'b', type: 'quantitative'},\n            x: {field: 'a', type: 'quantitative'}\n          }\n        }\n      });\n\n      const facetNode = new FacetNode(null, model, 'facetName', 'dataName');\n\n      expect(facetNode.hash()).toEqual(\n        'Facet c:{\"fields\":[\"c\"],\"name\":\"column_domain\",\"sortField\":{\"field\":\"a\",\"op\":\"median\"}} r:{\"fields\":[\"r\"],\"name\":\"row_domain\",\"sortField\":{\"field\":\"b\",\"op\":\"median\"}}'\n      );\n    });\n  });\n});\n"]}