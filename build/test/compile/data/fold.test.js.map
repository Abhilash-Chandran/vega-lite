{"version":3,"file":"fold.test.js","sourceRoot":"","sources":["../../../../test/compile/data/fold.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {FoldTransformNode} from '../../../src/compile/data/fold';\nimport {Transform} from '../../../src/transform';\nimport {DataFlowNode} from './../../../src/compile/data/dataflow';\n\ndescribe('compile/data/fold', () => {\n  it('should return a proper vg transform', () => {\n    const transform: Transform = {\n      fold: ['a', 'b'],\n      as: ['a', 'b']\n    };\n    const fold = new FoldTransformNode(null, transform);\n    expect(fold.assemble()).toEqual({\n      type: 'fold',\n      fields: ['a', 'b'],\n      as: ['a', 'b']\n    });\n  });\n\n  it('should handle missing \"as\" field', () => {\n    const transform: Transform = {\n      fold: ['a', 'b']\n    };\n\n    const fold = new FoldTransformNode(null, transform);\n    expect(fold.assemble()).toEqual({\n      type: 'fold',\n      fields: ['a', 'b'],\n      as: ['key', 'value']\n    });\n  });\n\n  it('should handle partial \"as\" field', () => {\n    const transform: Transform = {\n      fold: ['a', 'b'],\n      as: ['A'] as any\n    };\n    const fold = new FoldTransformNode(null, transform);\n    expect(fold.assemble()).toEqual({\n      type: 'fold',\n      fields: ['a', 'b'],\n      as: ['A', 'value']\n    });\n  });\n\n  it('should return proper produced fields for no \"as\"', () => {\n    const transform: Transform = {\n      fold: ['a', 'b']\n    };\n    const fold = new FoldTransformNode(null, transform);\n    expect(fold.producedFields()).toEqual(new Set(['key', 'value']));\n  });\n\n  it('should return proper produced fields for complete \"as\"', () => {\n    const transform: Transform = {\n      fold: ['a', 'b'],\n      as: ['A', 'B']\n    };\n    const fold = new FoldTransformNode(null, transform);\n    expect(fold.producedFields()).toEqual(new Set(['A', 'B']));\n  });\n\n  it('should generate the correct hash', () => {\n    const transform: Transform = {\n      fold: ['a', 'b'],\n      as: ['A', 'B']\n    };\n    const fold = new FoldTransformNode(null, transform);\n    expect(fold.hash()).toEqual('FoldTransform {\"as\":[\"A\",\"B\"],\"fold\":[\"a\",\"b\"]}');\n  });\n\n  describe('clone', () => {\n    it('should never clone parent', () => {\n      const parent = new DataFlowNode(null);\n      const fold = new FoldTransformNode(parent, {fold: ['a']});\n      expect(fold.clone().parent).toBeNull();\n    });\n  });\n});\n"]}