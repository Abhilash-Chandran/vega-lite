{"version":3,"file":"callout.test.js","sourceRoot":"","sources":["../../../test/compositemark/callout.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport {assert} from 'chai';\nimport {normalize} from '../../src/compositemark/index';\nimport {defaultConfig} from '../../src/config';\nimport {Encoding} from '../../src/encoding';\nimport {GenericUnitSpec} from '../../src/spec';\n\ndescribe(\"normalizeCallout\", () => {\n  const inputSpec: GenericUnitSpec<Encoding<any>, any> = {\n    description: \"A scatterplot showing horsepower and miles per gallons for various cars.\",\n    data: {\n      url: \"data/cars.json\"\n    },\n    transform: [\n      {filter: \"datum.Horsepower == 132\"}\n    ],\n    mark: {\n      type: \"callout\"\n    },\n    encoding: {\n      x: {\n        field: \"Horsepower\",\n        type: \"quantitative\"\n      },\n      y: {\n        field: \"Miles_per_Gallon\",\n        type: \"quantitative\"\n      },\n      text: {\n        field: \"Name\",\n        type: \"nominal\"\n      }\n    }\n  };\n\n  const normalizedSpec: any = normalize(inputSpec, defaultConfig);\n\n  it(\"should produce two layers, one for label and one for line\", () => {\n    assert.equal(normalizedSpec.layer.length, 2);\n  });\n\n  it(\"description should stay the same\", () => {\n    assert.equal(normalizedSpec.description, inputSpec.description);\n  });\n\n  it(\"data should stay the same \", () => {\n    assert.equal(normalizedSpec.data, inputSpec.data);\n  });\n\n  it(\"transform should be the same\", () => {\n    assert.equal(normalizedSpec.transform, inputSpec.transform);\n  });\n\n  it(\"callout line should have correct xOffset\", () => {\n    assert.approximately(normalizedSpec.layer[0].mark.xOffset, 0, 0.001);\n  });\n\n  it(\"callout line should have correct x2Offset\", () => {\n    // default line length = 30\n    assert.approximately(normalizedSpec.layer[0].mark.x2Offset, Math.sqrt(450), 0.001);\n  });\n\n  it(\"callout line should have correct yOffset\", () => {\n    assert.approximately(normalizedSpec.layer[0].mark.yOffset, 0, 0.001);\n  });\n\n  it(\"callout line should have correct y2Offset\", () => {\n    assert.approximately(normalizedSpec.layer[0].mark.y2Offset, -Math.sqrt(450), 0.001);\n  });\n\n  it(\"callout label should have correct xOffset\", () => {\n    // default line length = 30, label offset = 2\n    assert.approximately(normalizedSpec.layer[1].mark.xOffset, Math.sqrt(512), 0.001);\n  });\n\n  it(\"callout label should have correct yOffset\", () => {\n    assert.approximately(normalizedSpec.layer[1].mark.yOffset, -Math.sqrt(512), 0.001);\n  });\n\n  it(\"callout label encoding should stay the same\", () => {\n    assert.deepEqual(normalizedSpec.layer[1].encoding, inputSpec.encoding);\n  });\n\n  it(\"callout line encoding should have x2 and y2 channel\", () => {\n    assert.deepEqual(normalizedSpec.layer[0].encoding.x, inputSpec.encoding.x);\n    assert.deepEqual(normalizedSpec.layer[0].encoding.x2, inputSpec.encoding.x);\n    assert.deepEqual(normalizedSpec.layer[0].encoding.y, inputSpec.encoding.y);\n    assert.deepEqual(normalizedSpec.layer[0].encoding.y2, inputSpec.encoding.y);\n  });\n\n  it(\"callout line should have style callout-line\", () => {\n    assert.equal(normalizedSpec.layer[0].mark.style, \"callout-line\");\n  });\n\n  it(\"callout label should have style callout-label\", () => {\n    assert.equal(normalizedSpec.layer[1].mark.style, \"callout-label\");\n  });\n});\n\n"]}