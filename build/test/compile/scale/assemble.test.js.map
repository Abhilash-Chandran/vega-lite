{"version":3,"file":"assemble.test.js","sourceRoot":"","sources":["../../../../test/compile/scale/assemble.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assembleScaleRange, assembleScales} from '../../../src/compile/scale/assemble';\nimport {SignalRefComponent} from '../../../src/compile/signal';\nimport {\n  parseConcatModel,\n  parseFacetModelWithScale,\n  parseLayerModel,\n  parseRepeatModel,\n  parseUnitModel,\n  parseUnitModelWithScale\n} from '../../util';\n\ndescribe('compile/scale/assemble', () => {\n  describe('assembleScales', () => {\n    it('includes all scales for concat', () => {\n      const model = parseConcatModel({\n        vconcat: [\n          {\n            mark: 'point',\n            encoding: {\n              x: {field: 'a', type: 'ordinal'}\n            }\n          },\n          {\n            mark: 'bar',\n            encoding: {\n              x: {field: 'b', type: 'ordinal'},\n              y: {field: 'c', type: 'quantitative'}\n            }\n          }\n        ]\n      });\n\n      model.parseScale();\n      const scales = assembleScales(model);\n      expect(scales).toHaveLength(3);\n    });\n\n    it('includes all scales from children for layer, both shared and independent', () => {\n      const model = parseLayerModel({\n        layer: [\n          {\n            mark: 'point',\n            encoding: {\n              x: {field: 'a', type: 'quantitative'},\n              y: {field: 'c', type: 'quantitative'}\n            }\n          },\n          {\n            mark: 'point',\n            encoding: {\n              x: {field: 'b', type: 'quantitative'},\n              y: {field: 'c', type: 'quantitative'}\n            }\n          }\n        ],\n        resolve: {\n          scale: {\n            x: 'independent'\n          }\n        }\n      });\n\n      model.parseScale();\n      const scales = assembleScales(model);\n      expect(scales).toHaveLength(3); // 2 x, 1 y\n    });\n\n    it('includes all scales for repeat', () => {\n      const model = parseRepeatModel({\n        repeat: {\n          row: ['Acceleration', 'Horsepower']\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: {repeat: 'row'}, type: 'quantitative'}\n          }\n        }\n      });\n\n      model.parseScale();\n      const scales = assembleScales(model);\n      expect(scales).toHaveLength(2);\n    });\n\n    it('includes shared scales, but not independent scales (as they are nested) for facet.', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {field: 'a', type: 'quantitative', format: 'd'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        },\n        resolve: {\n          scale: {x: 'independent'}\n        }\n      });\n\n      const scales = assembleScales(model);\n      expect(scales).toHaveLength(1);\n      expect(scales[0].name).toEqual('y');\n    });\n  });\n\n  describe('assembleScaleRange', () => {\n    it('replaces a range step constant with a signal', () => {\n      const model = parseUnitModel({\n        mark: 'point',\n        encoding: {\n          x: {field: 'x', type: 'nominal'}\n        }\n      });\n\n      expect(assembleScaleRange({step: 21}, 'x', model, 'x')).toEqual({step: {signal: 'x_step'}});\n    });\n\n    it('updates width signal when renamed.', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          x: {field: 'x', type: 'quantitative'}\n        }\n      });\n\n      // mock renaming\n      model.renameSignal('width', 'new_width');\n\n      expect(assembleScaleRange([0, SignalRefComponent.fromName('width')], 'x', model, 'x')).toEqual([\n        0,\n        {signal: 'new_width'}\n      ]);\n    });\n\n    it('updates height signal when renamed.', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          x: {field: 'y', type: 'quantitative'}\n        }\n      });\n\n      // mock renaming\n      model.renameSignal('height', 'new_height');\n\n      expect(assembleScaleRange([0, SignalRefComponent.fromName('height')], 'x', model, 'x')).toEqual([\n        0,\n        {signal: 'new_height'}\n      ]);\n    });\n  });\n});\n"]}