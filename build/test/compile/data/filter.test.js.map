{"version":3,"file":"filter.test.js","sourceRoot":"","sources":["../../../../test/compile/data/filter.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {AncestorParse} from '../../../src/compile/data';\nimport {DataFlowNode} from '../../../src/compile/data/dataflow';\nimport {FilterNode} from '../../../src/compile/data/filter';\nimport {ParseNode} from '../../../src/compile/data/formatparse';\nimport {parseTransformArray} from '../../../src/compile/data/parse';\nimport {Dict} from '../../../src/util';\nimport {parseUnitModel} from '../../util';\n\ndescribe('compile/data/filter', () => {\n  it('should create parse for filtered fields', () => {\n    const model = parseUnitModel({\n      data: {url: 'a.json'},\n      transform: [\n        {filter: {field: 'a', equal: {year: 2000}}},\n        {filter: {field: 'b', oneOf: ['a', 'b']}},\n        {filter: {field: 'c', range: [{year: 2000}, {year: 2001}]}},\n        {filter: {field: 'd', range: [1, 2]}}\n      ],\n      mark: 'point',\n      encoding: {}\n    });\n\n    let parse: Dict<string> = {};\n\n    // extract the parse from the parse nodes that were generated along with the filter nodes\n    const root = new DataFlowNode(null);\n    parseTransformArray(root, model, new AncestorParse());\n    let node = root.children[0];\n\n    while (node.numChildren() > 0) {\n      if (node instanceof ParseNode) {\n        parse = {...parse, ...node.parse};\n      }\n      expect(node.numChildren()).toBe(1);\n      node = node.children[0];\n    }\n\n    expect(parse).toEqual({\n      a: 'date',\n      b: 'string',\n      c: 'date',\n      d: 'number'\n    });\n  });\n\n  describe('dependentFields and producedFields', () => {\n    it('returns the right fields', () => {\n      const node = new FilterNode(null, null, 'datum.foo > 2');\n\n      expect(node.dependentFields()).toEqual(new Set(['foo']));\n      expect(node.producedFields()).toEqual(new Set());\n    });\n  });\n\n  describe('hash', () => {\n    it('should generate the correct hash', () => {\n      const filterNode = new FilterNode(null, null, {field: 'a', equal: {year: 2000}});\n      expect(filterNode.hash()).toEqual('Filter datum[\"a\"]===time(datetime(2000, 0, 1, 0, 0, 0, 0))');\n    });\n  });\n\n  describe('clone', () => {\n    it('should never clone parent', () => {\n      const parent = new DataFlowNode(null);\n      const filter = new FilterNode(parent, null, 'false');\n      expect(filter.clone().parent).toBeNull();\n    });\n  });\n});\n"]}