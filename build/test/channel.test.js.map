{"version":3,"file":"channel.test.js","sourceRoot":"","sources":["../../test/channel.test.ts"],"names":[],"mappings":";;AAAA,6BAA4B;AAC5B,0CAA8E;AAC9E,0CAAmG;AACnG,oCAAoC;AAEpC,QAAQ,CAAC,SAAS,EAAE;IAClB,QAAQ,CAAC,eAAe,EAAE;QACxB,EAAE,CAAC,2CAA2C,EAAE;YAC9C,aAAM,CAAC,SAAS,CAAC,uBAAa,EAAE,cAAO,CAAC,kBAAQ,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE;QAC9B,EAAE,CAAC,6CAA6C,EAAE;YAChD,aAAM,CAAC,SAAS,CAAC,6BAAmB,EAAE,cAAO,CAAC,kBAAQ,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE;QACzB,EAAE,CAAC,6EAA6E,EAAE;YAChF,aAAM,CAAC,SAAS,CAAC,wBAAc,EAAE,cAAO,CAAC,uBAAa,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;QAC3L,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE;QACrC,EAAE,CAAC,+CAA+C,EAAE;YAClD,aAAM,CAAC,SAAS,CAAC,oCAA0B,EAAE,cAAO,CAAC,wBAAc,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;QACpF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE;QACzB,EAAE,CAAC,0CAA0C,EAAE;YAC7C,KAAsB,UAAc,EAAd,mBAAA,wBAAc,EAAd,4BAAc,EAAd,IAAc,EAAE;gBAAjC,IAAM,OAAO,uBAAA;gBAChB,aAAM,CAAC,wBAAc,CAAC,OAAO,CAAC,CAAC,CAAC;aACjC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE;QACpB,EAAE,CAAC,gDAAgD,EAAE;oCACxC,CAAC;gBACV,aAAM,CAAC,YAAY,CAAC;oBAClB,mBAAS,CAAC,CAAC,CAAC,CAAC;gBACf,CAAC,CAAC,CAAC;YACL,CAAC;YAJD,KAAgB,UAAQ,EAAR,aAAA,kBAAQ,EAAR,sBAAQ,EAAR,IAAQ;gBAAnB,IAAM,CAAC,iBAAA;wBAAD,CAAC;aAIX;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {assert} from 'chai';\nimport {isScaleChannel, rangeType, SINGLE_DEF_CHANNELS} from '../src/channel';\nimport {CHANNELS, NONPOSITION_SCALE_CHANNELS, SCALE_CHANNELS, UNIT_CHANNELS} from '../src/channel';\nimport {without} from '../src/util';\n\ndescribe('channel', () => {\n  describe('UNIT_CHANNELS', () => {\n    it('should be CHANNELS without row and column', () => {\n      assert.deepEqual(UNIT_CHANNELS, without(CHANNELS, ['row', 'column']));\n    });\n  });\n\n  describe('SINGLE_DEF_CHANNELS', () => {\n    it('should be CHANNELS without detail and order', () => {\n      assert.deepEqual(SINGLE_DEF_CHANNELS, without(CHANNELS, ['detail', 'order']));\n    });\n  });\n\n  describe('SCALE_CHANNELS', () => {\n    it('should be UNIT_CHANNELS without X2, Y2, ORDER, DETAIL, TEXT, LABEL, TOOLTIP', () => {\n      assert.deepEqual(SCALE_CHANNELS, without(UNIT_CHANNELS, ['x2', 'y2', 'latitude', 'longitude', 'latitude2', 'longitude2', 'order', 'detail', 'key', 'text', 'label', 'tooltip', 'href']));\n    });\n  });\n\n  describe('NONPOSITION_SCALE_CHANNELS', () => {\n    it('should be SCALE_CHANNELS without x, y, x2, y2', () => {\n      assert.deepEqual(NONPOSITION_SCALE_CHANNELS, without(SCALE_CHANNELS, ['x', 'y']));\n    });\n  });\n\n  describe('isScaleChannel', () => {\n    it('should return true for all scale channel', () => {\n      for (const channel of SCALE_CHANNELS) {\n        assert(isScaleChannel(channel));\n      }\n    });\n  });\n\n  describe('rangeType', () => {\n    it('should be defined for all channels (no error).', () => {\n      for (const c of CHANNELS) {\n        assert.doesNotThrow(() => {\n          rangeType(c);\n        });\n      }\n    });\n  });\n});\n"]}