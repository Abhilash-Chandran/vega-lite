{"version":3,"file":"discrete.test.js","sourceRoot":"","sources":["../../test-runtime/discrete.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {SELECTION_ID} from '../src/selection';\nimport {fill} from '../src/util';\nimport {embedFn, hits as hitsMaster, pt, spec, testRenderFn} from './util';\n\n['single', 'multi'].forEach(type => {\n  describe(`${type} selections at runtime in unit views`, () => {\n    const hits = hitsMaster.discrete;\n    const embed = embedFn(browser);\n    const testRender = testRenderFn(browser, `${type}/unit`);\n\n    it('should add values to the store', () => {\n      for (let i = 0; i < hits.qq.length; i++) {\n        embed(spec('unit', i, {type}));\n        const store = browser.execute(pt('qq', i)).value;\n        assert.lengthOf(store, 1);\n        assert.lengthOf(store[0].fields, 1);\n        assert.lengthOf(store[0].values, 1);\n        assert.equal(store[0].fields[0].field, SELECTION_ID);\n        assert.equal(store[0].fields[0].type, 'E');\n        testRender(`click_${i}`);\n      }\n    });\n\n    it('should respect projections', () => {\n      let values: number[][] = [];\n      let encodings: string[] = [];\n      let fields: string[] = [];\n      const test = (emb: (i: number) => void) => {\n        for (let i = 0; i < hits.qq.length; i++) {\n          emb(i);\n          const store = browser.execute(pt('qq', i)).value;\n          assert.lengthOf(store, 1);\n          assert.lengthOf(store[0].fields, fields.length);\n          assert.lengthOf(store[0].values, fields.length);\n          assert.deepEqual(store[0].fields.map((f: any) => f.field), fields);\n          assert.deepEqual(store[0].fields.map((f: any) => f.type), fill('E', fields.length));\n          assert.deepEqual(store[0].values, values[i]);\n          testRender(`${encodings}_${fields}_${i}`);\n        }\n      };\n\n      encodings = ['x', 'color'];\n      fields = ['a', 'c'];\n      values = [[2, 1], [6, 0]];\n      test((i: number) => embed(spec('unit', i, {type, encodings})));\n\n      encodings = [];\n      fields = ['c', 'a', 'b'];\n      values = [[1, 2, 53], [0, 6, 87]];\n      test((i: number) => embed(spec('unit', i, {type, fields})));\n    });\n\n    it('should clear out the store', () => {\n      for (let i = 0; i < hits.qq_clear.length; i++) {\n        embed(spec('unit', i, {type}));\n        let store = browser.execute(pt('qq', i)).value;\n        assert.lengthOf(store, 1);\n\n        store = browser.execute(pt('qq_clear', i)).value;\n        assert.lengthOf(store, 0);\n        testRender(`clear_${i}`);\n      }\n    });\n\n    it('should support selecting bins', () => {\n      const encodings = ['x', 'color', 'y'];\n      const fields = ['a', 'c', 'b'];\n      const types = ['R-RE', 'E', 'R-RE'];\n      const values = [[[1, 2], 0, [40, 50]], [[8, 9], 1, [10, 20]]];\n\n      for (let i = 0; i < hits.bins.length; i++) {\n        embed(spec('unit', i, {type, encodings}, {x: {bin: true}, y: {bin: true}}));\n        const store = browser.execute(pt('bins', i)).value;\n        assert.lengthOf(store, 1);\n        assert.lengthOf(store[0].fields, fields.length);\n        assert.lengthOf(store[0].values, fields.length);\n        assert.sameMembers(store[0].fields.map((f: any) => f.field), fields);\n        assert.sameMembers(store[0].fields.map((f: any) => f.type), types);\n        assert.sameDeepMembers(store[0].values, values[i]);\n        testRender(`bins_${i}`);\n      }\n    });\n  });\n});\n"]}