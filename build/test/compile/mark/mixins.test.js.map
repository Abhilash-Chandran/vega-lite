{"version":3,"file":"mixins.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/mixins.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {X, Y} from '../../../src/channel';\nimport {binPosition, color, nonPosition, pointPosition, tooltip} from '../../../src/compile/mark/mixins';\nimport {TypedFieldDef} from '../../../src/fielddef';\nimport * as log from '../../../src/log';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('compile/mark/mixins', () => {\n  describe('color()', () => {\n    it('color should be mapped to fill for bar', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'bar',\n        encoding: {\n          x: {\n            field: 'gender',\n            type: 'nominal',\n            scale: {rangeStep: 6},\n            axis: null\n          },\n          color: {\n            field: 'gender',\n            type: 'nominal',\n            scale: {range: ['#EA98D2', '#659CCA']}\n          }\n        },\n        data: {url: 'data/population.json'}\n      });\n\n      const colorMixins = color(model);\n      expect(colorMixins.fill).toEqual({field: 'gender', scale: 'color'});\n    });\n\n    it('color should be mapped to stroke for point', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          x: {\n            field: 'gender',\n            type: 'nominal',\n            scale: {rangeStep: 6},\n            axis: null\n          },\n          color: {\n            field: 'gender',\n            type: 'nominal',\n            scale: {range: ['#EA98D2', '#659CCA']}\n          }\n        },\n        data: {url: 'data/population.json'}\n      });\n\n      const colorMixins = color(model);\n      expect(colorMixins.stroke).toEqual({field: 'gender', scale: 'color'});\n      expect(colorMixins.fill['value']).toBe('transparent');\n    });\n\n    it('add transparent fill when stroke is encoded', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          x: {\n            field: 'gender',\n            type: 'nominal',\n            scale: {rangeStep: 6},\n            axis: null\n          },\n          stroke: {\n            field: 'gender',\n            type: 'nominal',\n            scale: {range: ['#EA98D2', '#659CCA']}\n          }\n        },\n        data: {url: 'data/population.json'}\n      });\n\n      const colorMixins = color(model);\n      expect(colorMixins.stroke).toEqual({field: 'gender', scale: 'stroke'});\n      expect(colorMixins.fill['value']).toBe('transparent');\n    });\n\n    it(\n      'ignores color if fill is specified',\n      log.wrap(logger => {\n        const model = parseUnitModelWithScaleAndLayoutSize({\n          mark: 'point',\n          encoding: {\n            x: {\n              field: 'gender',\n              type: 'nominal',\n              scale: {rangeStep: 6},\n              axis: null\n            },\n            fill: {\n              field: 'gender',\n              type: 'nominal',\n              scale: {range: ['#EA98D2', '#659CCA']}\n            },\n            color: {\n              field: 'gender',\n              type: 'nominal',\n              scale: {range: ['#EA98D2', '#659CCA']}\n            }\n          },\n          data: {url: 'data/population.json'}\n        });\n\n        const colorMixins = color(model);\n        expect(colorMixins.stroke).not.toBeDefined();\n        expect(colorMixins.fill).toEqual({field: 'gender', scale: 'fill'});\n        expect(logger.warns[0]).toEqual(log.message.droppingColor('encoding', {fill: true}));\n      })\n    );\n\n    it(\n      'ignores color property if fill is specified',\n      log.wrap(logger => {\n        const model = parseUnitModelWithScaleAndLayoutSize({\n          mark: {type: 'point', color: 'red'},\n          encoding: {\n            x: {\n              field: 'gender',\n              type: 'nominal',\n              scale: {rangeStep: 6},\n              axis: null\n            },\n            fill: {\n              field: 'gender',\n              type: 'nominal',\n              scale: {range: ['#EA98D2', '#659CCA']}\n            }\n          },\n          data: {url: 'data/population.json'}\n        });\n\n        const colorMixins = color(model);\n        expect(colorMixins.stroke).not.toBeDefined();\n        expect(colorMixins.fill).toEqual({field: 'gender', scale: 'fill'});\n        expect(logger.warns[0]).toEqual(log.message.droppingColor('property', {fill: true}));\n      })\n    );\n\n    it(\n      'should apply stroke property over color property',\n      log.wrap(logger => {\n        const model = parseUnitModelWithScaleAndLayoutSize({\n          mark: {type: 'point', color: 'red', stroke: 'blue'},\n          encoding: {\n            x: {field: 'Horsepower', type: 'quantitative'},\n            y: {field: 'Miles_per_Gallon', type: 'quantitative'}\n          }\n        });\n        const props = color(model);\n        expect(props.stroke).toEqual({value: 'blue'});\n        expect(logger.warns[0]).toEqual(log.message.droppingColor('property', {stroke: true}));\n      })\n    );\n\n    it(\n      'should apply ignore color property when fill is specified',\n      log.wrap(logger => {\n        const model = parseUnitModelWithScaleAndLayoutSize({\n          mark: {type: 'point', color: 'red', fill: 'blue'},\n          encoding: {\n            x: {field: 'Horsepower', type: 'quantitative'},\n            y: {field: 'Miles_per_Gallon', type: 'quantitative'}\n          }\n        });\n        const props = color(model);\n        expect(props.stroke).not.toBeDefined();\n        expect(logger.warns[0]).toEqual(log.message.droppingColor('property', {fill: true}));\n      })\n    );\n\n    it('should apply color property', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: {type: 'point', color: 'red'},\n        encoding: {\n          x: {field: 'Horsepower', type: 'quantitative'},\n          y: {field: 'Miles_per_Gallon', type: 'quantitative'}\n        }\n      });\n      const props = color(model);\n      expect(props.stroke).toEqual({value: 'red'});\n    });\n\n    it('should apply color from mark-specific config over general mark config', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          x: {field: 'Horsepower', type: 'quantitative'},\n          y: {field: 'Miles_per_Gallon', type: 'quantitative'}\n        },\n        config: {mark: {color: 'blue'}, point: {color: 'red'}}\n      });\n      const props = color(model);\n      expect(props.stroke).toEqual({value: 'red'});\n    });\n\n    it('should apply stroke mark config over color mark config', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          x: {field: 'Horsepower', type: 'quantitative'},\n          y: {field: 'Miles_per_Gallon', type: 'quantitative'}\n        },\n        config: {mark: {color: 'red', stroke: 'blue'}}\n      });\n      const props = color(model);\n      expect(props.stroke).toEqual({value: 'blue'});\n    });\n\n    it('should apply stroke mark config over color mark config', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          x: {field: 'Horsepower', type: 'quantitative'},\n          y: {field: 'Miles_per_Gallon', type: 'quantitative'}\n        },\n        config: {point: {color: 'red', stroke: 'blue'}}\n      });\n      const props = color(model);\n      expect(props.stroke).toEqual({value: 'blue'});\n    });\n  });\n\n  describe('tooltip()', () => {\n    it('generates tooltip object signal for an array of tooltip fields', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          tooltip: [{field: 'Horsepower', type: 'quantitative'}, {field: 'Acceleration', type: 'quantitative'}]\n        }\n      });\n      const props = tooltip(model);\n      expect(props.tooltip).toEqual({\n        signal: '{\"Horsepower\": format(datum[\"Horsepower\"], \"\"), \"Acceleration\": format(datum[\"Acceleration\"], \"\")}'\n      });\n    });\n\n    it('generates tooltip object signal for all encoding fields', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          x: {field: 'Horsepower', type: 'quantitative'},\n          y: {field: 'Acceleration', type: 'quantitative'}\n        }\n      });\n      const props = tooltip(model);\n      expect(props.tooltip).toEqual({\n        signal: '{\"Horsepower\": format(datum[\"Horsepower\"], \"\"), \"Acceleration\": format(datum[\"Acceleration\"], \"\")}'\n      });\n    });\n\n    it('generates no tooltip if encoding.tooltip === null', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          x: {field: 'Horsepower', type: 'quantitative'},\n          y: {field: 'Acceleration', type: 'quantitative'},\n          tooltip: null\n        }\n      });\n      const props = tooltip(model);\n      expect(props.tooltip).toEqual(undefined);\n    });\n\n    it('generates tooltip object signal for all data if specified', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: {type: 'point', tooltip: {content: 'data'}},\n        encoding: {\n          x: {field: 'Horsepower', type: 'quantitative'},\n          y: {field: 'Acceleration', type: 'quantitative'}\n        }\n      });\n      const props = tooltip(model);\n      expect(props.tooltip).toEqual({signal: 'datum'});\n    });\n\n    it('priorizes tooltip field def', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: {type: 'point', tooltip: {content: 'data'}},\n        encoding: {\n          x: {field: 'Cylinders', type: 'quantitative'},\n          y: {field: 'Displacement', type: 'quantitative'},\n          tooltip: [{field: 'Horsepower', type: 'quantitative'}, {field: 'Acceleration', type: 'quantitative'}]\n        }\n      });\n      const props = tooltip(model);\n      expect(props.tooltip).toEqual({\n        signal: '{\"Horsepower\": format(datum[\"Horsepower\"], \"\"), \"Acceleration\": format(datum[\"Acceleration\"], \"\")}'\n      });\n    });\n\n    it('priorizes tooltip value def', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: {type: 'point', tooltip: {content: 'data'}},\n        encoding: {\n          x: {field: 'Cylinders', type: 'quantitative'},\n          y: {field: 'Displacement', type: 'quantitative'},\n          tooltip: {value: 'haha'}\n        }\n      });\n      const props = tooltip(model);\n      expect(props.tooltip).toEqual({value: 'haha'});\n    });\n\n    it('generates correct keys and values for channels with axis', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: {type: 'point'},\n        encoding: {\n          x: {field: 'Date', type: 'quantitative', axis: {title: 'foo', format: '%y'}},\n          y: {field: 'Displacement', type: 'quantitative', axis: {title: 'bar'}}\n        }\n      });\n      const props = tooltip(model);\n      expect(props.tooltip).toEqual({\n        signal: '{\"foo\": format(datum[\"Date\"], \"%y\"), \"bar\": format(datum[\"Displacement\"], \"\")}'\n      });\n    });\n\n    it('generates correct keys and values for channels with legends', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: {type: 'point'},\n        encoding: {\n          color: {field: 'Foobar', type: 'nominal', legend: {title: 'baz', format: 's'}}\n        }\n      });\n      const props = tooltip(model);\n      expect(props.tooltip).toEqual({\n        signal: '{\"baz\": \\'\\'+datum[\"Foobar\"]}'\n      });\n    });\n  });\n\n  describe('midPoint()', () => {\n    it('should return correctly for lat/lng', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {\n          url: 'data/zipcodes.csv',\n          format: {\n            type: 'csv'\n          }\n        },\n        mark: 'point',\n        encoding: {\n          longitude: {\n            field: 'longitude',\n            type: 'quantitative'\n          },\n          latitude: {\n            field: 'latitude',\n            type: 'quantitative'\n          }\n        }\n      });\n\n      [X, Y].forEach(channel => {\n        const mixins = pointPosition(channel, model, 'zeroOrMin');\n        expect(mixins[channel].field).toEqual(model.getName(channel));\n      });\n    });\n  });\n\n  describe('nonPosition', () => {\n    it('respects default value for a particular channel', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/cars.json'},\n        mark: 'point',\n        encoding: {\n          x: {\n            field: 'Acceleration',\n            type: 'quantitative'\n          },\n          y: {\n            field: 'Horsepower',\n            type: 'quantitative'\n          }\n        }\n      });\n\n      const mixins = nonPosition('opacity', model);\n      expect(mixins.opacity).toEqual({value: 0.7});\n    });\n  });\n\n  describe('binPosition', () => {\n    it(\n      'generates warning for invalid binned spec without x2',\n      log.wrap(logger => {\n        const fieldDef: TypedFieldDef<string> = {field: 'bin_start', bin: 'binned', type: 'quantitative'};\n        const props = binPosition(fieldDef, undefined, 'x', undefined, undefined, undefined);\n        expect(props).not.toBeDefined();\n        expect(logger.warns[0]).toEqual(log.message.channelRequiredForBinned('x2'));\n      })\n    );\n\n    it(\n      'generates warning for invalid binned spec without y2',\n      log.wrap(logger => {\n        const fieldDef: TypedFieldDef<string> = {field: 'bin_start', bin: 'binned', type: 'quantitative'};\n        const props = binPosition(fieldDef, undefined, 'y', undefined, undefined, undefined);\n        expect(props).not.toBeDefined();\n        expect(logger.warns[0]).toEqual(log.message.channelRequiredForBinned('y2'));\n      })\n    );\n  });\n});\n"]}