{"version":3,"file":"zoom.test.js","sourceRoot":"","sources":["../../test-runtime/zoom.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {bound, brush, compositeTypes, embedFn, parentSelector, spec, testRenderFn, tuples, unbound} from './util';\n\nconst hits = {\n  zoom: [9, 23],\n  bins: [8, 2]\n};\n\ntype InOut = 'in' | 'out';\n\nfunction zoom(key: string, idx: number, direction: InOut, parent?: string, targetBrush?: boolean) {\n  const delta = direction === 'out' ? 200 : -200;\n  return `return zoom(${hits[key][idx]}, ${delta}, ${parent}, ${targetBrush})`;\n}\n\nconst cmp = (a: number, b: number) => a - b;\n\n[bound, unbound].forEach(bind => {\n  describe(`Zoom ${bind} interval selections at runtime`, () => {\n    const type = 'interval';\n    const embed = embedFn(browser);\n    const testRender = testRenderFn(browser, `interval/zoom/${bind}`);\n    const binding = bind === bound ? {bind: 'scales'} : {};\n\n    const assertExtent = {\n      in: ['isAtLeast', 'isAtMost'],\n      out: ['isAtMost', 'isAtLeast']\n    };\n\n    function setup(brushKey: string, idx: number, encodings: string[], parent?: string) {\n      const inOut: InOut = idx % 2 ? 'out' : 'in';\n      let xold: number[];\n      let yold: number[];\n\n      if (bind === unbound) {\n        const drag = browser.execute(brush(brushKey, idx, parent)).value[0];\n        xold = drag.intervals[0].extent.sort(cmp);\n        yold = encodings.indexOf('y') >= 0 ? drag.intervals[encodings.indexOf('x') + 1].extent.sort(cmp) : null;\n      } else {\n        xold = JSON.parse(browser.execute('return JSON.stringify(view._runtime.scales.x.value.domain())').value);\n        yold = browser.execute('return view._runtime.scales.y.value.domain()').value;\n      }\n\n      return {inOut, xold, yold};\n    }\n\n    it('should zoom in and out', () => {\n      for (let i = 0; i < hits.zoom.length; i++) {\n        embed(spec('unit', i, {type, ...binding}));\n        const {inOut, xold, yold} = setup('drag', i, ['x', 'y']);\n        testRender(`${inOut}-0`);\n\n        const zoomed = browser.execute(zoom('zoom', i, inOut, null, bind === unbound)).value[0];\n        const xnew = zoomed.intervals[0].extent.sort(cmp);\n        const ynew = zoomed.intervals[1].extent.sort(cmp);\n        testRender(`${inOut}-1`);\n        assert[assertExtent[inOut][0]](xnew[0], xold[0]);\n        assert[assertExtent[inOut][1]](xnew[1], xold[1]);\n        assert[assertExtent[inOut][0]](ynew[0], yold[0]);\n        assert[assertExtent[inOut][1]](ynew[1], yold[1]);\n      }\n    });\n\n    it('should work with binned domains', () => {\n      for (let i = 0; i < hits.bins.length; i++) {\n        const encodings = ['y'];\n        embed(\n          spec(\n            'unit',\n            1,\n            {type, ...binding, encodings},\n            {\n              x: {aggregate: 'count', field: '*', type: 'quantitative'},\n              y: {bin: true},\n              color: {value: 'steelblue', field: null, type: null}\n            }\n          )\n        );\n\n        const {inOut, yold} = setup('bins', i, encodings);\n        testRender(`bins_${inOut}-0`);\n\n        const zoomed = browser.execute(zoom('bins', i, inOut, null, bind === unbound)).value[0];\n        const ynew = zoomed.intervals[0].extent.sort(cmp);\n        assert[assertExtent[inOut][0]](ynew[0], yold[0]);\n        assert[assertExtent[inOut][1]](ynew[1], yold[1]);\n        testRender(`bins_${inOut}-1`);\n      }\n    });\n\n    it('should work with temporal domains', () => {\n      const values = tuples.map(d => ({...d, a: new Date(2017, d.a)}));\n      const encodings = ['x'];\n\n      for (let i = 0; i < hits.zoom.length; i++) {\n        embed(spec('unit', i, {type, ...binding, encodings}, {values, x: {type: 'temporal'}}));\n        const {inOut, xold} = setup('drag', i, encodings);\n        testRender(`temporal_${inOut}-0`);\n\n        const zoomed = browser.execute(zoom('zoom', i, inOut, null, bind === unbound)).value[0];\n        const xnew = zoomed.intervals[0].extent.sort(cmp);\n        assert[assertExtent[inOut][0]](+xnew[0], +new Date(xold[0]));\n        assert[assertExtent[inOut][1]](+xnew[1], +new Date(xold[1]));\n        testRender(`temporal_${inOut}-1`);\n      }\n    });\n\n    it('should work with log/pow scales', () => {\n      for (let i = 0; i < hits.zoom.length; i++) {\n        embed(\n          spec(\n            'unit',\n            i,\n            {type, ...binding},\n            {\n              x: {scale: {type: 'pow', exponent: 1.5}},\n              y: {scale: {type: 'log'}}\n            }\n          )\n        );\n        const {inOut, xold, yold} = setup('drag', i, ['x', 'y']);\n        testRender(`logpow_${inOut}-0`);\n\n        const zoomed = browser.execute(zoom('zoom', i, inOut, null, bind === unbound)).value[0];\n        const xnew = zoomed.intervals[0].extent.sort(cmp);\n        const ynew = zoomed.intervals[1].extent.sort(cmp);\n        assert[assertExtent[inOut][0]](xnew[0], xold[0]);\n        assert[assertExtent[inOut][1]](xnew[1], xold[1]);\n        assert[assertExtent[inOut][0]](ynew[0], yold[0]);\n        assert[assertExtent[inOut][1]](ynew[1], yold[1]);\n        testRender(`logpow_${inOut}-1`);\n      }\n    });\n\n    if (bind === unbound) {\n      it('should work with ordinal/nominal domains', () => {\n        for (let i = 0; i < hits.zoom.length; i++) {\n          embed(\n            spec(\n              'unit',\n              i,\n              {type, ...binding},\n              {\n                x: {type: 'ordinal'},\n                y: {type: 'nominal'}\n              }\n            )\n          );\n          const {inOut, xold, yold} = setup('drag', i, ['x', 'y']);\n          testRender(`ord_${inOut}-0`);\n\n          const zoomed = browser.execute(zoom('zoom', i, inOut, null, bind === unbound)).value[0];\n          const xnew = zoomed.intervals[0].extent.sort(cmp);\n          const ynew = zoomed.intervals[1].extent.sort(cmp);\n\n          if (inOut === 'in') {\n            assert.isAtMost(xnew.length, xold.length);\n            assert.isAtMost(ynew.length, yold.length);\n          } else {\n            assert.isAtLeast(xnew.length, xold.length);\n            assert.isAtLeast(ynew.length, yold.length);\n          }\n\n          testRender(`ord_${inOut}-1`);\n        }\n      });\n    } else {\n      compositeTypes.forEach(specType => {\n        it(`should work with shared scales in ${specType} views`, () => {\n          for (let i = 0; i < hits.bins.length; i++) {\n            embed(spec(specType, 0, {type, ...binding}, {resolve: {scale: {x: 'shared', y: 'shared'}}}));\n            const parent = parentSelector(specType, i);\n            const {inOut, xold, yold} = setup(specType, i, ['x', 'y'], parent);\n            const zoomed = browser.execute(zoom('bins', i, inOut, null, bind === unbound)).value[0];\n            const xnew = zoomed.intervals[0].extent.sort(cmp);\n            const ynew = zoomed.intervals[1].extent.sort(cmp);\n            assert[assertExtent[inOut][0]](xnew[0], xold[0]);\n            assert[assertExtent[inOut][1]](xnew[1], xold[1]);\n            assert[assertExtent[inOut][0]](ynew[0], yold[0]);\n            assert[assertExtent[inOut][1]](ynew[1], yold[1]);\n            testRender(`${specType}_${inOut}`);\n          }\n        });\n      });\n    }\n  });\n});\n"]}