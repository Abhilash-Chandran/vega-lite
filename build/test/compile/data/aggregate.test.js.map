{"version":3,"file":"aggregate.test.js","sourceRoot":"","sources":["../../../../test/compile/data/aggregate.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {AggregateNode} from '../../../src/compile/data/aggregate';\nimport {AggregateTransform} from '../../../src/transform';\nimport {internalField} from '../../../src/util';\nimport {parseUnitModel} from '../../util';\nimport {DataFlowNode} from './../../../src/compile/data/dataflow';\n\ndescribe('compile/data/aggregate', () => {\n  describe('clone', () => {\n    it('should have correct type', () => {\n      const agg = new AggregateNode(null, new Set(), {});\n      expect(agg instanceof AggregateNode).toBeTruthy();\n      const clone = agg.clone();\n      expect(clone instanceof AggregateNode).toBeTruthy();\n    });\n\n    it('should have made a deep copy', () => {\n      const agg = new AggregateNode(null, new Set(['foo']), {});\n      const clone = agg.clone();\n      clone.addDimensions(['bar']);\n      expect(clone.dependentFields()).toEqual(new Set(['foo', 'bar']));\n      expect(agg.dependentFields()).toEqual(new Set(['foo']));\n    });\n\n    it('should never clone parent', () => {\n      const parent = new DataFlowNode(null);\n      const aggregate = new AggregateNode(parent, new Set(), {});\n      expect(aggregate.clone().parent).toBeNull();\n    });\n  });\n\n  describe('hash', () => {\n    it('should generate the correct hash', () => {\n      const model = parseUnitModel({\n        mark: 'point',\n        encoding: {\n          y: {\n            aggregate: 'sum',\n            field: 'Acceleration',\n            type: 'quantitative'\n          },\n          x: {\n            field: 'Origin',\n            type: 'ordinal'\n          },\n          color: {type: 'quantitative', aggregate: 'count'}\n        }\n      });\n\n      const agg = AggregateNode.makeFromEncoding(null, model);\n      expect(agg.hash()).toBe(\n        `Aggregate {\"dimensions\":\"Set(\\\\\"Origin\\\\\")\",\"measures\":{\"*\":{\"count\":\"Set(\\\\\"${internalField(\n          'count'\n        )}\\\\\")\"},\"Acceleration\":{\"sum\":\"Set(\\\\\"sum_Acceleration\\\\\")\"}}}`\n      );\n    });\n  });\n\n  describe('parseUnit', () => {\n    it('should produce the correct summary component for sum(Acceleration) and count(*)', () => {\n      const model = parseUnitModel({\n        mark: 'point',\n        encoding: {\n          y: {\n            aggregate: 'sum',\n            field: 'Acceleration',\n            type: 'quantitative'\n          },\n          x: {\n            field: 'Origin',\n            type: 'ordinal'\n          },\n          color: {type: 'quantitative', aggregate: 'count'}\n        }\n      });\n\n      const agg = AggregateNode.makeFromEncoding(null, model);\n      expect(agg.assemble()).toEqual({\n        type: 'aggregate',\n        groupby: ['Origin'],\n        ops: ['sum', 'count'],\n        fields: ['Acceleration', null],\n        as: ['sum_Acceleration', internalField('count')]\n      });\n    });\n\n    it('should produce the correct aggregate component for maps', () => {\n      const model = parseUnitModel({\n        mark: 'rule',\n        encoding: {\n          latitude: {field: 'latitude', type: 'quantitative'},\n          longitude: {field: 'longitude', type: 'quantitative'},\n          latitude2: {field: 'latitude2', type: 'quantitative'},\n          longitude2: {field: 'longitude2', type: 'quantitative'},\n          color: {\n            aggregate: 'count',\n            type: 'quantitative'\n          }\n        }\n      });\n\n      const agg = AggregateNode.makeFromEncoding(null, model);\n      expect(agg.assemble()).toEqual({\n        type: 'aggregate',\n        groupby: ['y', 'x', 'y2', 'x2'],\n        ops: ['count'],\n        fields: [null],\n        as: [internalField('count')]\n      });\n    });\n\n    it('should produce the correct summary component for aggregated plot with detail arrays', () => {\n      const model = parseUnitModel({\n        mark: 'point',\n        encoding: {\n          x: {aggregate: 'mean', field: 'Displacement', type: 'quantitative'},\n          detail: [{field: 'Origin', type: 'ordinal'}, {field: 'Cylinders', type: 'quantitative'}]\n        }\n      });\n\n      const agg = AggregateNode.makeFromEncoding(null, model);\n      expect(agg.assemble()).toEqual({\n        type: 'aggregate',\n        groupby: ['Origin', 'Cylinders'],\n        ops: ['mean'],\n        fields: ['Displacement'],\n        as: ['mean_Displacement']\n      });\n    });\n\n    it('should include conditional field in the summary component', () => {\n      const model = parseUnitModel({\n        mark: 'point',\n        encoding: {\n          x: {aggregate: 'mean', field: 'Displacement', type: 'quantitative'},\n          color: {\n            condition: {selection: 'a', field: 'Origin', type: 'ordinal'},\n            value: 'red'\n          }\n        }\n      });\n\n      const agg = AggregateNode.makeFromEncoding(null, model);\n      expect(agg.assemble()).toEqual({\n        type: 'aggregate',\n        groupby: ['Origin'],\n        ops: ['mean'],\n        fields: ['Displacement'],\n        as: ['mean_Displacement']\n      });\n    });\n\n    it('should add min and max if needed for unaggregated scale domain', () => {\n      const model = parseUnitModel({\n        mark: 'point',\n        encoding: {\n          x: {aggregate: 'mean', field: 'Displacement', type: 'quantitative', scale: {domain: 'unaggregated'}}\n        }\n      });\n\n      const agg = AggregateNode.makeFromEncoding(null, model);\n      expect(agg.assemble()).toEqual({\n        type: 'aggregate',\n        groupby: [],\n        ops: ['mean', 'min', 'max'],\n        fields: ['Displacement', 'Displacement', 'Displacement'],\n        as: ['mean_Displacement', 'min_Displacement', 'max_Displacement']\n      });\n    });\n\n    it('should add correct dimensions when binning', () => {\n      const model = parseUnitModel({\n        mark: 'point',\n        encoding: {\n          x: {bin: true, field: 'Displacement', type: 'quantitative'},\n          y: {bin: true, field: 'Acceleration', type: 'ordinal'},\n          color: {aggregate: 'count', type: 'quantitative'}\n        }\n      });\n\n      const agg = AggregateNode.makeFromEncoding(null, model);\n      expect(agg.assemble()).toEqual({\n        type: 'aggregate',\n        groupby: [\n          'bin_maxbins_10_Displacement',\n          'bin_maxbins_10_Displacement_end',\n          'bin_maxbins_10_Acceleration',\n          'bin_maxbins_10_Acceleration_end',\n          'bin_maxbins_10_Acceleration_range'\n        ],\n        ops: ['count'],\n        fields: [null],\n        as: [internalField('count')]\n      });\n    });\n\n    it('should produce the correct summary component from transform array', () => {\n      const t: AggregateTransform = {\n        aggregate: [\n          {op: 'mean', field: 'Displacement', as: 'Displacement_mean'},\n          {op: 'sum', field: 'Acceleration', as: 'Acceleration_sum'}\n        ],\n        groupby: ['Group']\n      };\n\n      const agg = AggregateNode.makeFromTransform(null, t);\n      expect(agg.assemble()).toEqual({\n        type: 'aggregate',\n        groupby: ['Group'],\n        ops: ['mean', 'sum'],\n        fields: ['Displacement', 'Acceleration'],\n        as: ['Displacement_mean', 'Acceleration_sum']\n      });\n    });\n\n    it('should produce the correct summary component from transform array with different aggregrations for the same field', () => {\n      const t: AggregateTransform = {\n        aggregate: [\n          {op: 'mean', field: 'Displacement', as: 'Displacement_mean'},\n          {op: 'max', field: 'Displacement', as: 'Displacement_max'},\n          {op: 'sum', field: 'Acceleration', as: 'Acceleration_sum'}\n        ],\n        groupby: ['Group']\n      };\n\n      const agg = AggregateNode.makeFromTransform(null, t);\n      expect(agg.assemble()).toEqual({\n        type: 'aggregate',\n        groupby: ['Group'],\n        ops: ['mean', 'max', 'sum'],\n        fields: ['Displacement', 'Displacement', 'Acceleration'],\n        as: ['Displacement_mean', 'Displacement_max', 'Acceleration_sum']\n      });\n    });\n  });\n\n  describe('producedFields', () => {\n    it('should produce the correct fields', () => {\n      const t: AggregateTransform = {\n        aggregate: [\n          {op: 'mean', field: 'Displacement', as: 'AvgDisplacement'},\n          {op: 'sum', field: 'Acceleration', as: 'Acceleration_sum'}\n        ],\n        groupby: ['Group']\n      };\n\n      const agg = AggregateNode.makeFromTransform(null, t);\n      expect(agg.producedFields()).toEqual(new Set(['AvgDisplacement', 'Acceleration_sum']));\n    });\n  });\n\n  describe('merge', () => {\n    it('should not merge AggregateNodes with different dimensions', () => {\n      const parent = new DataFlowNode(null);\n      const agg1 = new AggregateNode(parent, new Set(['a', 'b']), {});\n      const agg2 = new AggregateNode(parent, new Set(['a']), {});\n\n      expect(agg1.merge(agg2)).toBe(false);\n    });\n    it('should merge AggregateNodes with same dimensions', () => {\n      const parent = new DataFlowNode(null);\n      const agg1 = new AggregateNode(parent, new Set(['a', 'b']), {a: {mean: new Set(['a_mean'])}});\n      const agg2 = new AggregateNode(parent, new Set(['a', 'b']), {b: {mean: new Set(['b_mean'])}});\n\n      expect(agg1.merge(agg2)).toBe(true);\n      expect(agg1.producedFields()).toEqual(new Set(['a_mean', 'b_mean']));\n    });\n  });\n});\n"]}