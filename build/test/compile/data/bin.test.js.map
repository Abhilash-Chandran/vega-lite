{"version":3,"file":"bin.test.js","sourceRoot":"","sources":["../../../../test/compile/data/bin.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,EAAC,OAAO,EAAC,MAAM,+BAA+B,CAAC;AAGtD,OAAO,EAAC,uBAAuB,EAAC,MAAM,YAAY,CAAC;AACnD,OAAO,EAAC,YAAY,EAAC,MAAM,sCAAsC,CAAC;AAElE,SAAS,oBAAoB,CAAC,KAAqB;IACjD,OAAO,OAAO,CAAC,gBAAgB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;AAC1D,CAAC;AAED,SAAS,qBAAqB,CAAC,KAAY,EAAE,CAAe;IAC1D,OAAO,OAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;AAC9D,CAAC;AAED,SAAS,gBAAgB,CAAC,CAAe;IACvC,OAAO,uBAAuB,CAAC;QAC7B,IAAI,EAAE,EAAC,GAAG,EAAE,kBAAkB,EAAC;QAC/B,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,CAAC,CAAC,CAAC;QACd,QAAQ,EAAE;YACR,CAAC,EAAE;gBACD,KAAK,EAAE,wBAAwB;gBAC/B,IAAI,EAAE,cAAc;aACrB;YACD,KAAK,EAAE;gBACL,KAAK,EAAE,wBAAwB;gBAC/B,IAAI,EAAE,cAAc;aACrB;SACF;KACF,CAAC,CAAC;AACL,CAAC;AAED,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,EAAE,CAAC,qEAAqE,EAAE,GAAG,EAAE;QAC7E,MAAM,KAAK,GAAG,uBAAuB,CAAC;YACpC,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE;gBACR,CAAC,EAAE;oBACD,GAAG,EAAE,EAAC,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAC;oBACvB,KAAK,EAAE,cAAc;oBACrB,IAAI,EAAE,cAAc;iBACrB;aACF;SACF,CAAC,CAAC;QAEH,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;YAC7C,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,cAAc;YACrB,EAAE,EAAE,CAAC,0CAA0C,EAAE,8CAA8C,CAAC;YAChG,OAAO,EAAE,EAAE;YACX,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;YAChB,MAAM,EAAE,+CAA+C;SACxD,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yFAAyF,EAAE,GAAG,EAAE;QACjG,MAAM,KAAK,GAAG,uBAAuB,CAAC;YACpC,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE;gBACR,CAAC,EAAE;oBACD,GAAG,EAAE,IAAI;oBACT,KAAK,EAAE,cAAc;oBACrB,IAAI,EAAE,cAAc;iBACrB;aACF;SACF,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAC9C,MAAM,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;YAC3B,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,cAAc;YACrB,MAAM,EAAE,oCAAoC;SAC7C,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;YAC3B,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,cAAc;YACrB,EAAE,EAAE,CAAC,6BAA6B,EAAE,iCAAiC,CAAC;YACtE,OAAO,EAAE,EAAE;YACX,MAAM,EAAE,kCAAkC;YAC1C,MAAM,EAAE,EAAC,MAAM,EAAE,oCAAoC,EAAC;SACvD,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0FAA0F,EAAE,GAAG,EAAE;QAClG,MAAM,KAAK,GAAG,uBAAuB,CAAC;YACpC,IAAI,EAAE,EAAC,GAAG,EAAE,kBAAkB,EAAC;YAC/B,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE;gBACR,CAAC,EAAE;oBACD,GAAG,EAAE,IAAI;oBACT,KAAK,EAAE,wBAAwB;oBAC/B,IAAI,EAAE,cAAc;iBACrB;gBACD,KAAK,EAAE;oBACL,GAAG,EAAE,EAAC,OAAO,EAAE,EAAE,EAAC;oBAClB,KAAK,EAAE,wBAAwB;oBAC/B,IAAI,EAAE,SAAS;iBAChB;aACF;SACF,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAC9C,MAAM,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;YAC3B,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,wBAAwB;YAC/B,MAAM,EAAE,8CAA8C;SACvD,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;YAC3B,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,wBAAwB;YAC/B,EAAE,EAAE,CAAC,uCAAuC,EAAE,2CAA2C,CAAC;YAC1F,MAAM,EAAE,4CAA4C;YACpD,OAAO,EAAE,EAAE;YACX,MAAM,EAAE,EAAC,MAAM,EAAE,8CAA8C,EAAC;SACjE,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;YAC3B,IAAI,EAAE,SAAS;YACf,EAAE,EAAE,6CAA6C;YACjD,IAAI,EAAE,iQAAiQ;SACxQ,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0FAA0F,EAAE,GAAG,EAAE;QAClG,MAAM,CAAC,GAAiB;YACtB,GAAG,EAAE,EAAC,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAC;YACvB,KAAK,EAAE,cAAc;YACrB,EAAE,EAAE,qBAAqB;SAC1B,CAAC;QACF,MAAM,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAElC,MAAM,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;YACjD,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,cAAc;YACrB,OAAO,EAAE,EAAE;YACX,EAAE,EAAE,CAAC,qBAAqB,EAAE,yBAAyB,CAAC;YACtD,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;YAChB,MAAM,EAAE,+CAA+C;SACxD,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0FAA0F,EAAE,GAAG,EAAE;QAClG,MAAM,CAAC,GAAiB;YACtB,GAAG,EAAE,EAAC,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,OAAO,EAAE,EAAE,EAAC;YACpC,KAAK,EAAE,cAAc;YACrB,EAAE,EAAE,qBAAqB;SAC1B,CAAC;QACF,MAAM,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAElC,MAAM,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;YACjD,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,cAAc;YACrB,OAAO,EAAE,EAAE;YACX,EAAE,EAAE,CAAC,qBAAqB,EAAE,yBAAyB,CAAC;YACtD,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;YAChB,MAAM,EAAE,+CAA+C;SACxD,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oEAAoE,EAAE,GAAG,EAAE;QAC5E,MAAM,CAAC,GAAiB;YACtB,GAAG,EAAE,EAAC,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,EAAC;YAClC,KAAK,EAAE,cAAc;YACrB,EAAE,EAAE,qBAAqB;SAC1B,CAAC;QACF,MAAM,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAElC,MAAM,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;YACjD,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,cAAc;YACrB,MAAM,EAAE,CAAC;YACT,OAAO,EAAE,EAAE;YACX,EAAE,EAAE,CAAC,qBAAqB,EAAE,yBAAyB,CAAC;YACtD,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;YAChB,MAAM,EAAE,wDAAwD;SACjE,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACrE,MAAM,CAAC,GAAiB;YACtB,GAAG,EAAE,EAAC,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,EAAC;YAClC,KAAK,EAAE,cAAc;YACrB,EAAE,EAAE,CAAC,2BAA2B,EAAE,0BAA0B,CAAC;SAC9D,CAAC;QACF,MAAM,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAElC,MAAM,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;YACjD,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,cAAc;YACrB,MAAM,EAAE,CAAC;YACT,OAAO,EAAE,EAAE;YACX,EAAE,EAAE,CAAC,2BAA2B,EAAE,0BAA0B,CAAC;YAC7D,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;YAChB,MAAM,EAAE,wDAAwD;SACjE,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,CAAC,GAAiB;YACtB,GAAG,EAAE,EAAC,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,EAAC;YAClC,KAAK,EAAE,cAAc;YACrB,EAAE,EAAE,CAAC,2BAA2B,EAAE,0BAA0B,CAAC;SAC9D,CAAC;QACF,MAAM,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAElC,MAAM,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QAC1D,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,MAAM,CAAC,GAAiB;YACtB,GAAG,EAAE,EAAC,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,EAAC;YAClC,KAAK,EAAE,cAAc;YACrB,EAAE,EAAE,CAAC,2BAA2B,EAAE,0BAA0B,CAAC;SAC9D,CAAC;QACF,MAAM,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAElC,MAAM,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QAC1D,MAAM,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,MAAM,CAAC,GAAiB;YACtB,GAAG,EAAE,EAAC,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,EAAC;YAClC,KAAK,EAAE,cAAc;YACrB,EAAE,EAAE,CAAC,2BAA2B,EAAE,0BAA0B,CAAC;SAC9D,CAAC;QACF,MAAM,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAElC,MAAM,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QAC1D,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC9C,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,2BAA2B,EAAE,0BAA0B,CAAC,CAAC,CAAC,CAAC;IAC/G,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QACpC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {BinNode} from '../../../src/compile/data/bin';\nimport {Model, ModelWithField} from '../../../src/compile/model';\nimport {BinTransform} from '../../../src/transform';\nimport {parseUnitModelWithScale} from '../../util';\nimport {DataFlowNode} from './../../../src/compile/data/dataflow';\n\nfunction assembleFromEncoding(model: ModelWithField) {\n  return BinNode.makeFromEncoding(null, model).assemble();\n}\n\nfunction assembleFromTransform(model: Model, t: BinTransform) {\n  return BinNode.makeFromTransform(null, t, model).assemble();\n}\n\nfunction makeMovieExample(t: BinTransform) {\n  return parseUnitModelWithScale({\n    data: {url: 'data/movies.json'},\n    mark: 'circle',\n    transform: [t],\n    encoding: {\n      x: {\n        field: 'Rotten_Tomatoes_Rating',\n        type: 'quantitative'\n      },\n      color: {\n        field: 'Rotten_Tomatoes_Rating',\n        type: 'quantitative'\n      }\n    }\n  });\n}\n\ndescribe('compile/data/bin', () => {\n  it('should add bin transform and correctly apply bin with custom extent', () => {\n    const model = parseUnitModelWithScale({\n      mark: 'point',\n      encoding: {\n        y: {\n          bin: {extent: [0, 100]},\n          field: 'Acceleration',\n          type: 'quantitative'\n        }\n      }\n    });\n\n    expect(assembleFromEncoding(model)[0]).toEqual({\n      type: 'bin',\n      field: 'Acceleration',\n      as: ['bin_extent_0_100_maxbins_10_Acceleration', 'bin_extent_0_100_maxbins_10_Acceleration_end'],\n      maxbins: 10,\n      extent: [0, 100],\n      signal: 'bin_extent_0_100_maxbins_10_Acceleration_bins'\n    });\n  });\n\n  it('should add bin transform and correctly apply bin for binned field without custom extent', () => {\n    const model = parseUnitModelWithScale({\n      mark: 'point',\n      encoding: {\n        y: {\n          bin: true,\n          field: 'Acceleration',\n          type: 'quantitative'\n        }\n      }\n    });\n    const transform = assembleFromEncoding(model);\n    expect(transform).toHaveLength(2);\n    expect(transform[0]).toEqual({\n      type: 'extent',\n      field: 'Acceleration',\n      signal: 'bin_maxbins_10_Acceleration_extent'\n    });\n    expect(transform[1]).toEqual({\n      type: 'bin',\n      field: 'Acceleration',\n      as: ['bin_maxbins_10_Acceleration', 'bin_maxbins_10_Acceleration_end'],\n      maxbins: 10,\n      signal: 'bin_maxbins_10_Acceleration_bins',\n      extent: {signal: 'bin_maxbins_10_Acceleration_extent'}\n    });\n  });\n\n  it('should apply the bin transform only once for a binned field encoded in multiple channels', () => {\n    const model = parseUnitModelWithScale({\n      data: {url: 'data/movies.json'},\n      mark: 'circle',\n      encoding: {\n        x: {\n          bin: true,\n          field: 'Rotten_Tomatoes_Rating',\n          type: 'quantitative'\n        },\n        color: {\n          bin: {maxbins: 10},\n          field: 'Rotten_Tomatoes_Rating',\n          type: 'ordinal'\n        }\n      }\n    });\n    const transform = assembleFromEncoding(model);\n    expect(transform).toHaveLength(3);\n    expect(transform[0]).toEqual({\n      type: 'extent',\n      field: 'Rotten_Tomatoes_Rating',\n      signal: 'bin_maxbins_10_Rotten_Tomatoes_Rating_extent'\n    });\n    expect(transform[1]).toEqual({\n      type: 'bin',\n      field: 'Rotten_Tomatoes_Rating',\n      as: ['bin_maxbins_10_Rotten_Tomatoes_Rating', 'bin_maxbins_10_Rotten_Tomatoes_Rating_end'],\n      signal: 'bin_maxbins_10_Rotten_Tomatoes_Rating_bins',\n      maxbins: 10,\n      extent: {signal: 'bin_maxbins_10_Rotten_Tomatoes_Rating_extent'}\n    });\n    expect(transform[2]).toEqual({\n      type: 'formula',\n      as: 'bin_maxbins_10_Rotten_Tomatoes_Rating_range',\n      expr: `datum[\"bin_maxbins_10_Rotten_Tomatoes_Rating\"] === null || isNaN(datum[\"bin_maxbins_10_Rotten_Tomatoes_Rating\"]) ? \"null\" : format(datum[\"bin_maxbins_10_Rotten_Tomatoes_Rating\"], \"\") + \" - \" + format(datum[\"bin_maxbins_10_Rotten_Tomatoes_Rating_end\"], \"\")`\n    });\n  });\n\n  it('should add bin transform from transform array and correctly apply bin with custom extent', () => {\n    const t: BinTransform = {\n      bin: {extent: [0, 100]},\n      field: 'Acceleration',\n      as: 'binned_acceleration'\n    };\n    const model = makeMovieExample(t);\n\n    expect(assembleFromTransform(model, t)[0]).toEqual({\n      type: 'bin',\n      field: 'Acceleration',\n      maxbins: 10,\n      as: ['binned_acceleration', 'binned_acceleration_end'],\n      extent: [0, 100],\n      signal: 'bin_extent_0_100_maxbins_10_Acceleration_bins'\n    });\n  });\n\n  it('should add bin transform from transform array and correctly apply bin with custom extent', () => {\n    const t: BinTransform = {\n      bin: {extent: [0, 100], maxbins: 20},\n      field: 'Acceleration',\n      as: 'binned_acceleration'\n    };\n    const model = makeMovieExample(t);\n\n    expect(assembleFromTransform(model, t)[0]).toEqual({\n      type: 'bin',\n      field: 'Acceleration',\n      maxbins: 20,\n      as: ['binned_acceleration', 'binned_acceleration_end'],\n      extent: [0, 100],\n      signal: 'bin_extent_0_100_maxbins_20_Acceleration_bins'\n    });\n  });\n\n  it('should add bin transform from transform array with anchor property', () => {\n    const t: BinTransform = {\n      bin: {extent: [0, 100], anchor: 6},\n      field: 'Acceleration',\n      as: 'binned_acceleration'\n    };\n    const model = makeMovieExample(t);\n\n    expect(assembleFromTransform(model, t)[0]).toEqual({\n      type: 'bin',\n      field: 'Acceleration',\n      anchor: 6,\n      maxbins: 10,\n      as: ['binned_acceleration', 'binned_acceleration_end'],\n      extent: [0, 100],\n      signal: 'bin_extent_0_100_anchor_6_maxbins_10_Acceleration_bins'\n    });\n  });\n\n  it('should add bin transform from transform array with array as', () => {\n    const t: BinTransform = {\n      bin: {extent: [0, 100], anchor: 6},\n      field: 'Acceleration',\n      as: ['binned_acceleration_start', 'binned_acceleration_stop']\n    };\n    const model = makeMovieExample(t);\n\n    expect(assembleFromTransform(model, t)[0]).toEqual({\n      type: 'bin',\n      field: 'Acceleration',\n      anchor: 6,\n      maxbins: 10,\n      as: ['binned_acceleration_start', 'binned_acceleration_stop'],\n      extent: [0, 100],\n      signal: 'bin_extent_0_100_anchor_6_maxbins_10_Acceleration_bins'\n    });\n  });\n\n  it('should generate the correct hash', () => {\n    const t: BinTransform = {\n      bin: {extent: [0, 100], anchor: 6},\n      field: 'Acceleration',\n      as: ['binned_acceleration_start', 'binned_acceleration_stop']\n    };\n    const model = makeMovieExample(t);\n\n    const binNode = BinNode.makeFromTransform(null, t, model);\n    expect(binNode.hash()).toBe('Bin 1594083826');\n  });\n\n  it('should generate the correct dependent fields', () => {\n    const t: BinTransform = {\n      bin: {extent: [0, 100], anchor: 6},\n      field: 'Acceleration',\n      as: ['binned_acceleration_start', 'binned_acceleration_stop']\n    };\n    const model = makeMovieExample(t);\n\n    const binNode = BinNode.makeFromTransform(null, t, model);\n    expect(binNode.dependentFields()).toEqual(new Set(['Acceleration']));\n  });\n\n  it('should generate the correct produced fields', () => {\n    const t: BinTransform = {\n      bin: {extent: [0, 100], anchor: 6},\n      field: 'Acceleration',\n      as: ['binned_acceleration_start', 'binned_acceleration_stop']\n    };\n    const model = makeMovieExample(t);\n\n    const binNode = BinNode.makeFromTransform(null, t, model);\n    expect(binNode.hash()).toBe('Bin 1594083826');\n    expect(binNode.producedFields()).toEqual(new Set(['binned_acceleration_start', 'binned_acceleration_stop']));\n  });\n\n  it('should never clone parent', () => {\n    const parent = new DataFlowNode(null);\n    const bin = new BinNode(parent, {});\n    expect(bin.clone().parent).toBeNull();\n  });\n});\n"]}