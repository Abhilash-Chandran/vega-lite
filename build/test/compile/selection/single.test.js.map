{"version":3,"file":"single.test.js","sourceRoot":"","sources":["../../../../test/compile/selection/single.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\nimport {assert} from 'chai';\n\nimport * as selection from '../../../src/compile/selection/selection';\nimport single from '../../../src/compile/selection/single';\nimport {parseUnitModelWithScale} from '../../util';\n\ndescribe('Single Selection', () => {\n  const model = parseUnitModelWithScale({\n    mark: 'circle',\n    encoding: {\n      x: {field: 'Horsepower', type: 'quantitative'},\n      y: {field: 'Miles_per_Gallon', type: 'quantitative', bin: true},\n      color: {field: 'Origin', type: 'nominal'}\n    }\n  });\n\n  model.parseScale();\n\n  const selCmpts = (model.component.selection = selection.parseUnitSelection(model, {\n    one: {type: 'single'},\n    two: {\n      type: 'single',\n      nearest: true,\n      on: 'mouseover',\n      encodings: ['y', 'color'],\n      resolve: 'intersect'\n    }\n  }));\n\n  it('builds tuple signals', () => {\n    const oneSg = single.signals(model, selCmpts['one']);\n    assert.sameDeepMembers(oneSg, [\n      {\n        name: 'one_tuple',\n        value: {},\n        on: [\n          {\n            events: selCmpts['one'].events,\n            update:\n              'datum && item().mark.marktype !== \\'group\\' ? {unit: \"\", fields: one_tuple_fields, values: [datum[\"_vgsid_\"]]} : null',\n            force: true\n          }\n        ]\n      }\n    ]);\n\n    const twoSg = single.signals(model, selCmpts['two']);\n    assert.sameDeepMembers(twoSg, [\n      {\n        name: 'two_tuple',\n        value: {},\n        on: [\n          {\n            events: selCmpts['two'].events,\n            update:\n              'datum && item().mark.marktype !== \\'group\\' ? {unit: \"\", fields: two_tuple_fields, values: [[(item().isVoronoi ? datum.datum : datum)[\"bin_maxbins_10_Miles_per_Gallon\"], (item().isVoronoi ? datum.datum : datum)[\"bin_maxbins_10_Miles_per_Gallon_end\"]], (item().isVoronoi ? datum.datum : datum)[\"Origin\"]]} : null',\n            force: true\n          }\n        ]\n      }\n    ]);\n\n    const signals = selection.assembleUnitSelectionSignals(model, []);\n    assert.includeDeepMembers(signals, oneSg.concat(twoSg));\n  });\n\n  it('builds modify signals', () => {\n    const oneExpr = single.modifyExpr(model, selCmpts['one']);\n    assert.equal(oneExpr, 'one_tuple, true');\n\n    const twoExpr = single.modifyExpr(model, selCmpts['two']);\n    assert.equal(twoExpr, 'two_tuple, {unit: \"\"}');\n\n    const signals = selection.assembleUnitSelectionSignals(model, []);\n    assert.includeDeepMembers(signals, [\n      {\n        name: 'one_modify',\n        on: [\n          {\n            events: {signal: 'one_tuple'},\n            update: `modify(\\\"one_store\\\", ${oneExpr})`\n          }\n        ]\n      },\n      {\n        name: 'two_modify',\n        on: [\n          {\n            events: {signal: 'two_tuple'},\n            update: `modify(\\\"two_store\\\", ${twoExpr})`\n          }\n        ]\n      }\n    ]);\n  });\n\n  it('builds top-level signals', () => {\n    const signals = selection.assembleTopLevelSignals(model, []);\n    assert.includeDeepMembers(signals, [\n      {\n        name: 'one',\n        update: 'vlSelectionResolve(\"one_store\")'\n      },\n      {\n        name: 'two',\n        update: 'vlSelectionResolve(\"two_store\", \"intersect\")'\n      },\n      {\n        name: 'unit',\n        value: {},\n        on: [{events: 'mousemove', update: 'isTuple(group()) ? group() : unit'}]\n      }\n    ]);\n  });\n\n  it('builds unit datasets', () => {\n    const data: any[] = [];\n    assert.sameDeepMembers(selection.assembleUnitSelectionData(model, data), [\n      {name: 'one_store'},\n      {name: 'two_store'}\n    ]);\n  });\n\n  it('leaves marks alone', () => {\n    const marks: any[] = [];\n    model.component.selection = {one: selCmpts['one']};\n    assert.equal(selection.assembleUnitSelectionMarks(model, marks), marks);\n  });\n});\n"]}