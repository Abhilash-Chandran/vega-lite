{"version":3,"file":"discrete.test.js","sourceRoot":"","sources":["../../test-runtime/discrete.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {Page} from 'puppeteer';\nimport {SELECTION_ID} from '../src/selection';\nimport {fill} from '../src/util';\nimport {embedFn, hits as hitsMaster, pt, spec, testRenderFn} from './util';\n\ndeclare const page: Page;\nfor (const type of ['single', 'multi']) {\n  describe(`${type} selections at runtime in unit views`, () => {\n    beforeAll(async () => {\n      await page.goto('http://0.0.0.0:8000/test-runtime/');\n    });\n\n    const hits = hitsMaster.discrete;\n    const embed = embedFn(page);\n    const testRender = testRenderFn(page, `${type}/unit`);\n\n    it('should add values to the store', async () => {\n      for (let i = 0; i < hits.qq.length; i++) {\n        await embed(spec('unit', i, {type}));\n        const store = await page.evaluate(pt('qq', i));\n        expect(store).toHaveLength(1);\n        expect(store[0].fields).toHaveLength(1);\n        expect(store[0].values).toHaveLength(1);\n        expect(store[0].fields[0].field).toEqual(SELECTION_ID);\n        expect(store[0].fields[0].type).toEqual('E');\n        await testRender(`click_${i}`);\n      }\n    });\n\n    it('should respect projections', async () => {\n      let values: number[][] = [];\n      let encodings: string[] = [];\n      let fields: string[] = [];\n      const test = async (emb: (i: number) => void) => {\n        for (let i = 0; i < hits.qq.length; i++) {\n          emb(i);\n          const store = await page.evaluate(pt('qq', i));\n          expect(store).toHaveLength(1);\n          expect(store[0].fields).toHaveLength(fields.length);\n          expect(store[0].values).toHaveLength(fields.length);\n          expect(store[0].fields.map((f: any) => f.field)).toEqual(fields);\n          expect(store[0].fields.map((f: any) => f.type)).toEqual(fill('E', fields.length));\n          expect(store[0].values).toEqual(values[i]);\n          await testRender(`${encodings}_${fields}_${i}`);\n        }\n      };\n\n      encodings = ['x', 'color'];\n      fields = ['a', 'c'];\n      values = [[2, 1], [6, 0]];\n      await test(async (i: number) => await embed(spec('unit', i, {type, encodings})));\n\n      encodings = [];\n      fields = ['c', 'a', 'b'];\n      values = [[1, 2, 53], [0, 6, 87]];\n      await test(async (i: number) => await embed(spec('unit', i, {type, fields})));\n    });\n\n    it('should clear out the store', async () => {\n      for (let i = 0; i < hits.qq_clear.length; i++) {\n        await embed(spec('unit', i, {type}));\n        let store = await page.evaluate(pt('qq', i));\n        expect(store).toHaveLength(1);\n\n        store = await page.evaluate(pt('qq_clear', i));\n        expect(store).toHaveLength(0);\n        await testRender(`clear_${i}`);\n      }\n    });\n\n    it('should support selecting bins', async () => {\n      const encodings = ['x', 'color', 'y'];\n      const fields = ['a', 'c', 'b'];\n      const types = ['R-RE', 'E', 'R-RE'];\n      const values = [[[1, 2], 0, [40, 50]], [[8, 9], 1, [10, 20]]];\n\n      for (let i = 0; i < hits.bins.length; i++) {\n        await embed(spec('unit', i, {type, encodings}, {x: {bin: true}, y: {bin: true}}));\n        const store = await page.evaluate(pt('bins', i));\n        expect(store).toHaveLength(1);\n        expect(store[0].fields).toHaveLength(fields.length);\n        expect(store[0].values).toHaveLength(fields.length);\n        expect(store[0].fields.map((f: any) => f.field)).toEqual(fields);\n        expect(store[0].fields.map((f: any) => f.type)).toEqual(types);\n        expect(store[0].values).toEqual(values[i]);\n        await testRender(`bins_${i}`);\n      }\n    });\n  });\n}\n"]}