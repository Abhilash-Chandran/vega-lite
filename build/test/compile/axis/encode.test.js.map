{"version":3,"file":"encode.test.js","sourceRoot":"","sources":["../../../../test/compile/axis/encode.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,KAAK,MAAM,MAAM,kCAAkC,CAAC;AAC3D,OAAO,EAAC,uBAAuB,EAAC,MAAM,YAAY,CAAC;AAEnD,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,MAAM,KAAK,GAAG,uBAAuB,CAAC;gBACpC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAC;iBACrD;aACF,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yFAAyF,EAAE,GAAG,EAAE;YACjG,MAAM,KAAK,GAAG,uBAAuB,CAAC;gBACpC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAC;iBACrD;gBACD,MAAM,EAAE,EAAC,KAAK,EAAE,EAAC,UAAU,EAAE,EAAE,EAAC,EAAC;aAClC,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,MAAM,KAAK,GAAG,uBAAuB,CAAC;gBACpC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAC;iBACvD;aACF,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;YACvD,MAAM,QAAQ,GAAG,4BAA4B,CAAC;YAC9C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;YACxE,MAAM,KAAK,GAAG,uBAAuB,CAAC;gBACpC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,kBAAkB,EAAC;iBAChE;aACF,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;YACvD,MAAM,QAAQ,GAAG,qEAAqE,CAAC;YACvF,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\n\nimport * as encode from '../../../src/compile/axis/encode';\nimport {parseUnitModelWithScale} from '../../util';\n\ndescribe('compile/axis/encode', () => {\n  describe('encode.labels()', () => {\n    it('should not rotate label for temporal field by default', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          x: {field: 'a', type: 'temporal', timeUnit: 'month'}\n        }\n      });\n      const labels = encode.labels(model, 'x', {}, 'bottom');\n      expect(labels.angle).toBeUndefined();\n    });\n\n    it('should do not rotate label for temporal field if labelAngle is specified in axis config', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          x: {field: 'a', type: 'temporal', timeUnit: 'month'}\n        },\n        config: {axisX: {labelAngle: 90}}\n      });\n      const labels = encode.labels(model, 'x', {}, 'bottom');\n      expect(labels.angle).toBeUndefined();\n    });\n\n    it('should have correct text.signal for quarter timeUnits', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          x: {field: 'a', type: 'temporal', timeUnit: 'quarter'}\n        }\n      });\n      const labels = encode.labels(model, 'x', {}, 'bottom');\n      const expected = \"'Q' + quarter(datum.value)\";\n      expect(labels.text.signal).toEqual(expected);\n    });\n\n    it('should have correct text.signal for yearquartermonth timeUnits', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          x: {field: 'a', type: 'temporal', timeUnit: 'yearquartermonth'}\n        }\n      });\n      const labels = encode.labels(model, 'x', {}, 'bottom');\n      const expected = \"'Q' + quarter(datum.value) + ' ' + timeFormat(datum.value, '%b %Y')\";\n      expect(labels.text.signal).toEqual(expected);\n    });\n  });\n});\n"]}