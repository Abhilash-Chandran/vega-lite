{"version":3,"file":"dataflow.test.js","sourceRoot":"","sources":["../../../../test/compile/data/dataflow.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {DataFlowNode} from '../../../src/compile/data/dataflow';\n\ndescribe('compile/data/dataflow', () => {\n  describe('swap', () => {\n    it('should correctly swap two nodes in a simple chain', () => {\n      const a = new DataFlowNode(null, 'a');\n      const b = new DataFlowNode(a, 'b');\n\n      const c = new DataFlowNode(b, 'c');\n\n      const d = new DataFlowNode(c, 'd');\n\n      c.swapWithParent();\n\n      expect(a.numChildren()).toBe(1);\n      expect(a.children[0].debugName).toBe('c');\n\n      expect(b.numChildren()).toBe(1);\n      expect(b.children[0].debugName).toBe('d');\n\n      expect(c.numChildren()).toBe(1);\n      expect(c.children[0].debugName).toBe('b');\n\n      expect(d.numChildren()).toBe(0);\n    });\n\n    it('should correctly swap two nodes', () => {\n      const root = new DataFlowNode(null, 'root');\n      const parent = new DataFlowNode(root, 'parent');\n\n      const node = new DataFlowNode(parent, 'node');\n\n      const child1 = new DataFlowNode(node, 'child1');\n      const child2 = new DataFlowNode(node, 'child2');\n\n      const parentChild1 = new DataFlowNode(parent, 'parentChild1');\n      const parentChild2 = new DataFlowNode(parent, 'parentChild2');\n\n      node.swapWithParent();\n\n      expect(root.numChildren()).toBe(1);\n      expect(root.children[0].debugName).toBe('node');\n      expect(node.parent.debugName).toBe('root');\n\n      expect(node.numChildren()).toBe(1);\n      expect(node.children[0].debugName).toBe('parent');\n      expect(parent.parent.debugName).toBe('node');\n\n      expect(parent.numChildren()).toBe(4);\n      parent.children.forEach(c => {\n        expect(c.numChildren()).toBe(0);\n        expect(c.parent.debugName).toBe('parent');\n      });\n\n      expect(child1.debugName).toBe('child1');\n      expect(child2.debugName).toBe('child2');\n      expect(parentChild1.debugName).toBe('parentChild1');\n      expect(parentChild2.debugName).toBe('parentChild2');\n    });\n  });\n\n  describe('remove', () => {\n    it('should remove node from dataflow', () => {\n      const a = new DataFlowNode(null, 'a');\n      const b = new DataFlowNode(a, 'b');\n\n      const c = new DataFlowNode(b, 'c');\n\n      expect(a.children).toEqual([b]);\n      expect(b.parent).toBe(a);\n      expect(c.parent).toBe(b);\n\n      b.remove();\n\n      expect(a.children).toEqual([c]);\n      expect(c.parent).toBe(a);\n    });\n\n    it('should maintain order', () => {\n      const root = new DataFlowNode(null, 'root');\n\n      const rootChild1 = new DataFlowNode(root, 'rootChild1');\n      const node = new DataFlowNode(root, 'node');\n      const rootChild2 = new DataFlowNode(root, 'rootChild2');\n\n      const child1 = new DataFlowNode(node, 'child1');\n      const child2 = new DataFlowNode(node, 'child2');\n\n      expect(root.children).toEqual([rootChild1, node, rootChild2]);\n      expect(rootChild1.parent).toBe(root);\n      expect(rootChild2.parent).toBe(root);\n      expect(node.parent).toBe(root);\n      expect(child1.parent).toBe(node);\n      expect(child2.parent).toBe(node);\n\n      node.remove();\n\n      expect(root.children).toEqual([rootChild1, child1, child2, rootChild2]);\n      expect(rootChild1.parent).toBe(root);\n      expect(rootChild2.parent).toBe(root);\n      expect(child1.parent).toBe(root);\n      expect(child2.parent).toBe(root);\n    });\n  });\n\n  describe('insertAsParentOf', () => {\n    it('should insert node into dataflow', () => {\n      const a = new DataFlowNode(null, 'a');\n      const anotherChild = new DataFlowNode(a, 'a');\n      const b = new DataFlowNode(null, 'b');\n      const c = new DataFlowNode(a, 'c');\n\n      b.insertAsParentOf(c);\n\n      expect(a.children).toEqual(expect.arrayContaining([anotherChild, b]));\n      expect(b.parent).toBe(a);\n      expect(c.parent).toBe(b);\n      expect(anotherChild.parent).toBe(a);\n    });\n  });\n\n  describe('addChild', () => {\n    it('should add child to node', () => {\n      const a = new DataFlowNode(null, 'a');\n      const b = new DataFlowNode(null, 'b');\n\n      a.addChild(b);\n\n      expect(b.parent).toBeNull();\n      expect(a.children).toEqual([b]);\n    });\n\n    it('should not add the same child twice', () => {\n      const a = new DataFlowNode(null, 'a');\n      const b = new DataFlowNode(null, 'b');\n\n      a.addChild(b);\n      a.addChild(b);\n\n      expect(b.parent).toBeNull();\n      expect(a.children).toEqual([b]);\n    });\n  });\n\n  describe('clone', () => {\n    it('should not work', () => {\n      const a = new DataFlowNode(null, 'a');\n\n      expect(a.clone).toThrowError();\n    });\n  });\n});\n"]}