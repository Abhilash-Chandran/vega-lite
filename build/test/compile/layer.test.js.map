{"version":3,"file":"layer.test.js","sourceRoot":"","sources":["../../../test/compile/layer.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {parseLayerModel} from '../util';\n\ndescribe('Layer', () => {\n  describe('parseScale', () => {\n    it('should merge domains', () => {\n      const model = parseLayerModel({\n        layer: [\n          {\n            mark: 'point',\n            encoding: {\n              x: {field: 'a', type: 'ordinal'}\n            }\n          },\n          {\n            mark: 'point',\n            encoding: {\n              x: {field: 'b', type: 'ordinal'}\n            }\n          }\n        ]\n      });\n      expect(model.children).toHaveLength(2);\n      model.parseScale();\n\n      expect(model.component.scales['x'].domains).toEqual([\n        {\n          data: 'layer_0_main',\n          field: 'a',\n          sort: true\n        },\n        {\n          data: 'layer_1_main',\n          field: 'b',\n          sort: true\n        }\n      ]);\n    });\n\n    it('should union explicit and referenced domains', () => {\n      const model = parseLayerModel({\n        layer: [\n          {\n            mark: 'point',\n            encoding: {\n              x: {scale: {domain: [1, 2, 3]}, field: 'b', type: 'ordinal'}\n            }\n          },\n          {\n            mark: 'point',\n            encoding: {\n              x: {field: 'b', type: 'ordinal'}\n            }\n          }\n        ]\n      });\n      model.parseScale();\n\n      expect(model.component.scales['x'].domains).toEqual([\n        [1, 2, 3],\n        {\n          data: 'layer_1_main',\n          field: 'b',\n          sort: true\n        }\n      ]);\n    });\n  });\n\n  describe('dual axis chart', () => {\n    const model = parseLayerModel({\n      layer: [\n        {\n          mark: 'point',\n          encoding: {\n            x: {field: 'a', type: 'quantitative'}\n          }\n        },\n        {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'}\n          }\n        }\n      ],\n      resolve: {\n        scale: {\n          x: 'independent'\n        }\n      }\n    });\n\n    expect(model.children).toHaveLength(2);\n\n    it('should leave scales in children when set to be independent', () => {\n      model.parseScale();\n\n      expect(model.component.scales['x']).toEqual(undefined);\n      expect(model.children[0].component.scales['x'].domains).toEqual([\n        {\n          data: 'layer_0_main',\n          field: 'a'\n        }\n      ]);\n      expect(model.children[1].component.scales['x'].domains).toEqual([\n        {\n          data: 'layer_1_main',\n          field: 'b'\n        }\n      ]);\n    });\n\n    it('should create second axis on top', () => {\n      model.parseAxesAndHeaders();\n\n      expect(model.component.axes['x']).toHaveLength(2);\n      expect(model.component.axes['x'][1].implicit.orient).toEqual('top');\n    });\n  });\n});\n"]}