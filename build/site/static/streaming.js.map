{"version":3,"file":"streaming.js","sourceRoot":"","sources":["../../../site/static/streaming.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAC,MAAM,GAAG,CAAC;AAG/B,MAAM,UAAU,mBAAmB,CAAC,KAAa;IAC/C,MAAM,MAAM,GAAiB;QAC3B,OAAO,EAAE,iDAAiD;QAC1D,IAAI,EAAE,EAAC,IAAI,EAAE,OAAO,EAAC;QACrB,QAAQ,EAAE;YACR,MAAM,EAAE,IAAI;SACb;QACD,KAAK,EAAE,GAAG;QACV,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE;YACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,EAAC,IAAI,EAAE,KAAK,EAAC,EAAC;YAC3D,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;YACrC,KAAK,EAAE,EAAC,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAC;SAC5C;KACF,CAAC;IAEF,MAAM,IAAI,GAAG,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAEvD;;OAEG;IACH,SAAS,YAAY;QACnB,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC;QACjB,IAAI,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7B,OAAO,GAAG,EAAE;YACV,OAAO,EAAE,CAAC;YACV,MAAM,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;gBAC9C,CAAC,EAAE,OAAO;gBACV,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,QAAQ,GAAG,CAAC,CAAC;gBACpD,QAAQ;aACT,CAAC,CAAC,CAAC;YACJ,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC;IACJ,CAAC;IAED,MAAM,cAAc,GAAG,YAAY,EAAE,CAAC;IAEtC,IAAI,QAAQ,GAAG,CAAC,GAAG,CAAC;IACpB,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE;QACtB,QAAQ,EAAE,CAAC;QACX,MAAM,SAAS,GAAG,IAAI;aACnB,SAAS,EAAE;aACX,MAAM,CAAC,cAAc,EAAE,CAAC;aACxB,MAAM,CAAC,CAAC,CAAc,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC;QAC9C,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;IACxC,CAAC,EAAE,IAAI,CAAC,CAAC;AACX,CAAC","sourcesContent":["import {embedExample} from '.';\nimport {TopLevelSpec} from '../../src';\n\nexport function runStreamingExample(eleId: string) {\n  const vlSpec: TopLevelSpec = {\n    $schema: 'https://vega.github.io/schema/vega-lite/v3.json',\n    data: {name: 'table'},\n    autosize: {\n      resize: true\n    },\n    width: 400,\n    mark: 'line',\n    encoding: {\n      x: {field: 'x', type: 'quantitative', scale: {zero: false}},\n      y: {field: 'y', type: 'quantitative'},\n      color: {field: 'category', type: 'nominal'}\n    }\n  };\n\n  const view = embedExample(eleId, vlSpec, false, false);\n\n  /**\n   * Generates a new tuple with random walk.\n   */\n  function newGenerator() {\n    let counter = -1;\n    let previousY = [5, 5, 5, 5];\n    return () => {\n      counter++;\n      const newVals = previousY.map((v, category) => ({\n        x: counter,\n        y: v + Math.round(Math.random() * 10 - category * 3),\n        category\n      }));\n      previousY = newVals.map(v => v.y);\n      return newVals;\n    };\n  }\n\n  const valueGenerator = newGenerator();\n\n  let minimumX = -100;\n  window.setInterval(() => {\n    minimumX++;\n    const changeSet = view\n      .changeset()\n      .insert(valueGenerator())\n      .remove((t: {x: number}) => t.x < minimumX);\n    view.change('table', changeSet).run();\n  }, 1000);\n}\n"]}