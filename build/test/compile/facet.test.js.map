{"version":3,"file":"facet.test.js","sourceRoot":"","sources":["../../../test/compile/facet.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,EAAC,GAAG,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AAE7C,OAAO,KAAK,GAAG,MAAM,eAAe,CAAC;AAErC,OAAO,EAAC,OAAO,EAAC,MAAM,gBAAgB,CAAC;AACvC,OAAO,EAAC,eAAe,EAAE,wBAAwB,EAAC,MAAM,SAAS,CAAC;AAElE,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,EAAE,CACA,oDAAoD,EACpD,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACrB,MAAM,KAAK,GAAG,eAAe,CAAC;gBAC5B,KAAK,EAAE;oBACL,KAAK,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;iBAClB;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,EAAE;iBACb;aACF,CAAC,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,mBAAmB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;QACxF,CAAC,CAAC,CACH,CAAC;QAEF,EAAE,CACA,gEAAgE,EAChE,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACrB,MAAM,KAAK,GAAG,eAAe,CAAC;gBAC5B,KAAK,EAAE;oBACL,GAAG,EAAE,EAAC,IAAI,EAAE,SAAS,EAAC;iBACvB;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,EAAE;iBACb;aACF,CAAC,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAC3C,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QACxF,CAAC,CAAC,CACH,CAAC;QAEF,EAAE,CACA,gEAAgE,EAChE,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACrB,MAAM,KAAK,GAAG,eAAe,CAAC;gBAC5B,KAAK,EAAE;oBACL,GAAG,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;iBACxC;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,EAAE;iBACb;aACF,CAAC,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC,CAAC,CAAC;YACpE,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC,CAAC;QACtF,CAAC,CAAC,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,uBAAuB;QACvB,0CAA0C;QAC1C,0DAA0D;QAE1D,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,KAAK,GAAG,wBAAwB,CAAC;gBACrC,KAAK,EAAE;oBACL,MAAM,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAC;iBAC3D;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;wBACrC,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBACtC;iBACF;aACF,CAAC,CAAC;YACH,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAC3B,MAAM,WAAW,GAAG,KAAK,CAAC,mBAAmB,EAAE,CAAC;YAChD,MAAM,YAAY,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;gBAC1C,OAAO,CAAC,CAAC,IAAI,KAAK,eAAe,CAAC;YACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEN,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,MAAM,KAAK,GAAG,wBAAwB,CAAC;gBACrC,KAAK,EAAE;oBACL,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAE,MAAM,EAAE,GAAG,EAAC;iBACxD;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;wBACrC,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBACtC;iBACF;aACF,CAAC,CAAC;YACH,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAC3B,MAAM,WAAW,GAAG,KAAK,CAAC,mBAAmB,EAAE,CAAC;YAChD,MAAM,YAAY,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;gBAC1C,OAAO,CAAC,CAAC,IAAI,KAAK,eAAe,CAAC;YACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEN,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;YAC9D,MAAM,KAAK,GAAG,wBAAwB,CAAC;gBACrC,KAAK,EAAE;oBACL,MAAM,EAAE,EAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;iBACtD;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;wBACrC,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBACtC;iBACF;aACF,CAAC,CAAC;YACH,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAC3B,MAAM,WAAW,GAAG,KAAK,CAAC,mBAAmB,EAAE,CAAC;YAChD,MAAM,YAAY,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;gBAC1C,OAAO,CAAC,CAAC,IAAI,KAAK,eAAe,CAAC;YACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEN,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,KAAK,GAAG,wBAAwB,CAAC;gBACrC,KAAK,EAAE;oBACL,GAAG,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;iBACxC;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBACtC;iBACF;aACF,CAAC,CAAC;YAEH,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mEAAmE,EAAE,GAAG,EAAE;YAC3E,MAAM,KAAK,GAAG,wBAAwB,CAAC;gBACrC,KAAK,EAAE;oBACL,GAAG,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;iBACxC;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBACtC;iBACF;gBACD,OAAO,EAAE;oBACP,KAAK,EAAE;wBACL,CAAC,EAAE,aAAa;qBACjB;iBACF;aACF,CAAC,CAAC;YAEH,MAAM,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,KAAK,GAAG,wBAAwB,CAAC;gBACrC,KAAK,EAAE;oBACL,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAE,MAAM,EAAE,GAAG,EAAC;iBACxD;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;wBACrC,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBACtC;iBACF;aACF,CAAC,CAAC;YACH,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAE3B,MAAM,WAAW,GAAG,KAAK,CAAC,mBAAmB,EAAE,CAAC;YAChD,MAAM,YAAY,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;gBAC1C,OAAO,CAAC,CAAC,IAAI,KAAK,eAAe,CAAC;YACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEN,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,WAAW,EAAC,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,kGAAkG,EAAE,GAAG,EAAE;YAC1G,MAAM,KAAK,GAAG,wBAAwB,CAAC;gBACrC,KAAK,EAAE;oBACL,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;iBAC3C;gBACD,IAAI,EAAE;oBACJ,KAAK,EAAE;wBACL,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBAC3C;oBACD,IAAI,EAAE;wBACJ,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE;4BACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;yBACtC;qBACF;iBACF;gBACD,uGAAuG;aACjG,CAAC,CAAC;YACV,KAAK,CAAC,SAAS,EAAE,CAAC;YAClB,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,YAAY,EAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;YACrE,MAAM,KAAK,GAAG,wBAAwB,CAAC;gBACrC,KAAK,EAAE;oBACL,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;iBAC3C;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBACtC;iBACF;aACF,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,KAAK,CAAC,cAAc,EAAE,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,OAAO,EAAE,EAAC,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAC;gBAC9B,OAAO,EAAE;oBACP,MAAM,EAAE,+BAA+B;iBACxC;gBACD,MAAM,EAAE,MAAM;gBACd,KAAK,EAAE,KAAK;aACb,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6FAA6F,EAAE,GAAG,EAAE;YACrG,MAAM,KAAK,GAAG,wBAAwB,CAAC;gBACrC,KAAK,EAAE;oBACL,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;iBAC3C;gBACD,IAAI,EAAE;oBACJ,KAAK,EAAE;wBACL,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBAC3C;oBACD,IAAI,EAAE;wBACJ,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE;4BACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;yBACtC;qBACF;iBACF;gBACD,uGAAuG;aACjG,CAAC,CAAC;YACV,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;YAC5C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iEAAiE,EAAE,GAAG,EAAE;YACzE,MAAM,KAAK,GAAG,wBAAwB,CAAC;gBACrC,OAAO,EAAE,iDAAiD;gBAC1D,IAAI,EAAE,EAAC,GAAG,EAAE,gBAAgB,EAAC;gBAC7B,KAAK,EAAE,EAAC,GAAG,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAC,EAAC;gBAChD,IAAI,EAAE;oBACJ,KAAK,EAAE,EAAC,GAAG,EAAE,EAAC,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAC,EAAC;oBACnD,IAAI,EAAE;wBACJ,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE;4BACR,CAAC,EAAE,EAAC,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAC;4BAC9C,CAAC,EAAE,EAAC,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,cAAc,EAAC;yBACjD;qBACF;iBACF;gBACD,uGAAuG;aACjG,CAAC,CAAC;YACV,KAAK,CAAC,eAAe,EAAE,CAAC;YACxB,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAC3B,MAAM,MAAM,GAAG,KAAK,CAAC,cAAc,EAAE,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;YACtE,MAAM,KAAK,GAAe,wBAAwB,CAAC;gBACjD,KAAK,EAAE;oBACL,GAAG,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAC;oBAClC,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAC;iBACtC;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBACtC;iBACF;aACF,CAAC,CAAC;YACH,KAAK,CAAC,KAAK,EAAE,CAAC;YAEd,MAAM,KAAK,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;YAEpC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,CAAC;YACzD,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;gBAC5B,KAAK,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC;gBACnC,KAAK,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC;aAClC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8EAA8E,EAAE,GAAG,EAAE;YACtF,MAAM,KAAK,GAAe,wBAAwB,CAAC;gBACjD,KAAK,EAAE;oBACL,GAAG,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAC;oBACtD,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAC;iBAC1D;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBACtC;iBACF;aACF,CAAC,CAAC;YACH,KAAK,CAAC,KAAK,EAAE,CAAC;YAEd,MAAM,KAAK,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;YAEpC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,CAAC;YACzD,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;gBAC5B,KAAK,EAAE,CAAC,2BAA2B,EAAE,8BAA8B,CAAC;gBACpE,KAAK,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC;aAClC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+EAA+E,EAAE,GAAG,EAAE;YACvF,MAAM,KAAK,GAAe,wBAAwB,CAAC;gBACjD,KAAK,EAAE;oBACL,GAAG,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,QAAQ,EAAC,EAAC;oBACpE,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,QAAQ,EAAC,EAAC;iBACxE;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBACtC;iBACF;aACF,CAAC,CAAC;YACH,KAAK,CAAC,KAAK,EAAE,CAAC;YAEd,MAAM,KAAK,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;YAEpC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;gBAC5C,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,CAAC,eAAe,EAAE,eAAe,CAAC;gBAC1C,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;gBACnB,EAAE,EAAE,CAAC,eAAe,EAAE,eAAe,CAAC;aACvC,CAAC,CAAC;YAEH,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;gBAC5B,KAAK,EAAE,CAAC,wBAAwB,EAAE,wBAAwB,CAAC;gBAC3D,KAAK,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC;aAClC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,KAAK,GAAe,wBAAwB,CAAC;gBACjD,KAAK,EAAE;oBACL,GAAG,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAC;iBACnC;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,MAAM;oBACZ,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAC;wBAChC,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAC;qBACjC;iBACF;gBACD,OAAO,EAAE;oBACP,KAAK,EAAE;wBACL,CAAC,EAAE,aAAa;wBAChB,CAAC,EAAE,aAAa;qBACjB;iBACF;aACF,CAAC,CAAC;YACH,KAAK,CAAC,KAAK,EAAE,CAAC;YAEd,MAAM,KAAK,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;YAEpC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;gBAC5C,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;gBAClB,GAAG,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC;gBAC7B,EAAE,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC;aACjC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,KAAK,GAAe,wBAAwB,CAAC;gBACjD,KAAK,EAAE;oBACL,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;iBAC3C;gBACD,IAAI,EAAE;oBACJ,KAAK,EAAE;wBACL,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBAC3C;oBACD,IAAI,EAAE;wBACJ,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE;4BACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;yBACtC;qBACF;iBACF;gBACD,uGAAuG;aACjG,CAAC,CAAC;YACV,KAAK,CAAC,KAAK,EAAE,CAAC;YAEd,MAAM,KAAK,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;YAEpC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;gBAC5C,MAAM,EAAE,CAAC,GAAG,CAAC;gBACb,GAAG,EAAE,CAAC,UAAU,CAAC;gBACjB,EAAE,EAAE,CAAC,YAAY,CAAC;aACnB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable quotemark */\n\nimport {ROW, SHAPE} from '../../src/channel';\nimport {FacetModel} from '../../src/compile/facet';\nimport * as log from '../../src/log';\nimport {FacetMapping} from '../../src/spec/facet';\nimport {ORDINAL} from '../../src/type';\nimport {parseFacetModel, parseFacetModelWithScale} from '../util';\n\ndescribe('FacetModel', () => {\n  describe('initFacet', () => {\n    it(\n      'should drop unsupported channel and throws warning',\n      log.wrap(localLogger => {\n        const model = parseFacetModel({\n          facet: {\n            shape: {field: 'a', type: 'quantitative'}\n          } as FacetMapping<string>, // Cast to allow invalid facet type for test\n          spec: {\n            mark: 'point',\n            encoding: {}\n          }\n        });\n        expect(model.facet['shape']).toEqual(undefined);\n        expect(localLogger.warns[0]).toEqual(log.message.incompatibleChannel(SHAPE, 'facet'));\n      })\n    );\n\n    it(\n      'should drop channel without field and value and throws warning',\n      log.wrap(localLogger => {\n        const model = parseFacetModel({\n          facet: {\n            row: {type: 'ordinal'}\n          },\n          spec: {\n            mark: 'point',\n            encoding: {}\n          }\n        });\n        expect(model.facet.row).toEqual(undefined);\n        expect(localLogger.warns[0]).toEqual(log.message.emptyFieldDef({type: ORDINAL}, ROW));\n      })\n    );\n\n    it(\n      'should drop channel without field and value and throws warning',\n      log.wrap(localLogger => {\n        const model = parseFacetModel({\n          facet: {\n            row: {field: 'a', type: 'quantitative'}\n          },\n          spec: {\n            mark: 'point',\n            encoding: {}\n          }\n        });\n        expect(model.facet.row).toEqual({field: 'a', type: 'quantitative'});\n        expect(localLogger.warns[0]).toEqual(log.message.facetChannelShouldBeDiscrete(ROW));\n      })\n    );\n  });\n\n  describe('parseAxisAndHeader', () => {\n    // TODO: add more tests\n    // - correctly join title for nested facet\n    // - correctly generate headers with right labels and axes\n\n    it('applies text format to the fieldref of a temporal field', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {timeUnit: 'year', field: 'date', type: 'ordinal'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parseAxisAndHeader();\n      const headerMarks = model.assembleHeaderMarks();\n      const columnHeader = headerMarks.filter(d => {\n        return d.name === 'column_header';\n      })[0];\n\n      expect(columnHeader.title.text.signal).toBeTruthy();\n    });\n\n    it('applies number format for fieldref of a quantitative field', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {field: 'a', type: 'quantitative', format: 'd'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parseAxisAndHeader();\n      const headerMarks = model.assembleHeaderMarks();\n      const columnHeader = headerMarks.filter(d => {\n        return d.name === 'column_header';\n      })[0];\n\n      expect(columnHeader.title.text.signal).toBeTruthy();\n    });\n\n    it('ignores number format for fieldref of a binned field', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {bin: true, field: 'a', type: 'quantitative'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parseAxisAndHeader();\n      const headerMarks = model.assembleHeaderMarks();\n      const columnHeader = headerMarks.filter(d => {\n        return d.name === 'column_header';\n      })[0];\n\n      expect(columnHeader.title.text.signal).toBeTruthy();\n    });\n  });\n\n  describe('parseScale', () => {\n    it('should correctly set scale component for a model', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          row: {field: 'a', type: 'quantitative'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'}\n          }\n        }\n      });\n\n      expect(model.component.scales['x']).toBeTruthy();\n    });\n\n    it('should create independent scales if resolve is set to independent', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          row: {field: 'a', type: 'quantitative'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'}\n          }\n        },\n        resolve: {\n          scale: {\n            x: 'independent'\n          }\n        }\n      });\n\n      expect(!model.component.scales['x']).toBeTruthy();\n    });\n  });\n\n  describe('assembleHeaderMarks', () => {\n    it('should sort headers in ascending order', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {field: 'a', type: 'quantitative', format: 'd'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parseAxisAndHeader();\n\n      const headerMarks = model.assembleHeaderMarks();\n      const columnHeader = headerMarks.filter(d => {\n        return d.name === 'column_header';\n      })[0];\n\n      expect(columnHeader.sort).toEqual({field: 'datum[\"a\"]', order: 'ascending'});\n    });\n  });\n\n  describe('assembleGroup', () => {\n    it('includes a columns fields in the encode block for facet with column that parent is also a facet.', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {field: 'a', type: 'quantitative'}\n        },\n        spec: {\n          facet: {\n            column: {field: 'c', type: 'quantitative'}\n          },\n          spec: {\n            mark: 'point',\n            encoding: {\n              x: {field: 'b', type: 'quantitative'}\n            }\n          }\n        }\n        // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n      } as any);\n      model.parseData();\n      const group = model.child.assembleGroup([]);\n      expect(group.encode.update.columns).toEqual({field: 'distinct_c'});\n    });\n  });\n\n  describe('assembleLayout', () => {\n    it('returns a layout with a column signal for facet with column', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {field: 'a', type: 'quantitative'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'}\n          }\n        }\n      });\n      const layout = model.assembleLayout();\n      expect(layout).toEqual({\n        padding: {row: 10, column: 10},\n        columns: {\n          signal: \"length(data('column_domain'))\"\n        },\n        bounds: 'full',\n        align: 'all'\n      });\n    });\n\n    it('returns a layout without a column signal for facet with column that parent is also a facet.', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {field: 'a', type: 'quantitative'}\n        },\n        spec: {\n          facet: {\n            column: {field: 'c', type: 'quantitative'}\n          },\n          spec: {\n            mark: 'point',\n            encoding: {\n              x: {field: 'b', type: 'quantitative'}\n            }\n          }\n        }\n        // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n      } as any);\n      const layout = model.child.assembleLayout();\n      expect(layout.columns).toEqual(undefined);\n    });\n\n    it('returns a layout with header band if child spec is also a facet', () => {\n      const model = parseFacetModelWithScale({\n        $schema: 'https://vega.github.io/schema/vega-lite/v3.json',\n        data: {url: 'data/cars.json'},\n        facet: {row: {field: 'Origin', type: 'ordinal'}},\n        spec: {\n          facet: {row: {field: 'Cylinders', type: 'ordinal'}},\n          spec: {\n            mark: 'point',\n            encoding: {\n              x: {field: 'Horsepower', type: 'quantitative'},\n              y: {field: 'Acceleration', type: 'quantitative'}\n            }\n          }\n        }\n        // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n      } as any);\n      model.parseLayoutSize();\n      model.parseAxisAndHeader();\n      const layout = model.assembleLayout();\n      expect(layout.headerBand).toEqual({row: 0.5});\n    });\n  });\n\n  describe('assembleMarks', () => {\n    it('should add cross and sort if we facet by multiple dimensions', () => {\n      const model: FacetModel = parseFacetModelWithScale({\n        facet: {\n          row: {field: 'a', type: 'ordinal'},\n          column: {field: 'b', type: 'ordinal'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parse();\n\n      const marks = model.assembleMarks();\n\n      expect(marks[0].from.facet.aggregate.cross).toBeTruthy();\n      expect(marks[0].sort).toEqual({\n        field: ['datum[\"a\"]', 'datum[\"b\"]'],\n        order: ['ascending', 'ascending']\n      });\n    });\n\n    it('should add cross and sort if we facet by multiple dimensions with sort array', () => {\n      const model: FacetModel = parseFacetModelWithScale({\n        facet: {\n          row: {field: 'a', type: 'ordinal', sort: ['a1', 'a2']},\n          column: {field: 'b', type: 'ordinal', sort: ['b1', 'b2']}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parse();\n\n      const marks = model.assembleMarks();\n\n      expect(marks[0].from.facet.aggregate.cross).toBeTruthy();\n      expect(marks[0].sort).toEqual({\n        field: ['datum[\"row_a_sort_index\"]', 'datum[\"column_b_sort_index\"]'],\n        order: ['ascending', 'ascending']\n      });\n    });\n\n    it('should add cross and sort if we facet by multiple dimensions with sort fields', () => {\n      const model: FacetModel = parseFacetModelWithScale({\n        facet: {\n          row: {field: 'a', type: 'ordinal', sort: {field: 'd', op: 'median'}},\n          column: {field: 'b', type: 'ordinal', sort: {field: 'e', op: 'median'}}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parse();\n\n      const marks = model.assembleMarks();\n\n      expect(marks[0].from.facet.aggregate).toEqual({\n        cross: true,\n        fields: ['median_d_by_a', 'median_e_by_b'],\n        ops: ['max', 'max'],\n        as: ['median_d_by_a', 'median_e_by_b']\n      });\n\n      expect(marks[0].sort).toEqual({\n        field: ['datum[\"median_d_by_a\"]', 'datum[\"median_e_by_b\"]'],\n        order: ['ascending', 'ascending']\n      });\n    });\n\n    it('should add calculate cardinality for independent scales', () => {\n      const model: FacetModel = parseFacetModelWithScale({\n        facet: {\n          row: {field: 'a', type: 'ordinal'}\n        },\n        spec: {\n          mark: 'rect',\n          encoding: {\n            x: {field: 'b', type: 'nominal'},\n            y: {field: 'c', type: 'nominal'}\n          }\n        },\n        resolve: {\n          scale: {\n            x: 'independent',\n            y: 'independent'\n          }\n        }\n      });\n      model.parse();\n\n      const marks = model.assembleMarks();\n\n      expect(marks[0].from.facet.aggregate).toEqual({\n        fields: ['b', 'c'],\n        ops: ['distinct', 'distinct'],\n        as: ['distinct_b', 'distinct_c']\n      });\n    });\n\n    it('should add calculate cardinality for child column facet', () => {\n      const model: FacetModel = parseFacetModelWithScale({\n        facet: {\n          column: {field: 'a', type: 'quantitative'}\n        },\n        spec: {\n          facet: {\n            column: {field: 'c', type: 'quantitative'}\n          },\n          spec: {\n            mark: 'point',\n            encoding: {\n              x: {field: 'b', type: 'quantitative'}\n            }\n          }\n        }\n        // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n      } as any);\n      model.parse();\n\n      const marks = model.assembleMarks();\n\n      expect(marks[0].from.facet.aggregate).toEqual({\n        fields: ['c'],\n        ops: ['distinct'],\n        as: ['distinct_c']\n      });\n    });\n  });\n});\n"]}