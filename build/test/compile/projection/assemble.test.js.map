{"version":3,"file":"assemble.test.js","sourceRoot":"","sources":["../../../../test/compile/projection/assemble.test.ts"],"names":[],"mappings":";;AAAA,6BAA4B;AAC5B,qEAAoF;AACpF,wDAAqD;AACrD,mCAAgE;AAEhE,QAAQ,CAAC,6BAA6B,EAAE;IACtC,QAAQ,CAAC,4BAA4B,EAAE;QACrC,IAAM,KAAK,GAAG,2CAAoC,CAAC;YACjD,IAAI,EAAE,UAAU;YAChB,UAAU,EAAE;gBACV,IAAI,EAAE,WAAW;aAClB;YACD,IAAI,EAAE;gBACJ,GAAG,EAAE,kBAAkB;gBACvB,MAAM,EAAE;oBACN,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE,QAAQ;iBAClB;aACF;YACD,QAAQ,EAAE,EAAE;SACb,CAAC,CAAC;QACH,KAAK,CAAC,KAAK,EAAE,CAAC;QAEd,EAAE,CAAC,qBAAqB,EAAE;YACxB,aAAM,CAAC,UAAU,CAAC,qCAA0B,CAAC,KAAK,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE;YACzC,IAAM,UAAU,GAAG,qCAA0B,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACxD,aAAM,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAClC,aAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACjC,aAAM,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAClC,aAAM,CAAC,MAAM,CAAC,yBAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5C,aAAM,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACjC,aAAM,CAAC,MAAM,CAAC,yBAAW,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {assert} from 'chai';\nimport {assembleProjectionForModel} from '../../../src/compile/projection/assemble';\nimport {isSignalRef} from '../../../src/vega.schema';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('compile/projection/assemble', () => {\n  describe('assembleProjectionForModel', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'geoshape',\n      projection: {\n        type: 'albersUsa'\n      },\n      data: {\n        url: 'data/us-10m.json',\n        format: {\n          type: 'topojson',\n          feature: 'states'\n        }\n      },\n      encoding: {}\n    });\n    model.parse();\n\n    it('should not be empty', () => {\n      assert.isNotEmpty(assembleProjectionForModel(model));\n    });\n\n    it('should have properties of right type', () => {\n      const projection = assembleProjectionForModel(model)[0];\n      assert.isDefined(projection.name);\n      assert.isString(projection.name);\n      assert.isDefined(projection.size);\n      assert.isTrue(isSignalRef(projection.size));\n      assert.isDefined(projection.fit);\n      assert.isTrue(isSignalRef(projection.fit));\n    });\n  });\n});\n"]}