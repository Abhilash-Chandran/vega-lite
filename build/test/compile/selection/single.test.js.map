{"version":3,"file":"single.test.js","sourceRoot":"","sources":["../../../../test/compile/selection/single.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\nimport {assert} from 'chai';\n\nimport * as selection from '../../../src/compile/selection/selection';\nimport single from '../../../src/compile/selection/single';\nimport {parseUnitModelWithScale} from '../../util';\n\ndescribe('Single Selection', () => {\n  const model = parseUnitModelWithScale({\n    mark: 'circle',\n    encoding: {\n      x: {field: 'Horsepower', type: 'quantitative'},\n      y: {field: 'Miles_per_Gallon', type: 'quantitative', bin: true},\n      color: {field: 'Origin', type: 'nominal'}\n    }\n  });\n\n  const selCmpts = (model.component.selection = selection.parseUnitSelection(model, {\n    one: {type: 'single'},\n    two: {\n      type: 'single',\n      nearest: true,\n      on: 'mouseover',\n      encodings: ['y', 'color']\n    }\n  }));\n\n  it('builds tuple signals', () => {\n    const oneSg = single.signals(model, selCmpts['one']);\n    assert.sameDeepMembers(oneSg, [\n      {\n        name: 'one_tuple',\n        value: {},\n        on: [\n          {\n            events: selCmpts['one'].events,\n            update:\n              'datum && item().mark.marktype !== \\'group\\' ? {unit: \"\", encodings: [], fields: [\"_vgsid_\"], values: [datum[\"_vgsid_\"]]} : null',\n            force: true\n          }\n        ]\n      }\n    ]);\n\n    const twoSg = single.signals(model, selCmpts['two']);\n    assert.sameDeepMembers(twoSg, [\n      {\n        name: 'two_tuple',\n        value: {},\n        on: [\n          {\n            events: selCmpts['two'].events,\n            update:\n              'datum && item().mark.marktype !== \\'group\\' ? {unit: \"\", encodings: [\"y\", \"color\"], fields: [\"Miles_per_Gallon\", \"Origin\"], values: [[(item().isVoronoi ? datum.datum : datum)[\"bin_maxbins_10_Miles_per_Gallon\"], (item().isVoronoi ? datum.datum : datum)[\"bin_maxbins_10_Miles_per_Gallon_end\"]], (item().isVoronoi ? datum.datum : datum)[\"Origin\"]], \"bin_Miles_per_Gallon\": 1} : null',\n            force: true\n          }\n        ]\n      }\n    ]);\n\n    const signals = selection.assembleUnitSelectionSignals(model, []);\n    assert.includeDeepMembers(signals, oneSg.concat(twoSg));\n  });\n\n  it('builds modify signals', () => {\n    const oneExpr = single.modifyExpr(model, selCmpts['one']);\n    assert.equal(oneExpr, 'one_tuple, true');\n\n    const twoExpr = single.modifyExpr(model, selCmpts['two']);\n    assert.equal(twoExpr, 'two_tuple, true');\n\n    const signals = selection.assembleUnitSelectionSignals(model, []);\n    assert.includeDeepMembers(signals, [\n      {\n        name: 'one_modify',\n        on: [\n          {\n            events: {signal: 'one_tuple'},\n            update: `modify(\\\"one_store\\\", ${oneExpr})`\n          }\n        ]\n      },\n      {\n        name: 'two_modify',\n        on: [\n          {\n            events: {signal: 'two_tuple'},\n            update: `modify(\\\"two_store\\\", ${twoExpr})`\n          }\n        ]\n      }\n    ]);\n  });\n\n  it('builds top-level signals', () => {\n    const oneSg = single.topLevelSignals(model, selCmpts['one'], []);\n    assert.sameDeepMembers(oneSg, [\n      {\n        name: 'one',\n        update: 'data(\"one_store\").length && {_vgsid_: data(\"one_store\")[0].values[0]}'\n      }\n    ]);\n\n    const twoSg = single.topLevelSignals(model, selCmpts['two'], []);\n    assert.sameDeepMembers(twoSg, [\n      {\n        name: 'two',\n        update:\n          'data(\"two_store\").length && {Miles_per_Gallon: data(\"two_store\")[0].values[0], Origin: data(\"two_store\")[0].values[1]}'\n      }\n    ]);\n\n    const signals = selection.assembleTopLevelSignals(model, []);\n    assert.deepEqual(\n      signals,\n      [\n        {\n          name: 'unit',\n          value: {},\n          on: [{events: 'mousemove', update: 'isTuple(group()) ? group() : unit'}]\n        }\n      ].concat(oneSg, twoSg)\n    );\n  });\n\n  it('builds unit datasets', () => {\n    const data: any[] = [];\n    assert.sameDeepMembers(selection.assembleUnitSelectionData(model, data), [\n      {name: 'one_store'},\n      {name: 'two_store'}\n    ]);\n  });\n\n  it('leaves marks alone', () => {\n    const marks: any[] = [];\n    model.component.selection = {one: selCmpts['one']};\n    assert.equal(selection.assembleUnitSelectionMarks(model, marks), marks);\n  });\n});\n"]}