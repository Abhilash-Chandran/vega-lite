{"version":3,"file":"transformextract.test.js","sourceRoot":"","sources":["../../test/transformextract.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport * as fs from 'fs';\nimport {compile} from '../src/compile/compile';\nimport {normalize} from '../src/spec';\nimport {extractTransforms} from '../src/transformextract';\nimport {StringSet} from '../src/util';\nimport {initConfig} from './../src/config';\nimport {NormalizedSpec, TopLevelSpec} from './../src/spec';\n\ndescribe('extractTransforms()', () => {\n  const specsDir = './examples/specs/';\n  // List of specs which don't compile to same Vega when their transforms are extracted due to\n  // various bugs.\n  const failsList: StringSet = {\n    'area_temperature_range.vl.json': true,\n    'bar_aggregate_count.vl.json': true,\n    'bar_binned_data.vl.json': true,\n    'bar_month.vl.json': true,\n    'bar_month_temporal.vl.json': true,\n    'bar_sort_by_count.vl.json': true,\n    'circle_binned.vl.json': true,\n    'circle_github_punchcard.vl.json': true,\n    'concat_bar_layer_circle.vl.json': true,\n    'concat_marginal_histograms.vl.json': true,\n    'errorbar_aggregate.vl.json': true,\n    'errorbar_horizontal_aggregate.vl.json': true,\n    'facet_independent_scale_layer_broken.vl.json': true,\n    'hconcat_weather.vl.json': true,\n    'histogram.vl.json': true,\n    'histogram_bin_change.vl.json': true,\n    'histogram_bin_transform.vl.json': true,\n    'histogram_no_spacing.vl.json': true,\n    'histogram_ordinal.vl.json': true,\n    'histogram_ordinal_sort.vl.json': true,\n    'histogram_sort_mean.vl.json': true,\n    'interactive_concat_layer.vl.json': true,\n    'interactive_layered_crossfilter.vl.json': true,\n    'interactive_layered_crossfilter_discrete.vl.json': true,\n    'interactive_seattle_weather.vl.json': true,\n    'layer_bar_dual_axis.vl.json': true,\n    'layer_bar_dual_axis_minmax.vl.json': true,\n    'layer_bar_month.vl.json': true,\n    'layer_circle_independent_color.vl.json': true,\n    'layer_falkensee.vl.json': true,\n    'layer_histogram.vl.json': true,\n    'layer_histogram_global_mean.vl.json': true,\n    'layer_line_color_rule.vl.json': true,\n    'layer_line_errorband_2d_horizontal_borders_strokedash.vl.json': true,\n    'layer_line_errorband_ci.vl.json': true,\n    'layer_line_errorband_pre_aggregated.vl.json': true,\n    'layer_overlay.vl.json': true,\n    'layer_point_errorbar_1d_horizontal.vl.json': true,\n    'layer_point_errorbar_1d_vertical.vl.json': true,\n    'layer_point_errorbar_2d_horizontal.vl.json': true,\n    'layer_point_errorbar_2d_horizontal_ci.vl.json': true,\n    'layer_point_errorbar_2d_horizontal_color_encoding.vl.json': true,\n    'layer_point_errorbar_2d_horizontal_custom_ticks.vl.json': true,\n    'layer_point_errorbar_2d_horizontal_iqr.vl.json': true,\n    'layer_point_errorbar_2d_horizontal_stdev.vl.json': true,\n    'layer_point_errorbar_2d_vertical.vl.json': true,\n    'layer_point_errorbar_ci.vl.json': true,\n    'layer_point_errorbar_stdev.vl.json': true,\n    'layer_precipitation_mean.vl.json': true,\n    'layer_rect_extent.vl.json': true,\n    'layer_scatter_errorband_1D_stdev_global_mean.vl.json': true,\n    'line_calculate.vl.json': true,\n    'line_color_binned.vl.json': true,\n    'line_max_year.vl.json': true,\n    'line_mean_month.vl.json': true,\n    'line_month.vl.json': true,\n    'line_quarter_legend.vl.json': true,\n    'line_timeunit_transform.vl.json': true,\n    'point_2d_aggregate.vl.json': true,\n    'point_binned_color.vl.json': true,\n    'point_binned_opacity.vl.json': true,\n    'point_binned_size.vl.json': true,\n    'point_dot_timeunit_color.vl.json': true,\n    'point_aggregate_detail.vl.json': true,\n    'rect_binned_heatmap.vl.json': true,\n    'rect_heatmap_weather.vl.json': true,\n    'rect_lasagna_future.vl.json': true,\n    'repeat_histogram.vl.json': true,\n    'repeat_histogram_flights.vl.json': true,\n    'repeat_layer.vl.json': true,\n    'repeat_line_weather.vl.json': true,\n    'rule_extent.vl.json': true,\n    'selection_brush_timeunit.vl.json': true,\n    'selection_layer_bar_month.vl.json': true,\n    'selection_project_binned_interval.vl.json': true,\n    'stacked_bar_count.vl.json': true,\n    'stacked_bar_size.vl.json': true,\n    'stacked_bar_weather.vl.json': true,\n    'test_aggregate_nested.vl.json': true,\n    'time_parse_local.vl.json': true,\n    'time_parse_utc_format.vl.json': true,\n    'trellis_bar_histogram.vl.json': true,\n    'trellis_bar_histogram_label_rotated.vl.json': true,\n    'trellis_barley.vl.json': true,\n    'trellis_barley_layer_median.vl.json': true,\n    'trellis_column_year.vl.json': true,\n    'trellis_cross_sort.vl.json': true,\n    'trellis_cross_sort_array.vl.json': true,\n    'trellis_line_quarter.vl.json': true,\n    'vconcat_weather.vl.json': true,\n    'window_mean_difference.vl.json': true\n  };\n  for (const file of fs.readdirSync(specsDir)) {\n    const filepath = specsDir + file;\n    if (filepath.slice(-5) === '.json') {\n      it(`should${failsList[file] ? ' NOT ' : ' '}compile ${filepath} to the same spec`, () => {\n        const specString = fs.readFileSync(filepath, 'utf8');\n\n        const spec = JSON.parse(specString);\n        const config = initConfig(spec.config);\n        const extractSpec = extractTransforms(normalize(spec, config), config) as TopLevelSpec;\n\n        const originalCompiled = compile(spec);\n        const transformCompiled = compile(extractSpec);\n\n        if (failsList[file]) {\n          expect(transformCompiled).not.toEqual(originalCompiled);\n        } else {\n          expect(transformCompiled).toEqual(originalCompiled);\n        }\n      });\n    }\n  }\n\n  describe('extractTransformsSingle()', () => {\n    it('should extract transforms from faceted spec', () => {\n      const spec: NormalizedSpec = {\n        name: 'faceted',\n        description: 'faceted spec',\n        data: {url: 'data/movies.json'},\n        facet: {\n          column: {field: 'MPAA_Rating', type: 'ordinal'}\n        },\n        spec: {\n          mark: 'point',\n          width: 123,\n          height: 234,\n          encoding: {\n            x: {field: 'Worldwide_Gross', type: 'quantitative'},\n            y: {type: 'quantitative', aggregate: 'count'}\n          }\n        }\n      };\n      const config = initConfig({});\n      const output = extractTransforms(spec, config);\n      expect(output).toEqual({\n        name: 'faceted',\n        description: 'faceted spec',\n        data: {url: 'data/movies.json'},\n        facet: {\n          column: {field: 'MPAA_Rating', type: 'ordinal'}\n        },\n        spec: {\n          transform: [\n            {\n              aggregate: [{op: 'count', as: 'count_*'}],\n              groupby: ['Worldwide_Gross']\n            }\n          ],\n          mark: 'point',\n          width: 123,\n          height: 234,\n          encoding: {\n            x: {field: 'Worldwide_Gross', type: 'quantitative'},\n            y: {field: 'count_*', type: 'quantitative', title: 'Number of Records'}\n          }\n        }\n      });\n    });\n  });\n  describe('extractTransformsLayered()', () => {\n    it('should extract transforms from a layered spec', () => {\n      const spec: NormalizedSpec = {\n        data: {url: 'data/seattle-weather.csv'},\n        layer: [\n          {\n            mark: 'bar',\n            encoding: {\n              x: {\n                timeUnit: 'month',\n                field: 'date',\n                type: 'ordinal'\n              },\n              y: {\n                aggregate: 'mean',\n                field: 'precipitation',\n                type: 'quantitative',\n                axis: {\n                  grid: false\n                }\n              }\n            }\n          },\n          {\n            mark: 'line',\n            encoding: {\n              x: {\n                timeUnit: 'month',\n                field: 'date',\n                type: 'ordinal'\n              },\n              y: {\n                aggregate: 'mean',\n                field: 'temp_max',\n                type: 'quantitative',\n                axis: {\n                  grid: false\n                },\n                scale: {zero: false}\n              },\n              color: {value: 'firebrick'}\n            }\n          }\n        ],\n        resolve: {scale: {y: 'independent'}}\n      };\n      const config = initConfig({});\n      const output = extractTransforms(normalize(spec, config), config);\n      expect(output).toEqual(\n        normalize(\n          {\n            data: {url: 'data/seattle-weather.csv'},\n            layer: [\n              {\n                transform: [\n                  {timeUnit: 'month', field: 'date', as: 'month_date'},\n                  {\n                    aggregate: [{op: 'mean', field: 'precipitation', as: 'mean_precipitation'}],\n                    groupby: ['month_date']\n                  }\n                ],\n                mark: 'bar',\n                encoding: {\n                  x: {\n                    field: 'month_date',\n                    type: 'ordinal',\n                    title: 'date (month)',\n                    axis: {format: '%b'}\n                  },\n                  y: {\n                    field: 'mean_precipitation',\n                    type: 'quantitative',\n                    title: 'Mean of precipitation',\n                    axis: {\n                      grid: false\n                    }\n                  }\n                }\n              },\n              {\n                mark: 'line',\n                transform: [\n                  {timeUnit: 'month', field: 'date', as: 'month_date'},\n                  {\n                    aggregate: [{op: 'mean', field: 'temp_max', as: 'mean_temp_max'}],\n                    groupby: ['month_date']\n                  }\n                ],\n                encoding: {\n                  x: {\n                    field: 'month_date',\n                    type: 'ordinal',\n                    title: 'date (month)',\n                    axis: {format: '%b'}\n                  },\n                  y: {\n                    field: 'mean_temp_max',\n                    type: 'quantitative',\n                    title: 'Mean of temp_max',\n                    axis: {\n                      grid: false\n                    },\n                    scale: {zero: false}\n                  },\n                  color: {value: 'firebrick'}\n                }\n              }\n            ],\n            resolve: {scale: {y: 'independent'}}\n          },\n          config\n        )\n      );\n    });\n  });\n});\n"]}