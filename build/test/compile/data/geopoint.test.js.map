{"version":3,"file":"geopoint.test.js","sourceRoot":"","sources":["../../../../test/compile/data/geopoint.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAC,MAAM,oCAAoC,CAAC;AAChE,OAAO,EAAC,YAAY,EAAC,MAAM,oCAAoC,CAAC;AAChE,OAAO,EAAC,QAAQ,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AAElD,OAAO,EAAC,cAAc,EAAC,MAAM,YAAY,CAAC;AAE1C,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,KAAK,GAAG,cAAc,CAAC;gBAC3B,IAAI,EAAE;oBACJ,GAAG,EAAE,mBAAmB;oBACxB,MAAM,EAAE;wBACN,IAAI,EAAE,KAAK;qBACZ;iBACF;gBACD,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE;oBACR,SAAS,EAAE;wBACT,KAAK,EAAE,WAAW;wBAClB,IAAI,EAAE,cAAc;qBACrB;oBACD,QAAQ,EAAE;wBACR,KAAK,EAAE,UAAU;wBACjB,IAAI,EAAE,cAAc;qBACrB;iBACF;aACF,CAAC,CAAC;YACH,KAAK,CAAC,KAAK,EAAE,CAAC;YAEd,MAAM,IAAI,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;YACpC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAEnC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAE5B,OAAO,IAAI,IAAI,IAAI,EAAE;gBACnB,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;gBAE1C,MAAM,SAAS,GAAyB,IAAqB,CAAC,QAAQ,EAAE,CAAC;gBACzE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBAC3C,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChG,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACnG,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;gBAC3C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;gBACpD,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;aACzB;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {DataFlowNode} from '../../../src/compile/data/dataflow';\nimport {GeoPointNode} from '../../../src/compile/data/geopoint';\nimport {contains, every} from '../../../src/util';\nimport {VgGeoPointTransform} from '../../../src/vega.schema';\nimport {parseUnitModel} from '../../util';\n\ndescribe('compile/data/geopoint', () => {\n  describe('geojson', () => {\n    it('should make transform and assemble correctly', () => {\n      const model = parseUnitModel({\n        data: {\n          url: 'data/zipcodes.csv',\n          format: {\n            type: 'csv'\n          }\n        },\n        mark: 'circle',\n        encoding: {\n          longitude: {\n            field: 'longitude',\n            type: 'quantitative'\n          },\n          latitude: {\n            field: 'latitude',\n            type: 'quantitative'\n          }\n        }\n      });\n      model.parse();\n\n      const root = new DataFlowNode(null);\n      GeoPointNode.parseAll(root, model);\n\n      let node = root.children[0];\n\n      while (node != null) {\n        expect(node).toBeInstanceOf(GeoPointNode);\n\n        const transform: VgGeoPointTransform = (node as GeoPointNode).assemble();\n        expect(transform.type).toEqual('geopoint');\n        expect(every(['longitude', 'latitude'], field => contains(transform.fields, field))).toBe(true);\n        expect(every([model.getName('x'), model.getName('y')], a => contains(transform.as, a))).toBe(true);\n        expect(transform.projection).toBeDefined();\n        expect(node.children.length).toBeLessThanOrEqual(1);\n        node = node.children[0];\n      }\n    });\n  });\n});\n"]}