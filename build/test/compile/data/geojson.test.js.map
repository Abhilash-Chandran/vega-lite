{"version":3,"file":"geojson.test.js","sourceRoot":"","sources":["../../../../test/compile/data/geojson.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAC,MAAM,oCAAoC,CAAC;AAChE,OAAO,EAAC,WAAW,EAAC,MAAM,mCAAmC,CAAC;AAC9D,OAAO,EAAC,QAAQ,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAC,oCAAoC,EAAC,MAAM,YAAY,CAAC;AAChE,8BAA8B;AAE9B,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,MAAM,KAAK,GAAG,oCAAoC,CAAC;YACjD,IAAI,EAAE;gBACJ,GAAG,EAAE,mBAAmB;gBACxB,MAAM,EAAE;oBACN,IAAI,EAAE,KAAK;iBACZ;aACF;YACD,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE;gBACR,SAAS,EAAE;oBACT,KAAK,EAAE,WAAW;oBAClB,IAAI,EAAE,cAAc;iBACrB;gBACD,QAAQ,EAAE;oBACR,KAAK,EAAE,UAAU;oBACjB,IAAI,EAAE,cAAc;iBACrB;aACF;SACF,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;QACpC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAElC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAE5B,OAAO,IAAI,IAAI,IAAI,EAAE;YACnB,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACzC,MAAM,SAAS,GAAI,IAAoB,CAAC,QAAQ,EAAE,CAAC;YACnD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAC1C,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;YAE5C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YACpD,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;SACzB;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {DataFlowNode} from '../../../src/compile/data/dataflow';\nimport {GeoJSONNode} from '../../../src/compile/data/geojson';\nimport {contains, every} from '../../../src/util';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n/* tslint:disable:quotemark */\n\ndescribe('compile/data/geojson', () => {\n  it('should make transform and assemble correctly', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {\n        url: 'data/zipcodes.csv',\n        format: {\n          type: 'csv'\n        }\n      },\n      mark: 'circle',\n      encoding: {\n        longitude: {\n          field: 'longitude',\n          type: 'quantitative'\n        },\n        latitude: {\n          field: 'latitude',\n          type: 'quantitative'\n        }\n      }\n    });\n\n    const root = new DataFlowNode(null);\n    GeoJSONNode.parseAll(root, model);\n\n    let node = root.children[0];\n\n    while (node != null) {\n      expect(node).toBeInstanceOf(GeoJSONNode);\n      const transform = (node as GeoJSONNode).assemble();\n      expect(transform.type).toEqual('geojson');\n      expect(every(['longitude', 'latitude'], field => contains(transform.fields, field))).toBe(true);\n      expect(transform.geojson).not.toBeDefined();\n\n      expect(node.children.length).toBeLessThanOrEqual(1);\n      node = node.children[0];\n    }\n  });\n});\n"]}