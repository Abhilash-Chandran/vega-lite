{"version":3,"file":"fold.test.js","sourceRoot":"","sources":["../../../../test/compile/data/fold.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAC,MAAM,sCAAsC,CAAC;AAClE,8BAA8B;AAE9B,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,iBAAiB,EAAC,MAAM,gCAAgC,CAAC;AAGjE,QAAQ,CAAC,mBAAmB,EAAE;IAC5B,EAAE,CAAC,qCAAqC,EAAE;QACxC,IAAM,SAAS,GAAc;YAC3B,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;YAChB,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;SACf,CAAC;QACF,IAAM,IAAI,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACpD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE;YAChC,IAAI,EAAE,MAAM;YACZ,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;YAClB,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;SACf,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;QACrC,IAAM,SAAS,GAAc;YAC3B,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;SACjB,CAAC;QAEF,IAAM,IAAI,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACpD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE;YAChC,IAAI,EAAE,MAAM;YACZ,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;YAClB,EAAE,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC;SACrB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;QACrC,IAAM,SAAS,GAAc;YAC3B,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;YAChB,EAAE,EAAE,CAAC,GAAG,CAAQ;SACjB,CAAC;QACF,IAAM,IAAI,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACpD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE;YAChC,IAAI,EAAE,MAAM;YACZ,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;YAClB,EAAE,EAAE,CAAC,GAAG,EAAE,OAAO,CAAC;SACnB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE;QACrD,IAAM,SAAS,GAAc;YAC3B,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;SACjB,CAAC;QACF,IAAM,IAAI,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACpD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,EAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE;QAC3D,IAAM,SAAS,GAAc;YAC3B,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;YAChB,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;SACf,CAAC;QACF,IAAM,IAAI,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACpD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,EAAC,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;QACrC,IAAM,SAAS,GAAc;YAC3B,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;YAChB,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;SACf,CAAC;QACF,IAAM,IAAI,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACpD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,iDAAiD,CAAC,CAAC;IACnF,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,EAAE;QAChB,EAAE,CAAC,2BAA2B,EAAE;YAC9B,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;YACtC,IAAM,IAAI,GAAG,IAAI,iBAAiB,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC;YAC1D,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {DataFlowNode} from './../../../src/compile/data/dataflow';\n/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {FoldTransformNode} from '../../../src/compile/data/fold';\nimport {Transform} from '../../../src/transform';\n\ndescribe('compile/data/fold', () => {\n  it('should return a proper vg transform', () => {\n    const transform: Transform = {\n      fold: ['a', 'b'],\n      as: ['a', 'b']\n    };\n    const fold = new FoldTransformNode(null, transform);\n    assert.deepEqual(fold.assemble(), {\n      type: 'fold',\n      fields: ['a', 'b'],\n      as: ['a', 'b']\n    });\n  });\n\n  it('should handle missing \"as\" field', () => {\n    const transform: Transform = {\n      fold: ['a', 'b']\n    };\n\n    const fold = new FoldTransformNode(null, transform);\n    assert.deepEqual(fold.assemble(), {\n      type: 'fold',\n      fields: ['a', 'b'],\n      as: ['key', 'value']\n    });\n  });\n\n  it('should handle partial \"as\" field', () => {\n    const transform: Transform = {\n      fold: ['a', 'b'],\n      as: ['A'] as any\n    };\n    const fold = new FoldTransformNode(null, transform);\n    assert.deepEqual(fold.assemble(), {\n      type: 'fold',\n      fields: ['a', 'b'],\n      as: ['A', 'value']\n    });\n  });\n\n  it('should return proper produced fields for no \"as\"', () => {\n    const transform: Transform = {\n      fold: ['a', 'b']\n    };\n    const fold = new FoldTransformNode(null, transform);\n    assert.deepEqual(fold.producedFields(), {key: true, value: true});\n  });\n\n  it('should return proper produced fields for complete \"as\"', () => {\n    const transform: Transform = {\n      fold: ['a', 'b'],\n      as: ['A', 'B']\n    };\n    const fold = new FoldTransformNode(null, transform);\n    assert.deepEqual(fold.producedFields(), {A: true, B: true});\n  });\n\n  it('should generate the correct hash', () => {\n    const transform: Transform = {\n      fold: ['a', 'b'],\n      as: ['A', 'B']\n    };\n    const fold = new FoldTransformNode(null, transform);\n    assert.deepEqual(fold.hash(), 'FoldTransform {\"as\":[\"A\",\"B\"],\"fold\":[\"a\",\"b\"]}');\n  });\n\n  describe('clone', () => {\n    it('should never clone parent', () => {\n      const parent = new DataFlowNode(null);\n      const fold = new FoldTransformNode(parent, {fold: ['a']});\n      expect(fold.clone().parent).toBeNull();\n    });\n  });\n});\n"]}