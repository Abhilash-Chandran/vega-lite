{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../test/normalize/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport {defaultConfig, initConfig} from '../../src/config';\nimport * as log from '../../src/log';\nimport {LocalLogger} from '../../src/log';\nimport {normalize} from '../../src/normalize/index';\n\n// describe('isStacked()') -- tested as part of stackOffset in stack.test.ts\n\ndescribe('normalize()', () => {\n  describe('normalizeFacetedUnit', () => {\n    it('should convert single extended spec with column into a composite spec', () => {\n      const spec: any = {\n        name: 'faceted',\n        width: 123,\n        height: 234,\n        description: 'faceted spec',\n        data: {url: 'data/movies.json'},\n        mark: 'point',\n        encoding: {\n          column: {field: 'MPAA_Rating', type: 'ordinal'},\n          x: {field: 'Worldwide_Gross', type: 'quantitative'},\n          y: {field: 'US_DVD_Sales', type: 'quantitative'}\n        }\n      };\n      const config = initConfig(spec.config);\n      expect(normalize(spec, config)).toEqual({\n        name: 'faceted',\n        description: 'faceted spec',\n        data: {url: 'data/movies.json'},\n        facet: {\n          column: {field: 'MPAA_Rating', type: 'ordinal'}\n        },\n        spec: {\n          mark: 'point',\n          width: 123,\n          height: 234,\n          encoding: {\n            x: {field: 'Worldwide_Gross', type: 'quantitative'},\n            y: {field: 'US_DVD_Sales', type: 'quantitative'}\n          }\n        }\n      });\n    });\n\n    it('should convert single extended spec with row into a composite spec', () => {\n      const spec: any = {\n        data: {url: 'data/movies.json'},\n        mark: 'point',\n        encoding: {\n          row: {field: 'MPAA_Rating', type: 'ordinal'},\n          x: {field: 'Worldwide_Gross', type: 'quantitative'},\n          y: {field: 'US_DVD_Sales', type: 'quantitative'}\n        }\n      };\n\n      const config = initConfig(spec.config);\n      expect(normalize(spec, config)).toEqual({\n        data: {url: 'data/movies.json'},\n        facet: {\n          row: {field: 'MPAA_Rating', type: 'ordinal'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'Worldwide_Gross', type: 'quantitative'},\n            y: {field: 'US_DVD_Sales', type: 'quantitative'}\n          }\n        }\n      });\n    });\n  });\n\n  describe('normalizeFacet', () => {\n    it('should produce correct layered specs for mean point and vertical error bar', () => {\n      expect(\n        normalize(\n          {\n            description:\n              'A error bar plot showing mean, min, and max in the US population distribution of age groups in 2000.',\n            data: {url: 'data/population.json'},\n            transform: [{calculate: \"(datum.sex==1) ? 'Men':'Women'\", as: 'sex'}],\n            facet: {row: {field: 'sex', type: 'ordinal'}},\n            spec: {\n              layer: [\n                {\n                  mark: 'errorbar',\n                  encoding: {x: {field: 'age', type: 'ordinal'}, y: {field: 'people', type: 'quantitative'}}\n                },\n                {\n                  mark: {type: 'point', opacity: 1, filled: true},\n                  encoding: {\n                    x: {field: 'age', type: 'ordinal'},\n                    y: {field: 'people', type: 'quantitative', aggregate: 'mean'}\n                  }\n                }\n              ]\n            }\n          },\n          defaultConfig\n        )\n      ).toEqual({\n        description:\n          'A error bar plot showing mean, min, and max in the US population distribution of age groups in 2000.',\n        data: {\n          url: 'data/population.json'\n        },\n        transform: [\n          {\n            calculate: \"(datum.sex==1) ? 'Men':'Women'\",\n            as: 'sex'\n          }\n        ],\n        facet: {\n          row: {\n            field: 'sex',\n            type: 'ordinal'\n          }\n        },\n        spec: {\n          layer: [\n            {\n              transform: [\n                {\n                  aggregate: [\n                    {op: 'stderr', field: 'people', as: 'extent_people'},\n                    {op: 'mean', field: 'people', as: 'center_people'}\n                  ],\n                  groupby: ['age']\n                },\n                {\n                  calculate: 'datum.center_people + datum.extent_people',\n                  as: 'upper_people'\n                },\n                {\n                  calculate: 'datum.center_people - datum.extent_people',\n                  as: 'lower_people'\n                }\n              ],\n              layer: [\n                {\n                  mark: {type: 'rule', style: 'errorbar-rule'},\n                  encoding: {\n                    y: {\n                      field: 'lower_people',\n                      type: 'quantitative',\n                      title: 'people'\n                    },\n                    y2: {field: 'upper_people', type: 'quantitative'},\n                    x: {field: 'age', type: 'ordinal'},\n                    tooltip: [\n                      {field: 'center_people', title: 'Mean of people', type: 'quantitative'},\n                      {field: 'upper_people', title: 'Mean + stderr of people', type: 'quantitative'},\n                      {field: 'lower_people', title: 'Mean - stderr of people', type: 'quantitative'},\n                      {field: 'age', type: 'ordinal'}\n                    ]\n                  }\n                }\n              ]\n            },\n            {\n              mark: {type: 'point', opacity: 1, filled: true},\n              encoding: {\n                x: {field: 'age', type: 'ordinal'},\n                y: {field: 'people', type: 'quantitative', aggregate: 'mean'}\n              }\n            }\n          ]\n        }\n      });\n    });\n  });\n\n  describe('normalizeLayer', () => {\n    it('correctly passes shared projection and encoding to children of layer', () => {\n      const output = normalize(\n        {\n          data: {url: 'data/population.json'},\n          projection: {type: 'mercator'},\n          encoding: {\n            x: {field: 'age', type: 'ordinal'}\n          },\n          layer: [\n            {mark: 'point'},\n            {\n              layer: [\n                {mark: 'rule'},\n                {\n                  mark: 'text',\n                  encoding: {\n                    text: {field: 'a', type: 'nominal'}\n                  }\n                }\n              ]\n            }\n          ]\n        },\n        defaultConfig\n      );\n\n      expect(output).toEqual({\n        data: {url: 'data/population.json'},\n        layer: [\n          {\n            projection: {type: 'mercator'},\n            mark: 'point',\n            encoding: {\n              x: {field: 'age', type: 'ordinal'}\n            }\n          },\n          {\n            layer: [\n              {\n                projection: {type: 'mercator'},\n                mark: 'rule',\n                encoding: {\n                  x: {field: 'age', type: 'ordinal'}\n                }\n              },\n              {\n                projection: {type: 'mercator'},\n                mark: 'text',\n                encoding: {\n                  x: {field: 'age', type: 'ordinal'},\n                  text: {field: 'a', type: 'nominal'}\n                }\n              }\n            ]\n          }\n        ]\n      });\n    });\n\n    it(\n      'correctly overrides shared projection and encoding and throws warnings',\n      log.wrap((localLogger: LocalLogger) => {\n        const output = normalize(\n          {\n            data: {url: 'data/population.json'},\n            projection: {type: 'mercator'},\n            encoding: {\n              x: {field: 'age', type: 'ordinal'}\n            },\n            layer: [\n              {\n                projection: {type: 'albersUsa'},\n                mark: 'rule'\n              },\n              {\n                mark: 'text',\n                encoding: {\n                  x: {field: 'a', type: 'nominal'}\n                }\n              }\n            ]\n          },\n          defaultConfig\n        );\n\n        expect(localLogger.warns.length).toEqual(2);\n\n        expect(localLogger.warns[0]).toEqual(\n          log.message.projectionOverridden({\n            parentProjection: {type: 'mercator'},\n            projection: {type: 'albersUsa'}\n          })\n        );\n\n        expect(localLogger.warns[1]).toEqual(log.message.encodingOverridden(['x']));\n\n        expect(output).toEqual({\n          data: {url: 'data/population.json'},\n          layer: [\n            {\n              projection: {type: 'albersUsa'},\n              mark: 'rule',\n              encoding: {\n                x: {field: 'age', type: 'ordinal'}\n              }\n            },\n            {\n              projection: {type: 'mercator'},\n              mark: 'text',\n              encoding: {\n                x: {field: 'a', type: 'nominal'}\n              }\n            }\n          ]\n        });\n      })\n    );\n  });\n});\n"]}