{"version":3,"file":"util.test.js","sourceRoot":"","sources":["../../test/util.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  differArray,\n  entries,\n  fieldIntersection,\n  fill,\n  flatAccessWithDatum,\n  hasIntersection,\n  isEqual,\n  isNumeric,\n  prefixGenerator,\n  setEqual,\n  unique,\n  uniqueId\n} from '../src/util';\n\nimport {\n  accessPathDepth,\n  accessPathWithDatum,\n  deleteNestedProperty,\n  hash,\n  replacePathInField,\n  stringify,\n  varName\n} from '../src/util';\n\ndescribe('util', () => {\n  describe('varName', () => {\n    it('replaces all non-alphanumeric characters with _', () => {\n      expect(varName('bin-mpg$!@#%_+1')).toBe('bin_mpg_______1');\n    });\n\n    it('prepends _ if the string starts with number', () => {\n      expect(varName('1a')).toBe('_1a');\n    });\n  });\n\n  describe('stringify', () => {\n    it('stringifies numbers', () => {\n      expect(stringify(12)).toBe('12');\n    });\n\n    it('stringifies booleans', () => {\n      expect(stringify(true)).toBe('true');\n    });\n\n    it('stringifies strings', () => {\n      expect(stringify('foo')).toBe('\"foo\"');\n    });\n\n    it('stringifies objects', () => {\n      expect(stringify({foo: 42})).toBe('{\"foo\":42}');\n    });\n  });\n\n  describe('hash', () => {\n    it('hashes numbers as numbers', () => {\n      expect(hash(12)).toBe(12);\n    });\n\n    it('hashes booleans as strings so that they can be used as keys', () => {\n      expect(hash(true)).toBe('true');\n    });\n\n    it('hashes strings as strings', () => {\n      expect(hash('foo')).toBe('foo');\n    });\n\n    it('hashes objects', () => {\n      expect(hash({foo: 42})).toBe('{\"foo\":42}');\n    });\n  });\n  describe('deleteNestedProperty', () => {\n    it('removes a property from an object', () => {\n      const originalObject = {\n        property1: {property1: 'value1'},\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      const newObject = {\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      deleteNestedProperty(originalObject, ['property1']);\n      expect(stringify(originalObject)).toBe(stringify(newObject));\n    });\n\n    it('removes nested properties', () => {\n      const originalObject = {\n        property1: {property4: 'value1'},\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      const newObject = {\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      deleteNestedProperty(originalObject, ['property1', 'property4']);\n      expect(stringify(originalObject)).toBe(stringify(newObject));\n    });\n\n    it('stops when it does not empty the last element', () => {\n      const originalObject = {\n        property1: {property4: 'value1'},\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      const newObject = {\n        property1: {property4: 'value1'},\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3'}\n      };\n      deleteNestedProperty(originalObject, ['property3', 'property7']);\n      expect(stringify(originalObject)).toBe(stringify(newObject));\n    });\n  });\n\n  describe('accessPathWithDatum', () => {\n    it('should parse foo', () => {\n      expect(accessPathWithDatum('foo')).toBe('datum[\"foo\"]');\n    });\n\n    it('should parse foo.bar', () => {\n      expect(accessPathWithDatum('foo.bar')).toBe('datum[\"foo\"] && datum[\"foo\"][\"bar\"]');\n    });\n\n    it('should support cusotom datum', () => {\n      expect(accessPathWithDatum('foo', 'parent')).toBe('parent[\"foo\"]');\n    });\n  });\n\n  describe('flatAccessWithDatum', () => {\n    it('should parse foo.bar', () => {\n      expect(flatAccessWithDatum('foo.bar')).toBe('datum[\"foo.bar\"]');\n    });\n\n    it('should return string value of field name', () => {\n      expect(flatAccessWithDatum('foo[\"bar\"].baz')).toBe('datum[\"foo.bar.baz\"]');\n    });\n\n    it('should support cusotom datum', () => {\n      expect(flatAccessWithDatum('foo', 'parent')).toBe('parent[\"foo\"]');\n    });\n  });\n\n  describe('accessPathDepth', () => {\n    it('should return 1 if the field is not nested', () => {\n      expect(accessPathDepth('foo')).toBe(1);\n    });\n\n    it('should return 1 if . is escaped', () => {\n      expect(accessPathDepth('foo\\\\.bar')).toBe(1);\n    });\n\n    it('should return 2 for foo.bar', () => {\n      expect(accessPathDepth('foo.bar')).toBe(2);\n    });\n  });\n\n  describe('removePathFromField', () => {\n    it('should convert nested accesses to \\\\.', () => {\n      expect(replacePathInField('foo[\"bar\"].baz')).toBe('foo\\\\.bar\\\\.baz');\n    });\n\n    it('should keep \\\\.', () => {\n      expect(replacePathInField('foo\\\\.bar')).toBe('foo\\\\.bar');\n    });\n  });\n\n  describe('prefixGenerator', () => {\n    it('should return the correct value for simple nested field', () => {\n      expect(prefixGenerator(new Set(['a.b']))).toEqual(new Set(['a', 'a[b]']));\n    });\n\n    it('should return the correct value for multilevel nested field', () => {\n      expect(prefixGenerator(new Set(['a[b].c.d']))).toEqual(new Set(['a', 'a[b]', 'a[b][c]', 'a[b][c][d]']));\n    });\n  });\n\n  describe('setEqual', () => {\n    it('should return true for equal sets', () => {\n      expect(setEqual(new Set([1, 2, 3]), new Set([3, 2, 1]))).toBe(true);\n      expect(setEqual(new Set([]), new Set([]))).toBe(true);\n    });\n\n    it('should return false for unequal sets', () => {\n      expect(setEqual(new Set([1, 2, 3]), new Set([2, 3]))).toBe(false);\n      expect(setEqual(new Set([1, 2]), new Set([2, 3]))).toBe(false);\n      expect(setEqual(new Set([1]), new Set([]))).toBe(false);\n      expect(setEqual(new Set([]), new Set([1]))).toBe(false);\n    });\n  });\n\n  describe('hasIntersection', () => {\n    it('should return true for sets that intersect', () => {\n      expect(hasIntersection(new Set([1, 2, 3]), new Set([3, 4]))).toBe(true);\n      expect(hasIntersection(new Set([1]), new Set([1, 2]))).toBe(true);\n      expect(hasIntersection(new Set([1, 2]), new Set([1]))).toBe(true);\n    });\n\n    it('should return false for distinct sets', () => {\n      expect(hasIntersection(new Set([1, 2, 3]), new Set([4, 5]))).toBe(false);\n      expect(hasIntersection(new Set([1]), new Set([]))).toBe(false);\n      expect(hasIntersection(new Set([]), new Set([1]))).toBe(false);\n    });\n  });\n\n  describe('fieldIntersection', () => {\n    it('should return the correct value for 2 string sets', () => {\n      expect(fieldIntersection(new Set(['a.b', 'd']), new Set(['a[b]']))).toBe(true);\n    });\n    it('should return the correct value for 2 nested but different string sets', () => {\n      expect(fieldIntersection(new Set(['a.b.c']), new Set(['a.b.d']))).toBe(true);\n    });\n\n    it('should return the correct value for 2 nested but different string sets', () => {\n      expect(fieldIntersection(new Set(['a.b.c']), new Set(['z.b.c']))).toBe(false);\n    });\n  });\n\n  describe('unique', () => {\n    it('should collapse the same numbers', () => {\n      expect(unique([1, 2, 3, 2], d => d)).toEqual([1, 2, 3]);\n    });\n    it('should collapse the same items with strings', () => {\n      expect(unique([1, 2, 'a', 'a'], d => d)).toEqual([1, 2, 'a']);\n    });\n  });\n\n  describe('entries', () => {\n    it('should return entries', () => {\n      expect(entries({a: 12, b: 42})).toEqual([{key: 'a', value: 12}, {key: 'b', value: 42}]);\n    });\n  });\n\n  describe('uniqueId', () => {\n    it('should return new id', () => {\n      expect(uniqueId() === uniqueId()).toBeFalsy();\n    });\n  });\n\n  describe('fill', () => {\n    it('should return array of right length and filled with the right values', () => {\n      const arr = fill(42, 5);\n      expect(arr).toHaveLength(5);\n      expect(arr).toEqual([42, 42, 42, 42, 42]);\n    });\n  });\n  describe('isEqual', () => {\n    it('should return false when dict is a subset of other', () => {\n      expect(isEqual({a: 1}, {a: 1, b: 2})).toBe(false);\n    });\n    it('should return false when other is a subset of dict', () => {\n      expect(isEqual({a: 1, b: 2}, {a: 1})).toBe(false);\n    });\n    it('should return true when dicts are equal', () => {\n      expect(isEqual({a: 1, b: 2}, {a: 1, b: 2})).toBe(true);\n    });\n    it('should return false when key values differ', () => {\n      expect(isEqual({a: 1}, {a: 2})).toBe(false);\n    });\n  });\n  describe('differArray', () => {\n    it('should return false when both arrays are empty', () => {\n      expect(differArray([], [])).toBe(false);\n    });\n    it('should return true when lengths differ', () => {\n      const a = [1, 2, 3];\n      const b = [1, 2];\n      expect(differArray(a, b)).toBe(true);\n    });\n    it('should return false when arrays are same sorted', () => {\n      const a = [3, 2, 1];\n      const b = [1, 2, 3];\n      expect(differArray(a, b)).toBe(false);\n    });\n  });\n  describe('isNumeric', () => {\n    it('should return true for integers', () => {\n      expect(isNumeric(1)).toBe(true);\n      expect(isNumeric(-1)).toBe(true);\n    });\n    it('should be true for real numbers', () => {\n      expect(isNumeric(0.0)).toBe(true);\n      expect(isNumeric(3.14)).toBe(true);\n    });\n    it('should return false for NaN', () => {\n      expect(isNumeric(NaN)).toBe(false);\n    });\n    it('should return false for text', () => {\n      expect(isNumeric('foo')).toBe(false);\n    });\n  });\n});\n"]}