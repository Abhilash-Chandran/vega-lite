{"version":3,"file":"predicate.test.js","sourceRoot":"","sources":["../../test/predicate.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {expression} from '../src/compile/predicate';\nimport {\n  fieldFilterExpression,\n  isFieldEqualPredicate,\n  isFieldLTEPredicate,\n  isFieldOneOfPredicate,\n  isFieldRangePredicate,\n  isFieldValidPredicate,\n  Predicate\n} from '../src/predicate';\nimport {TimeUnit} from '../src/timeunit';\nimport {without} from '../src/util';\nimport {FieldValidPredicate} from './../src/predicate';\n\ndescribe('filter', () => {\n  const equalFilter = {field: 'color', equal: 'red'};\n  const oneOfFilter = {field: 'color', oneOf: ['red', 'yellow']};\n  const rangeFilter = {field: 'x', range: [0, 5]};\n  const exprFilter = 'datum[\"x\"]===5';\n  const lessThanEqualsFilter = {field: 'x', lte: 'z'};\n  const validFilter: FieldValidPredicate = {field: 'x', valid: true};\n\n  const allFilters: Predicate[] = [\n    equalFilter,\n    lessThanEqualsFilter,\n    oneOfFilter,\n    rangeFilter,\n    validFilter,\n    exprFilter\n  ];\n\n  describe('isEqualFilter', () => {\n    it('should return true for an equal filter', () => {\n      expect(isFieldEqualPredicate(equalFilter)).toBe(true);\n    });\n\n    it('should return false for other filters', () => {\n      without(allFilters, [equalFilter]).forEach(filter => {\n        expect(isFieldEqualPredicate(filter)).toBe(false);\n      });\n    });\n  });\n\n  describe('islessThanEqualsFilter', () => {\n    it('should return true for less than equals to filter', () => {\n      expect(isFieldLTEPredicate(lessThanEqualsFilter)).toBe(true);\n    });\n\n    it('should return false for other filters', () => {\n      without(allFilters, [lessThanEqualsFilter]).forEach(filter => {\n        expect(isFieldLTEPredicate(filter)).toBe(false);\n      });\n    });\n  });\n\n  describe('isOneOfFilter', () => {\n    it('should return true for an in filter', () => {\n      expect(isFieldOneOfPredicate(oneOfFilter)).toBe(true);\n    });\n\n    it('should return false for other filters', () => {\n      without(allFilters, [oneOfFilter]).forEach(filter => {\n        expect(isFieldOneOfPredicate(filter)).toBe(false);\n      });\n    });\n  });\n\n  describe('isRangeFilter', () => {\n    it('should return true for a range filter', () => {\n      expect(isFieldRangePredicate(rangeFilter)).toBe(true);\n    });\n\n    it('should return false for other filters', () => {\n      without(allFilters, [rangeFilter]).forEach(filter => {\n        expect(isFieldRangePredicate(filter)).toBe(false);\n      });\n    });\n  });\n\n  describe('isValidFilter', () => {\n    it('should return true for a valid filter', () => {\n      expect(isFieldValidPredicate(validFilter)).toBe(true);\n    });\n\n    it('should return false for other filters', () => {\n      without(allFilters, [validFilter]).forEach(filter => {\n        expect(isFieldValidPredicate(filter)).toBe(false);\n      });\n    });\n  });\n\n  describe('expression', () => {\n    it('should return a correct expression for an EqualFilter', () => {\n      const expr = expression(null, {field: 'color', equal: 'red'});\n      expect(expr).toEqual('datum[\"color\"]===\"red\"');\n    });\n\n    it('should return correct expression for lessThan', () => {\n      const expr = expression(null, {field: 'x', lt: 1});\n      expect(expr).toEqual('datum[\"x\"]<1');\n    });\n\n    it('should return correct expression for greaterThan', () => {\n      const expr = expression(null, {field: 'x', gt: 'aardvark'});\n      expect(expr).toEqual('datum[\"x\"]>\"aardvark\"');\n    });\n\n    it('should return correct expression for lessThanEquals', () => {\n      const expr = expression(null, {field: 'x', lte: 'zyzzyva'});\n      expect(expr).toEqual('datum[\"x\"]<=\"zyzzyva\"');\n    });\n\n    it('should return correct expression for greaterThanEquals', () => {\n      const expr = expression(null, {field: 'x', gte: 1});\n      expect(expr).toEqual('datum[\"x\"]>=1');\n    });\n\n    it('should return correct expression for valid', () => {\n      const expr = expression(null, {field: 'x', valid: true});\n      expect(expr).toEqual('datum[\"x\"]!==null&&!isNaN(datum[\"x\"])');\n    });\n\n    it('should return a correct expression for an EqualFilter with datetime object', () => {\n      const expr = expression(null, {\n        field: 'date',\n        equal: {\n          month: 'January'\n        }\n      });\n      expect(expr).toEqual('datum[\"date\"]===time(datetime(0, 0, 1, 0, 0, 0, 0))');\n    });\n\n    it('should return a correct expression for an EqualFilter with time unit and datetime object', () => {\n      const expr = expression(null, {\n        timeUnit: TimeUnit.MONTH,\n        field: 'date',\n        equal: {\n          month: 'January'\n        }\n      });\n      expect(expr).toEqual(\n        'time(datetime(0, month(datum[\"date\"]), 1, 0, 0, 0, 0))===time(datetime(0, 0, 1, 0, 0, 0, 0))'\n      );\n    });\n\n    it('should return a correct expression for an EqualFilter with datetime object', () => {\n      const expr = expression(null, {\n        timeUnit: TimeUnit.MONTH,\n        field: 'date',\n        equal: 'January'\n      });\n      expect(expr).toEqual(\n        'time(datetime(0, month(datum[\"date\"]), 1, 0, 0, 0, 0))===time(datetime(0, 0, 1, 0, 0, 0, 0))'\n      );\n    });\n\n    it('should return a correct expression for an lessThanFilter with datetime object', () => {\n      const expr = expression(null, {\n        field: 'date',\n        lt: {\n          month: 'February'\n        }\n      });\n      expect(expr).toEqual('datum[\"date\"]<time(datetime(0, 1, 1, 0, 0, 0, 0))');\n    });\n\n    it('should return a correct expression for an greaterThanFilter with time unit and datetime object', () => {\n      const expr = expression(null, {\n        timeUnit: TimeUnit.MONTH,\n        field: 'date',\n        gt: {\n          month: 'January'\n        }\n      });\n      expect(expr).toEqual(\n        'time(datetime(0, month(datum[\"date\"]), 1, 0, 0, 0, 0))>time(datetime(0, 0, 1, 0, 0, 0, 0))'\n      );\n    });\n\n    it('should return a correct expression for an greaterThanEqualsFilter with datetime object', () => {\n      const expr = expression(null, {\n        timeUnit: TimeUnit.MONTH,\n        field: 'date',\n        gte: 'January'\n      });\n      expect(expr).toEqual(\n        'time(datetime(0, month(datum[\"date\"]), 1, 0, 0, 0, 0))>=time(datetime(0, 0, 1, 0, 0, 0, 0))'\n      );\n    });\n\n    it('should return a correct expression for an InFilter', () => {\n      const expr = expression(null, {field: 'color', oneOf: ['red', 'yellow']});\n      expect(expr).toEqual('indexof([\"red\",\"yellow\"], datum[\"color\"]) !== -1');\n    });\n\n    it('should return a correct expression for a RangeFilter', () => {\n      const expr = expression(null, {field: 'x', range: [0, 5]});\n      expect(expr).toEqual('inrange(datum[\"x\"], [0, 5])');\n    });\n\n    it('should return a correct expression for a RangeFilter with no lower bound', () => {\n      const expr = expression(null, {field: 'x', range: [null, 5]});\n      expect(expr).toEqual('datum[\"x\"] <= 5');\n    });\n\n    it('should return a correct expression for a RangeFilter with no upper bound', () => {\n      const expr = expression(null, {field: 'x', range: [0, null]});\n      expect(expr).toEqual('datum[\"x\"] >= 0');\n    });\n\n    it('should return true for a RangeFilter with no bound', () => {\n      const expr = expression(null, {field: 'x', range: [null, null]});\n      expect(expr).toEqual('true');\n    });\n\n    it('should return a correct expression for an expression filter', () => {\n      const expr = expression(null, 'datum[\"x\"]===5');\n      expect(expr).toEqual('datum[\"x\"]===5');\n    });\n  });\n\n  it('generates expressions for composed filters', () => {\n    let expr = expression(null, {not: {field: 'color', equal: 'red'}});\n    expect(expr).toEqual('!(datum[\"color\"]===\"red\")');\n\n    expr = expression(null, {\n      and: [{field: 'color', equal: 'red'}, {field: 'x', range: [0, 5]}]\n    });\n\n    expect(expr).toEqual('(datum[\"color\"]===\"red\") && (inrange(datum[\"x\"], [0, 5]))');\n\n    expr = expression(null, {\n      and: [\n        {field: 'color', oneOf: ['red', 'yellow']},\n        {\n          or: [{field: 'x', range: [0, null]}, 'datum.price > 10', {not: 'datum[\"x\"]===5'}]\n        }\n      ]\n    });\n\n    expect(expr).toEqual(\n      '(indexof([\"red\",\"yellow\"], datum[\"color\"]) !== -1) && ' +\n        '((datum[\"x\"] >= 0) || (datum.price > 10) || (!(datum[\"x\"]===5)))'\n    );\n  });\n\n  describe('fieldFilterExpression', () => {\n    it('generates a range predicate using inequalities when useInRange=false', () => {\n      const expr = fieldFilterExpression({field: 'x', range: [0, 5]}, false);\n      expect(expr).toEqual('datum[\"x\"] >= 0 && datum[\"x\"] <= 5');\n    });\n  });\n});\n"]}