{"version":3,"file":"impute.test.js","sourceRoot":"","sources":["../../../../test/compile/data/impute.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {ImputeNode} from '../../../src/compile/data/impute';\nimport {Transform} from '../../../src/transform';\nimport {parseUnitModelWithScale} from '../../util';\n\ndescribe('compile/data/impute', () => {\n  describe('Impute Transform', () => {\n    it('should return a proper vg transform', () => {\n      const transform: Transform = {\n        impute: 'y',\n        key: 'x',\n        method: 'value',\n        value: 200\n      };\n      const impute = new ImputeNode(null, transform);\n\n      assert.deepEqual(impute.assemble(), [\n        {\n          type: 'impute',\n          field: 'y',\n          key: 'x',\n          method: 'value',\n          value: null\n        },\n        {\n          type: 'formula',\n          expr: 'datum.y === null ? 200 : datum.y',\n          as: 'y'\n        }\n      ]);\n    });\n\n    it('should use keyvals and mean correctly', () => {\n      const transform: Transform = {\n        impute: 'y',\n        key: 'x',\n        keyvals: [2, 3],\n        method: 'mean'\n      };\n      const impute = new ImputeNode(null, transform);\n      assert.deepEqual(impute.assemble(), [\n        {\n          type: 'impute',\n          field: 'y',\n          key: 'x',\n          keyvals: [2, 3],\n          method: 'value',\n          value: null\n        },\n        {\n          type: 'window',\n          as: ['imputed_y_value'],\n          ops: ['mean'],\n          fields: ['y'],\n          frame: [null, null],\n          ignorePeers: false\n        },\n        {\n          type: 'formula',\n          expr: 'datum.y === null ? datum.imputed_y_value : datum.y',\n          as: 'y'\n        }\n      ]);\n    });\n\n    it('should handle every property correctly', () => {\n      const transform: Transform = {\n        impute: 'y',\n        key: 'x',\n        keyvals: [3, 5],\n        method: 'max',\n        groupby: ['a', 'b']\n      };\n      const impute = new ImputeNode(null, transform);\n      assert.deepEqual(impute.assemble(), [\n        {\n          type: 'impute',\n          field: 'y',\n          key: 'x',\n          keyvals: [3, 5],\n          method: 'value',\n          groupby: ['a', 'b'],\n          value: null\n        },\n        {\n          type: 'window',\n          as: ['imputed_y_value'],\n          ops: ['max'],\n          fields: ['y'],\n          frame: [null, null],\n          ignorePeers: false,\n          groupby: ['a', 'b']\n        },\n        {\n          type: 'formula',\n          expr: 'datum.y === null ? datum.imputed_y_value : datum.y',\n          as: 'y'\n        }\n      ]);\n    });\n\n    it('should handle sequence keyvals', () => {\n      const transform: Transform = {\n        impute: 'y',\n        key: 'x',\n        keyvals: {start: 3, stop: 5},\n        method: 'max',\n        groupby: ['a', 'b']\n      };\n      const impute = new ImputeNode(null, transform);\n      assert.deepEqual(impute.assemble(), [\n        {\n          type: 'impute',\n          field: 'y',\n          key: 'x',\n          keyvals: {signal: 'sequence(3,5)'},\n          method: 'value',\n          groupby: ['a', 'b'],\n          value: null\n        },\n        {\n          type: 'window',\n          as: ['imputed_y_value'],\n          ops: ['max'],\n          fields: ['y'],\n          frame: [null, null],\n          ignorePeers: false,\n          groupby: ['a', 'b']\n        },\n        {\n          type: 'formula',\n          expr: 'datum.y === null ? datum.imputed_y_value : datum.y',\n          as: 'y'\n        }\n      ]);\n    });\n\n    it('should handle window correctly', () => {\n      const transform: Transform = {\n        impute: 'y',\n        key: 'x',\n        method: 'max',\n        groupby: ['a', 'b'],\n        frame: [-2, 2]\n      };\n\n      const impute = new ImputeNode(null, transform);\n      assert.deepEqual(impute.assemble(), [\n        {\n          type: 'impute',\n          field: 'y',\n          key: 'x',\n          method: 'value',\n          groupby: ['a', 'b'],\n          value: null\n        },\n        {\n          type: 'window',\n          as: ['imputed_y_value'],\n          ops: ['max'],\n          fields: ['y'],\n          frame: [-2, 2],\n          ignorePeers: false,\n          groupby: ['a', 'b']\n        },\n        {\n          type: 'formula',\n          expr: 'datum.y === null ? datum.imputed_y_value : datum.y',\n          as: 'y'\n        }\n      ]);\n    });\n  });\n\n  describe('Impute Encoding', () => {\n    it('should work for value impute', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n          y: {field: 'variety', type: 'quantitative', impute: {value: 500}},\n          color: {field: 'site', type: 'nominal'}\n        }\n      });\n      const result = ImputeNode.makeFromEncoding(null, model);\n      assert.deepEqual(result.assemble() as any, [\n        {\n          type: 'impute',\n          field: 'variety',\n          key: 'yield',\n          method: 'value',\n          groupby: ['site'],\n          value: null\n        },\n        {\n          type: 'formula',\n          expr: 'datum.variety === null ? 500 : datum.variety',\n          as: 'variety'\n        }\n      ]);\n    });\n\n    it('should work for falsy value impute', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n          y: {field: 'variety', type: 'quantitative', impute: {value: 0}},\n          color: {field: 'site', type: 'nominal'}\n        }\n      });\n      const result = ImputeNode.makeFromEncoding(null, model);\n      assert.deepEqual(result.assemble() as any, [\n        {\n          type: 'impute',\n          field: 'variety',\n          key: 'yield',\n          method: 'value',\n          groupby: ['site'],\n          value: null\n        },\n        {\n          type: 'formula',\n          expr: 'datum.variety === null ? 0 : datum.variety',\n          as: 'variety'\n        }\n      ]);\n    });\n\n    it('should work for method impute', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n          y: {field: 'variety', type: 'quantitative', impute: {method: 'max'}},\n          color: {field: 'site', type: 'nominal'}\n        }\n      });\n      const result = ImputeNode.makeFromEncoding(null, model);\n      assert.deepEqual(result.assemble() as any, [\n        {\n          type: 'impute',\n          field: 'variety',\n          key: 'yield',\n          method: 'value',\n          groupby: ['site'],\n          value: null\n        },\n        {\n          type: 'window',\n          as: ['imputed_variety_value'],\n          ops: ['max'],\n          fields: ['variety'],\n          frame: [null, null],\n          ignorePeers: false,\n          groupby: ['site']\n        },\n        {\n          type: 'formula',\n          expr: 'datum.variety === null ? datum.imputed_variety_value : datum.variety',\n          as: 'variety'\n        }\n      ]);\n    });\n\n    it('should handle sequence keyvals in encoding', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n          y: {field: 'variety', type: 'quantitative', impute: {method: 'max', keyvals: {start: 3, stop: 5}}},\n          color: {field: 'site', type: 'nominal'}\n        }\n      });\n      const result = ImputeNode.makeFromEncoding(null, model);\n      assert.deepEqual(result.assemble(), [\n        {\n          type: 'impute',\n          field: 'variety',\n          key: 'yield',\n          keyvals: {signal: 'sequence(3,5)'},\n          method: 'value',\n          groupby: ['site'],\n          value: null\n        },\n        {\n          type: 'window',\n          as: ['imputed_variety_value'],\n          ops: ['max'],\n          fields: ['variety'],\n          frame: [null, null],\n          ignorePeers: false,\n          groupby: ['site']\n        },\n        {\n          type: 'formula',\n          expr: 'datum.variety === null ? datum.imputed_variety_value : datum.variety',\n          as: 'variety'\n        }\n      ]);\n    });\n\n    it('should work when method and frame are specified', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n          y: {field: 'variety', type: 'quantitative', impute: {method: 'mean', frame: [-2, 2]}},\n          color: {field: 'site', type: 'nominal'}\n        }\n      });\n      const result = ImputeNode.makeFromEncoding(null, model);\n      assert.deepEqual(result.assemble() as any, [\n        {\n          type: 'impute',\n          field: 'variety',\n          key: 'yield',\n          method: 'value',\n          groupby: ['site'],\n          value: null\n        },\n        {\n          type: 'window',\n          as: ['imputed_variety_value'],\n          ops: ['mean'],\n          fields: ['variety'],\n          frame: [-2, 2],\n          ignorePeers: false,\n          groupby: ['site']\n        },\n        {\n          type: 'formula',\n          expr: 'datum.variety === null ? datum.imputed_variety_value : datum.variety',\n          as: 'variety'\n        }\n      ]);\n    });\n\n    it('should work when value and frame are specified', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n          y: {field: 'variety', type: 'quantitative', impute: {method: 'value', value: 20, frame: [-2, 2]}},\n          color: {field: 'site', type: 'nominal'}\n        }\n      });\n\n      const result = ImputeNode.makeFromEncoding(null, model);\n      assert.deepEqual(result.assemble() as any, [\n        {\n          type: 'impute',\n          field: 'variety',\n          key: 'yield',\n          method: 'value',\n          groupby: ['site'],\n          value: null\n        },\n        {\n          type: 'formula',\n          expr: 'datum.variety === null ? 20 : datum.variety',\n          as: 'variety'\n        }\n      ]);\n    });\n  });\n});\n"]}