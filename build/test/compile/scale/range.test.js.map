{"version":3,"file":"range.test.js","sourceRoot":"","sources":["../../../../test/compile/scale/range.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {\n  defaultContinuousToDiscreteCount,\n  interpolateRange,\n  MAX_SIZE_RANGE_STEP_RATIO,\n  parseRangeForChannel\n} from '../../../src/compile/scale/range';\nimport {makeExplicit, makeImplicit} from '../../../src/compile/split';\nimport {Config, defaultConfig} from '../../../src/config';\nimport * as log from '../../../src/log';\nimport {Mark} from '../../../src/mark';\nimport {CONTINUOUS_TO_CONTINUOUS_SCALES, DISCRETE_DOMAIN_SCALES, ScaleType} from '../../../src/scale';\nimport {NOMINAL, ORDINAL, QUANTITATIVE} from '../../../src/type';\n\nconst identity = (x: string) => x;\n\ndescribe('compile/scale', () => {\n  describe('parseRange()', () => {\n    describe('position', () => {\n      it('should return [0, plot_width] for x-continuous scales by default.', () => {\n        for (const scaleType of CONTINUOUS_TO_CONTINUOUS_SCALES) {\n          expect(\n            parseRangeForChannel(\n              'x',\n              identity,\n              scaleType,\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              true,\n              'point',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeImplicit([0, {signal: 'plot_width'}]));\n        }\n      });\n\n      it('should return [plot_height,0] for y-continuous scales by default.', () => {\n        for (const scaleType of CONTINUOUS_TO_CONTINUOUS_SCALES) {\n          expect(\n            parseRangeForChannel(\n              'y',\n              identity,\n              scaleType,\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              true,\n              'point',\n              false,\n              'plot_height',\n              []\n            )\n          ).toEqual(makeImplicit([{signal: 'plot_height'}, 0]));\n        }\n      });\n\n      it('should return [0, plot_height] for y-discrete scales with height by default.', () => {\n        for (const scaleType of DISCRETE_DOMAIN_SCALES) {\n          expect(\n            parseRangeForChannel(\n              'y',\n              identity,\n              scaleType,\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              true,\n              'point',\n              true,\n              'plot_height',\n              []\n            )\n          ).toEqual(makeImplicit([0, {signal: 'plot_height'}]));\n        }\n      });\n\n      it(\n        'should support custom range.',\n        log.wrap(localLogger => {\n          expect(\n            parseRangeForChannel(\n              'x',\n              identity,\n              'linear',\n              QUANTITATIVE,\n              {range: [0, 100]},\n              defaultConfig,\n              true,\n              'point',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeExplicit([0, 100]));\n          expect(localLogger.warns.length).toEqual(0);\n        })\n      );\n\n      it('should return config.scale.rangeStep for band/point scales by default.', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          expect(\n            parseRangeForChannel(\n              'x',\n              identity,\n              scaleType,\n              NOMINAL,\n              {},\n              defaultConfig,\n              undefined,\n              'point',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(expect.objectContaining(makeImplicit({step: 20})));\n        }\n      });\n\n      it(\"should return config.scale.textXRangeStep by default for text mark's x band/point scales.\", () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          expect(\n            parseRangeForChannel(\n              'x',\n              identity,\n              scaleType,\n              NOMINAL,\n              {},\n              {scale: {textXRangeStep: 55}},\n              undefined,\n              'text',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeImplicit({step: 55}));\n        }\n      });\n\n      it('should return specified rangeStep if topLevelSize is undefined for band/point scales', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          expect(\n            parseRangeForChannel(\n              'x',\n              identity,\n              scaleType,\n              NOMINAL,\n              {rangeStep: 23},\n              defaultConfig,\n              undefined,\n              'text',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeExplicit({step: 23}));\n        }\n      });\n\n      it(\n        'should drop rangeStep if topLevelSize is specified for band/point scales',\n        log.wrap(localLogger => {\n          for (const scaleType of ['point', 'band'] as ScaleType[]) {\n            expect(\n              parseRangeForChannel(\n                'x',\n                identity,\n                scaleType,\n                NOMINAL,\n                {rangeStep: 23},\n                defaultConfig,\n                undefined,\n                'text',\n                true,\n                'plot_width',\n                []\n              )\n            ).toEqual(makeImplicit([0, {signal: 'plot_width'}]));\n          }\n          expect(localLogger.warns[0]).toEqual(log.message.rangeStepDropped('x'));\n        })\n      );\n\n      it('should return default topLevelSize if rangeStep is null for band/point scales', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          expect(\n            parseRangeForChannel(\n              'x',\n              identity,\n              scaleType,\n              NOMINAL,\n              {rangeStep: null},\n              defaultConfig,\n              undefined,\n              'text',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeImplicit([0, {signal: 'plot_width'}]));\n        }\n      });\n\n      it('should return default topLevelSize if rangeStep config is null', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          expect(\n            parseRangeForChannel(\n              'x',\n              identity,\n              scaleType,\n              NOMINAL,\n              {},\n              {view: {width: 200}, scale: {rangeStep: null}},\n              undefined,\n              'point',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeImplicit([0, {signal: 'plot_width'}]));\n        }\n      });\n\n      it('should return default topLevelSize for text if textXRangeStep config is null', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          expect(\n            parseRangeForChannel(\n              'x',\n              identity,\n              scaleType,\n              NOMINAL,\n              {},\n              {view: {width: 200}, scale: {textXRangeStep: null}},\n              undefined,\n              'text',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeImplicit([0, {signal: 'plot_width'}]));\n        }\n      });\n\n      it('should drop rangeStep for continuous scales', () => {\n        for (const scaleType of CONTINUOUS_TO_CONTINUOUS_SCALES) {\n          log.wrap(localLogger => {\n            expect(\n              parseRangeForChannel(\n                'x',\n                identity,\n                scaleType,\n                QUANTITATIVE,\n                {rangeStep: 23},\n                defaultConfig,\n                undefined,\n                'text',\n                true,\n                'plot_width',\n                []\n              )\n            ).toEqual(makeImplicit([0, {signal: 'plot_width'}]));\n            expect(localLogger.warns[0]).toEqual(\n              log.message.scalePropertyNotWorkWithScaleType(scaleType, 'rangeStep', 'x')\n            );\n          })();\n        }\n      });\n    });\n\n    describe('color', () => {\n      it('should use the specified scheme for a nominal color field.', () => {\n        expect(\n          parseRangeForChannel(\n            'color',\n            identity,\n            'ordinal',\n            NOMINAL,\n            {scheme: 'warm'},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          )\n        ).toEqual(makeExplicit({scheme: 'warm'}));\n      });\n\n      it('should use the specified scheme with extent for a nominal color field.', () => {\n        expect(\n          parseRangeForChannel(\n            'color',\n            identity,\n            'ordinal',\n            NOMINAL,\n            {scheme: {name: 'warm', extent: [0.2, 1]}},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          )\n        ).toEqual(makeExplicit({scheme: 'warm', extent: [0.2, 1]}));\n      });\n\n      it('should use the specified range for a nominal color field.', () => {\n        expect(\n          parseRangeForChannel(\n            'color',\n            identity,\n            'ordinal',\n            NOMINAL,\n            {range: ['red', 'green', 'blue']},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          )\n        ).toEqual(makeExplicit(['red', 'green', 'blue']));\n      });\n\n      it('should use default category range in Vega for a nominal color field.', () => {\n        expect(\n          parseRangeForChannel(\n            'color',\n            identity,\n            'ordinal',\n            NOMINAL,\n            {},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          )\n        ).toEqual(makeImplicit('category'));\n      });\n\n      it('should use default ordinal range in Vega for an ordinal color field.', () => {\n        expect(\n          parseRangeForChannel(\n            'color',\n            identity,\n            'ordinal',\n            ORDINAL,\n            {},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          )\n        ).toEqual(makeImplicit('ordinal'));\n      });\n\n      it('should use default ramp range in Vega for a temporal/quantitative color field.', () => {\n        expect(\n          parseRangeForChannel(\n            'color',\n            identity,\n            'linear',\n            QUANTITATIVE,\n            {},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          )\n        ).toEqual(makeImplicit('ramp'));\n      });\n\n      it('should use the specified scheme with count for a quantitative color field.', () => {\n        expect(\n          parseRangeForChannel(\n            'color',\n            identity,\n            'ordinal',\n            QUANTITATIVE,\n            {scheme: {name: 'viridis', count: 3}},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          )\n        ).toEqual(makeExplicit({scheme: 'viridis', count: 3}));\n      });\n\n      it('should use default ramp range for quantile/quantize scales', () => {\n        const scales: ScaleType[] = ['quantile', 'quantize'];\n        scales.forEach(discretizingScale => {\n          expect(\n            parseRangeForChannel(\n              'color',\n              identity,\n              discretizingScale,\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              undefined,\n              'point',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeImplicit('ramp'));\n        });\n      });\n\n      it('should use default ramp range for threshold scale', () => {\n        expect(\n          parseRangeForChannel(\n            'color',\n            identity,\n            'threshold',\n            QUANTITATIVE,\n            {},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          )\n        ).toEqual(makeImplicit('ramp'));\n      });\n\n      it('should use default color range for log scale', () => {\n        expect(\n          parseRangeForChannel(\n            'color',\n            identity,\n            'log',\n            QUANTITATIVE,\n            {},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          )\n        ).toEqual(makeImplicit('ramp'));\n      });\n    });\n\n    describe('opacity', () => {\n      it(\"should use default opacityRange as opacity's scale range.\", () => {\n        expect(\n          parseRangeForChannel(\n            'opacity',\n            identity,\n            'linear',\n            QUANTITATIVE,\n            {},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          )\n        ).toEqual(makeImplicit([defaultConfig.scale.minOpacity, defaultConfig.scale.maxOpacity]));\n      });\n    });\n\n    describe('size', () => {\n      describe('bar', () => {\n        it('should return [minBandSize, maxBandSize] if both are specified', () => {\n          const config = {\n            scale: {minBandSize: 2, maxBandSize: 9}\n          };\n          expect(\n            parseRangeForChannel(\n              'size',\n              identity,\n              'linear',\n              QUANTITATIVE,\n              {},\n              config,\n              undefined,\n              'bar',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeImplicit([2, 9]));\n        });\n\n        it('should return [continuousBandSize, xRangeStep-1] by default since min/maxSize config are not specified', () => {\n          expect(\n            parseRangeForChannel(\n              'size',\n              identity,\n              'linear',\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              undefined,\n              'bar',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeImplicit([2, defaultConfig.scale.rangeStep - 1]));\n        });\n      });\n\n      describe('tick', () => {\n        it('should return [minBandSize, maxBandSize] if both are specified', () => {\n          const config = {\n            scale: {minBandSize: 4, maxBandSize: 9}\n          };\n          expect(\n            parseRangeForChannel(\n              'size',\n              identity,\n              'linear',\n              QUANTITATIVE,\n              {},\n              config,\n              undefined,\n              'tick',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeImplicit([4, 9]));\n        });\n\n        it('should return [(default)minBandSize, rangeStep-1] by default since maxSize config is not specified', () => {\n          expect(\n            parseRangeForChannel(\n              'size',\n              identity,\n              'linear',\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              undefined,\n              'tick',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeImplicit([defaultConfig.scale.minBandSize, defaultConfig.scale.rangeStep - 1]));\n        });\n      });\n\n      describe('text', () => {\n        it('should return [minFontSize, maxFontSize]', () => {\n          expect(\n            parseRangeForChannel(\n              'size',\n              identity,\n              'linear',\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              undefined,\n              'text',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeImplicit([defaultConfig.scale.minFontSize, defaultConfig.scale.maxFontSize]));\n        });\n      });\n\n      describe('rule', () => {\n        it('should return [minStrokeWidth, maxStrokeWidth]', () => {\n          expect(\n            parseRangeForChannel(\n              'size',\n              identity,\n              'linear',\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              undefined,\n              'rule',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeImplicit([defaultConfig.scale.minStrokeWidth, defaultConfig.scale.maxStrokeWidth]));\n        });\n      });\n\n      describe('point, square, circle', () => {\n        it('should return [minSize, maxSize]', () => {\n          for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            const config = {\n              scale: {\n                minSize: 5,\n                maxSize: 25\n              }\n            };\n\n            expect(\n              parseRangeForChannel(\n                'size',\n                identity,\n                'linear',\n                QUANTITATIVE,\n                {},\n                config,\n                undefined,\n                m,\n                false,\n                'plot_width',\n                []\n              )\n            ).toEqual(makeImplicit([5, 25]));\n          }\n        });\n\n        it('should return [0, (minBandSize-2)^2] if both x and y are discrete and size is quantitative (thus use zero=true, by default)', () => {\n          for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            expect(\n              parseRangeForChannel(\n                'size',\n                identity,\n                'linear',\n                QUANTITATIVE,\n                {},\n                defaultConfig,\n                true,\n                m,\n                false,\n                'plot_width',\n                [11, 13] // xyRangeSteps\n              )\n            ).toEqual(makeImplicit([0, MAX_SIZE_RANGE_STEP_RATIO * 11 * MAX_SIZE_RANGE_STEP_RATIO * 11]));\n          }\n        });\n\n        it('should return [9, (minBandSize-2)^2] if both x and y are discrete and size is not quantitative (thus use zero=false, by default)', () => {\n          for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            expect(\n              parseRangeForChannel(\n                'size',\n                identity,\n                'linear',\n                QUANTITATIVE,\n                {},\n                defaultConfig,\n                false,\n                m,\n                false,\n                'plot_width',\n                [11, 13] // xyRangeSteps\n              )\n            ).toEqual(makeImplicit([9, MAX_SIZE_RANGE_STEP_RATIO * 11 * MAX_SIZE_RANGE_STEP_RATIO * 11]));\n          }\n        });\n\n        it('should return [9, (minBandSize-2)^2] if both x and y are discrete and size is quantitative but use zero=false', () => {\n          for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            expect(\n              parseRangeForChannel(\n                'size',\n                identity,\n                'linear',\n                QUANTITATIVE,\n                {},\n                defaultConfig,\n                false,\n                m,\n                false,\n                'plot_width',\n                [11, 13] // xyRangeSteps\n              )\n            ).toEqual(makeImplicit([9, MAX_SIZE_RANGE_STEP_RATIO * 11 * MAX_SIZE_RANGE_STEP_RATIO * 11]));\n          }\n        });\n\n        it('should return [0, (xRangeStep-2)^2] if x is discrete and y is continuous and size is quantitative (thus use zero=true, by default)', () => {\n          for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            expect(\n              parseRangeForChannel(\n                'size',\n                identity,\n                'linear',\n                QUANTITATIVE,\n                {},\n                defaultConfig,\n                true,\n                m,\n                false,\n                'plot_width',\n                [11] // xyRangeSteps only have one value\n              )\n            ).toEqual(makeImplicit([0, MAX_SIZE_RANGE_STEP_RATIO * 11 * MAX_SIZE_RANGE_STEP_RATIO * 11]));\n          }\n        });\n\n        it('should return range interpolation of length 4 for quantile/quantize scales', () => {\n          const scales: ScaleType[] = ['quantile', 'quantize'];\n          scales.forEach(discretizingScale => {\n            expect(\n              parseRangeForChannel(\n                'size',\n                identity,\n                discretizingScale,\n                QUANTITATIVE,\n                {},\n                defaultConfig,\n                undefined,\n                'point',\n                false,\n                'plot_width',\n                []\n              )\n            ).toEqual(makeImplicit({signal: 'sequence(9, 361 + (361 - 9) / (4 - 1), (361 - 9) / (4 - 1))'}));\n          });\n        });\n\n        it('should return range interpolation of length 4 for threshold scale', () => {\n          expect(\n            parseRangeForChannel(\n              'size',\n              identity,\n              'threshold',\n              QUANTITATIVE,\n              {},\n              defaultConfig,\n              undefined,\n              'point',\n              false,\n              'plot_width',\n              []\n            )\n          ).toEqual(makeImplicit({signal: 'sequence(9, 361 + (361 - 9) / (3 - 1), (361 - 9) / (3 - 1))'}));\n        });\n      });\n    });\n\n    describe('shape', () => {\n      it(\"should use default symbol range in Vega as shape's scale range.\", () => {\n        expect(\n          parseRangeForChannel(\n            'shape',\n            identity,\n            'ordinal',\n            QUANTITATIVE,\n            {},\n            defaultConfig,\n            undefined,\n            'point',\n            false,\n            'plot_width',\n            []\n          )\n        ).toEqual(makeImplicit('symbol'));\n      });\n    });\n  });\n\n  describe('defaultContinuousToDiscreteCount', () => {\n    it('should use config.scale.quantileCount for quantile scale', () => {\n      const config: Config = {\n        scale: {\n          quantileCount: 4\n        }\n      };\n      expect(defaultContinuousToDiscreteCount('quantile', config, undefined, 'x')).toEqual(4);\n    });\n\n    it('should use config.scale.quantizeCount for quantize scale', () => {\n      const config: Config = {\n        scale: {\n          quantizeCount: 4\n        }\n      };\n      expect(defaultContinuousToDiscreteCount('quantize', config, undefined, 'x')).toEqual(4);\n    });\n\n    it('should use domain size for threshold scale', () => {\n      expect(defaultContinuousToDiscreteCount('threshold', {}, [1, 10], 'x')).toEqual(3);\n    });\n\n    it('should throw warning and default to 4 for scale without domain', () => {\n      log.wrap(localLogger => {\n        expect(defaultContinuousToDiscreteCount('quantize', {}, undefined, 'x')).toEqual(4);\n        expect(localLogger.warns[0]).toEqual(log.message.domainRequiredForThresholdScale('x'));\n      });\n    });\n  });\n\n  describe('interpolateRange', () => {\n    it('should return the correct interpolation of 1 - 100 with cardinality of 5', () => {\n      expect(interpolateRange(0, 100, 5).signal).toBe('sequence(0, 100 + (100 - 0) / (5 - 1), (100 - 0) / (5 - 1))');\n    });\n  });\n});\n"]}