{"version":3,"file":"assemble.test.js","sourceRoot":"","sources":["../../../../test/compile/legend/assemble.test.ts"],"names":[],"mappings":";AAAA,8BAA8B;;AAE9B,6BAA4B;AAC5B,mCAAmD;AAEnD,QAAQ,CAAC,iBAAiB,EAAE;IAC1B,EAAE,CAAC,wDAAwD,EAAE;QAC3D,IAAM,KAAK,GAAG,8BAAuB,CAAC;YACpC,OAAO,EAAE,iDAAiD;YAC1D,WAAW,EAAE,yDAAyD;YACtE,IAAI,EAAE,EAAC,GAAG,EAAE,gBAAgB,EAAC;YAC7B,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE;gBACR,CAAC,EAAE,EAAC,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAC;gBAC9C,CAAC,EAAE,EAAC,KAAK,EAAE,kBAAkB,EAAE,IAAI,EAAE,cAAc,EAAC;gBACpD,KAAK,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAC;gBACzC,KAAK,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAC;aAC1C;SACF,CAAC,CAAC;QACH,KAAK,CAAC,WAAW,EAAE,CAAC;QAEpB,IAAM,OAAO,GAAG,KAAK,CAAC,eAAe,EAAE,CAAC;QACxC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAEhC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uEAAuE,EAAE;QAC1E,IAAM,KAAK,GAAG,8BAAuB,CAAC;YACpC,IAAI,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,EAAE,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC,EAAC;YAClD,IAAI,EAAE,KAAK;YACX,QAAQ,EAAE;gBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAC;gBAChC,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;gBACrC,KAAK,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;gBACzC,IAAI,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;aACzC;SACF,CAAC,CAAC;QAEH,KAAK,CAAC,WAAW,EAAE,CAAC;QAEpB,IAAM,OAAO,GAAG,KAAK,CAAC,eAAe,EAAE,CAAC;QACxC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {parseUnitModelWithScale} from '../../util';\n\ndescribe('legend/assemble', () => {\n  it('merges legend of the same field with the default type.', () => {\n    const model = parseUnitModelWithScale({\n      $schema: 'https://vega.github.io/schema/vega-lite/v2.json',\n      description: 'A scatterplot showing horsepower and miles per gallons.',\n      data: {url: 'data/cars.json'},\n      mark: 'point',\n      encoding: {\n        x: {field: 'Horsepower', type: 'quantitative'},\n        y: {field: 'Miles_per_Gallon', type: 'quantitative'},\n        color: {field: 'Origin', type: 'nominal'},\n        shape: {field: 'Origin', type: 'nominal'}\n      }\n    });\n    model.parseLegend();\n\n    const legends = model.assembleLegends();\n    assert.equal(legends.length, 1);\n\n    assert.equal(legends[0].title, 'Origin');\n    assert.equal(legends[0].stroke, 'color');\n    assert.equal(legends[0].shape, 'shape');\n  });\n\n  it('merges legend of the same field and favor symbol legend over gradient', () => {\n    const model = parseUnitModelWithScale({\n      data: {values: [{a: 'A', b: 28}, {a: 'B', b: 55}]},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'a', type: 'ordinal'},\n        y: {field: 'b', type: 'quantitative'},\n        color: {field: 'b', type: 'quantitative'},\n        size: {field: 'b', type: 'quantitative'}\n      }\n    });\n\n    model.parseLegend();\n\n    const legends = model.assembleLegends();\n    assert.equal(legends.length, 1);\n    assert.equal(legends[0].title, 'b');\n    assert.equal(legends[0].fill, 'color');\n    assert.equal(legends[0].size, 'size');\n  });\n});\n"]}