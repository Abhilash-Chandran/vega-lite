{"version":3,"file":"errorbar.test.js","sourceRoot":"","sources":["../../../test/compositemark/errorbar.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport {assert} from 'chai';\n\nimport {AggregateOp} from 'vega';\nimport {ErrorBarCenter, ErrorBarExtent} from '../../src/compositemark/errorbar';\nimport {isFieldDef} from '../../src/fielddef';\nimport * as log from '../../src/log';\nimport {isMarkDef} from '../../src/mark';\nimport {CompositeUnitSpec, ExtendedLayerSpec, GenericSpec, isLayerSpec, isUnitSpec, normalize} from '../../src/spec';\nimport {isAggregate, isCalculate, Transform} from '../../src/transform';\nimport {some} from '../../src/util';\nimport {defaultConfig} from '.././../src/config';\n\ndescribe('normalizeErrorBar with raw data input', () => {\n  it('should produce correct layered specs for mean point and vertical error bar', () => {\n    assert.deepEqual(\n      normalize(\n        {\n          data: {\n            url: 'data/population.json'\n          },\n          mark: 'errorbar',\n          encoding: {\n            x: {\n              field: 'age',\n              type: 'ordinal'\n            },\n            y: {\n              field: 'people',\n              type: 'quantitative'\n            }\n          }\n        },\n        defaultConfig\n      ),\n      {\n        data: {url: 'data/population.json'},\n        transform: [\n          {\n            aggregate: [\n              {op: 'stderr', field: 'people', as: 'extent_people'},\n              {op: 'mean', field: 'people', as: 'center_people'}\n            ],\n            groupby: ['age']\n          },\n          {\n            calculate: 'datum.center_people + datum.extent_people',\n            as: 'upper_people'\n          },\n          {\n            calculate: 'datum.center_people - datum.extent_people',\n            as: 'lower_people'\n          }\n        ],\n        layer: [\n          {\n            mark: {type: 'rule', style: 'errorbar-rule'},\n            encoding: {\n              y: {\n                field: 'lower_people',\n                type: 'quantitative',\n                title: 'people'\n              },\n              y2: {field: 'upper_people', type: 'quantitative'},\n              x: {field: 'age', type: 'ordinal', title: 'age'}\n            }\n          }\n        ]\n      }\n    );\n  });\n\n  it('should produce an error if both axes have aggregate errorbar', () => {\n    assert.throws(\n      () => {\n        normalize(\n          {\n            data: {url: 'data/population.json'},\n            mark: {\n              type: 'errorbar'\n            },\n            encoding: {\n              x: {aggregate: 'errorbar', field: 'people', type: 'quantitative'},\n              y: {\n                aggregate: 'errorbar',\n                field: 'people',\n                type: 'quantitative'\n              },\n              color: {value: 'skyblue'}\n            }\n          },\n          defaultConfig\n        );\n      },\n      Error,\n      'Both x and y cannot have aggregate'\n    );\n  });\n\n  it(\n    'should produce a warning if continuous axis has aggregate property',\n    log.wrap(localLogger => {\n      const aggregate = 'min';\n      const mark = 'errorbar';\n\n      normalize(\n        {\n          data: {url: 'data/population.json'},\n          mark,\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {\n              aggregate,\n              field: 'people',\n              type: 'quantitative'\n            },\n            color: {value: 'skyblue'}\n          }\n        },\n        defaultConfig\n      );\n\n      assert.equal(localLogger.warns[0], log.message.errorBarContinuousAxisHasCustomizedAggregate(aggregate, mark));\n    })\n  );\n\n  it('should produce an error if build 1D errorbar with a discrete axis', () => {\n    assert.throws(\n      () => {\n        normalize(\n          {\n            data: {url: 'data/population.json'},\n            mark: 'errorbar',\n            encoding: {\n              x: {field: 'age', type: 'ordinal'}\n            }\n          },\n          defaultConfig\n        );\n      },\n      Error,\n      'Need a valid continuous axis for errorbars'\n    );\n  });\n\n  it('should produce an error if both axes are discrete', () => {\n    assert.throws(\n      () => {\n        normalize(\n          {\n            data: {url: 'data/population.json'},\n            mark: {\n              type: 'errorbar'\n            },\n            encoding: {\n              x: {field: 'age', type: 'ordinal'},\n              y: {\n                field: 'age',\n                type: 'ordinal'\n              },\n              color: {value: 'skyblue'}\n            }\n          },\n          defaultConfig\n        );\n      },\n      Error,\n      'Need a valid continuous axis for errorbars'\n    );\n  });\n\n  it('should produce an error if in 2D errobar both axes are not valid field definitions', () => {\n    assert.throws(\n      () => {\n        normalize(\n          {\n            data: {url: 'data/population.json'},\n            mark: {\n              type: 'errorbar'\n            },\n            encoding: {\n              x: {field: 'age', type: 'ordinal'},\n              y: {\n                type: 'ordinal'\n              },\n              color: {value: 'skyblue'}\n            }\n          },\n          defaultConfig\n        );\n      },\n      Error,\n      'Need a valid continuous axis for errorbars'\n    );\n  });\n\n  it('should produce an error if 1D errorbar only axis is discrete', () => {\n    assert.throws(\n      () => {\n        normalize(\n          {\n            data: {url: 'data/population.json'},\n            mark: 'errorbar',\n            encoding: {\n              x: {field: 'age', type: 'ordinal'},\n              color: {value: 'skyblue'}\n            }\n          },\n          defaultConfig\n        );\n      },\n      Error,\n      'Need a valid continuous axis for errorbars'\n    );\n  });\n\n  it('should aggregate y field for vertical errorbar with two quantitative axes and explicit orient', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'errorbar',\n          orient: 'vertical'\n        },\n        encoding: {\n          x: {\n            field: 'age',\n            type: 'quantitative'\n          },\n          y: {\n            field: 'people',\n            type: 'quantitative'\n          }\n        }\n      },\n      defaultConfig\n    );\n    const aggregateTransform = outputSpec.transform[0];\n    if (isAggregate(aggregateTransform)) {\n      assert.isTrue(\n        some(aggregateTransform.aggregate, aggregateFieldDef => {\n          return (\n            aggregateFieldDef.field === 'people' &&\n            (aggregateFieldDef.op === 'mean' || aggregateFieldDef.op === 'median')\n          );\n        })\n      );\n    } else {\n      assert.fail(isAggregate(aggregateTransform), true, 'transform[0] should be an aggregate transform');\n    }\n  });\n\n  it('should aggregate x field for horizontal errorbar with two quantitative axes and explicit orient', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'errorbar',\n          orient: 'horizontal'\n        },\n        encoding: {\n          x: {\n            field: 'age',\n            type: 'quantitative'\n          },\n          y: {\n            field: 'people',\n            type: 'quantitative'\n          }\n        }\n      },\n      defaultConfig\n    );\n\n    const aggregateTransform = outputSpec.transform[0];\n    if (isAggregate(aggregateTransform)) {\n      assert.isTrue(\n        some(aggregateTransform.aggregate, aggregateFieldDef => {\n          return (\n            aggregateFieldDef.field === 'age' && (aggregateFieldDef.op === 'mean' || aggregateFieldDef.op === 'median')\n          );\n        })\n      );\n    } else {\n      assert.fail(isAggregate(aggregateTransform), true, 'transform[0] should be an aggregate transform');\n    }\n  });\n\n  it('should aggregate y field for vertical errorbar with two quantitative axes and specify orientation with aggregate', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: 'errorbar',\n        encoding: {\n          x: {\n            field: 'age',\n            type: 'quantitative'\n          },\n          y: {\n            aggregate: 'errorbar',\n            field: 'people',\n            type: 'quantitative'\n          }\n        }\n      },\n      defaultConfig\n    );\n\n    const aggregateTransform = outputSpec.transform[0];\n    if (isAggregate(aggregateTransform)) {\n      assert.isTrue(\n        some(aggregateTransform.aggregate, aggregateFieldDef => {\n          return (\n            aggregateFieldDef.field === 'people' &&\n            (aggregateFieldDef.op === 'mean' || aggregateFieldDef.op === 'median')\n          );\n        })\n      );\n    } else {\n      assert.fail(isAggregate(aggregateTransform), true, 'transform[0] should be an aggregate transform');\n    }\n  });\n\n  it('should aggregate x field for horizontal errorbar with two quantitative axes and specify orientation with aggregate', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: 'errorbar',\n        encoding: {\n          x: {\n            aggregate: 'errorbar',\n            field: 'age',\n            type: 'quantitative'\n          },\n          y: {\n            field: 'people',\n            type: 'quantitative'\n          }\n        }\n      },\n      defaultConfig\n    );\n\n    const aggregateTransform = outputSpec.transform[0];\n    if (isAggregate(aggregateTransform)) {\n      assert.isTrue(\n        some(aggregateTransform.aggregate, aggregateFieldDef => {\n          return (\n            aggregateFieldDef.field === 'age' && (aggregateFieldDef.op === 'mean' || aggregateFieldDef.op === 'median')\n          );\n        })\n      );\n    } else {\n      assert.fail(isAggregate(aggregateTransform), true, 'transform[0] should be an aggregate transform');\n    }\n  });\n\n  it('should aggregate x field for horizontal errorbar with x as quantitative axis', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: 'errorbar',\n        encoding: {\n          x: {\n            field: 'age',\n            type: 'quantitative'\n          },\n          y: {\n            field: 'people',\n            type: 'ordinal'\n          }\n        }\n      },\n      defaultConfig\n    );\n\n    const aggregateTransform = outputSpec.transform[0];\n    if (isAggregate(aggregateTransform)) {\n      assert.isTrue(\n        some(aggregateTransform.aggregate, aggregateFieldDef => {\n          return (\n            aggregateFieldDef.field === 'age' && (aggregateFieldDef.op === 'mean' || aggregateFieldDef.op === 'median')\n          );\n        })\n      );\n    } else {\n      assert.fail(isAggregate(aggregateTransform), true, 'transform[0] should be an aggregate transform');\n    }\n  });\n\n  it('should produce correct layered specs for veritcal errorbar with ticks', () => {\n    const color = 'red';\n    const opacity = 0.5;\n    const size = 10;\n\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'errorbar',\n          ticks: {\n            size,\n            color,\n            opacity\n          }\n        },\n        encoding: {\n          x: {\n            field: 'age',\n            type: 'ordinal'\n          },\n          y: {\n            field: 'people',\n            type: 'quantitative'\n          }\n        }\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    if (layer) {\n      assert.isTrue(\n        some(layer, unitSpec => {\n          return (\n            isUnitSpec(unitSpec) &&\n            isMarkDef(unitSpec.mark) &&\n            unitSpec.mark.type === 'tick' &&\n            unitSpec.mark.size === size &&\n            unitSpec.mark.color === color &&\n            unitSpec.mark.opacity === opacity\n          );\n        })\n      );\n    } else {\n      assert.fail(!layer, false, 'layer should be a part of the spec');\n    }\n  });\n\n  it('should produce correct layered specs with customized title', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'errorbar',\n          point: false\n        },\n        encoding: {\n          x: {\n            field: 'age',\n            type: 'ordinal'\n          },\n          y: {\n            field: 'people',\n            type: 'quantitative',\n            title: 'population'\n          }\n        }\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    if (layer) {\n      assert.isTrue(\n        some(layer, unitSpec => {\n          return isUnitSpec(unitSpec) && isFieldDef(unitSpec.encoding.y) && unitSpec.encoding.y.title === 'population';\n        })\n      );\n    } else {\n      assert.fail(!layer, false, 'layer should be a part of the spec');\n    }\n  });\n\n  it(\"should not overwrite transform with errorbar's transfroms\", () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: 'errorbar',\n        transform: [{calculate: 'age * 2', as: 'age2'}],\n        encoding: {x: {field: 'age', type: 'ordinal'}, y: {field: 'people', type: 'quantitative', title: 'population'}}\n      },\n      defaultConfig\n    );\n\n    const transforms: Transform[] = outputSpec.transform;\n    expect(transforms).toBeDefined();\n    expect(transforms).not.toHaveLength(0);\n    expect(transforms[0]).toEqual({calculate: 'age * 2', as: 'age2'});\n  });\n});\n\ndescribe('normalizeErrorBar for all possible extents and centers with raw data input', () => {\n  const centers: ErrorBarCenter[] = ['mean', 'median', undefined];\n  const extents: ErrorBarExtent[] = ['stderr', 'stdev', 'ci', 'iqr', undefined];\n\n  const warningOutputMap = {\n    mean: {\n      stderr: [false, false],\n      stdev: [false, false],\n      ci: [false, true],\n      iqr: [true, true],\n      '': [false, false]\n    },\n    median: {\n      stderr: [true, false],\n      stdev: [true, false],\n      ci: [true, true],\n      iqr: [false, true],\n      '': [false, false]\n    },\n    '': {\n      stderr: [false, false],\n      stdev: [false, false],\n      ci: [false, false],\n      iqr: [false, false],\n      '': [false, false]\n    }\n  };\n\n  const warningMessage = [\n    (center: ErrorBarCenter, extent: ErrorBarExtent, type: 'errorbar' | 'errorband') => {\n      return log.message.errorBarCenterIsUsedWithWrongExtent(center, extent, type); // msg1\n    },\n    (_center: ErrorBarCenter, extent: ErrorBarExtent, type: 'errorbar' | 'errorband') => {\n      return log.message.errorBarCenterIsNotNeeded(extent, type); // msg2\n    }\n  ];\n\n  const type = 'errorbar';\n\n  for (const center of centers) {\n    for (const extent of extents) {\n      const spec: GenericSpec<CompositeUnitSpec, ExtendedLayerSpec> = {\n        data: {url: 'data/population.json'},\n        mark: {type, ...(center ? {center} : {}), ...(extent ? {extent} : {})},\n        encoding: {\n          x: {field: 'people', type: 'quantitative'},\n          y: {field: 'people', type: 'quantitative'}\n        }\n      };\n\n      const warningOutput = warningOutputMap[center ? center : ''][extent ? extent : ''];\n\n      for (let k = 0; k < warningOutput.length; k++) {\n        const testMsg =\n          'should ' +\n          (warningOutput[k] ? '' : 'not ') +\n          'produce a warning if center is ' +\n          (center ? center : 'not specified') +\n          ' and extent is ' +\n          (extent ? extent : 'not specified') +\n          ' that ' +\n          warningMessage[k](center, extent, type);\n\n        it(\n          testMsg,\n          log.wrap(localLogger => {\n            normalize(spec, defaultConfig);\n\n            assert.equal(\n              warningOutput[k],\n              some(localLogger.warns, message => {\n                return message === warningMessage[k](center, extent, type);\n              })\n            );\n          })\n        );\n      }\n\n      const outputSpec = normalize(spec, defaultConfig);\n      const aggregateTransform = outputSpec.transform[0];\n      const testMsg =\n        'should produce a correct layer spec if center is ' +\n        (center ? center : 'not specified') +\n        ' and extent is ' +\n        (extent ? extent : 'not specified') +\n        '.';\n\n      it(testMsg, () => {\n        if (isAggregate(aggregateTransform)) {\n          if (extent === 'ci' || extent === 'iqr' || (center === 'median' && !extent)) {\n            assert.isFalse(\n              some(aggregateTransform.aggregate, aggregateFieldDef => {\n                return aggregateFieldDef.op === 'mean' || aggregateFieldDef.op === 'median';\n              })\n            );\n          } else {\n            if (center) {\n              assert.isTrue(\n                some(aggregateTransform.aggregate, aggregateFieldDef => {\n                  return aggregateFieldDef.op === center;\n                })\n              );\n            } else {\n              assert.isTrue(\n                some(aggregateTransform.aggregate, aggregateFieldDef => {\n                  return aggregateFieldDef.op === 'mean';\n                })\n              );\n            }\n\n            if (extent) {\n              assert.isTrue(\n                some(aggregateTransform.aggregate, aggregateFieldDef => {\n                  return isPartOfExtent(extent, aggregateFieldDef.op);\n                })\n              );\n            } else if (center === 'median') {\n              assert.isTrue(\n                some(aggregateTransform.aggregate, aggregateFieldDef => {\n                  return isPartOfExtent('iqr', aggregateFieldDef.op);\n                })\n              );\n\n              assert.isFalse(\n                some(aggregateTransform.aggregate, aggregateFieldDef => {\n                  return aggregateFieldDef.op === 'median';\n                })\n              );\n            } else {\n              assert.isTrue(\n                some(aggregateTransform.aggregate, aggregateFieldDef => {\n                  return isPartOfExtent('stderr', aggregateFieldDef.op);\n                })\n              );\n            }\n          }\n        } else {\n          assert.fail(isAggregate(aggregateTransform), true, 'transform[0] should be an aggregate transform');\n        }\n      });\n    }\n  }\n});\n\nfunction isPartOfExtent(extent: ErrorBarExtent, op: AggregateOp) {\n  if (extent === 'ci') {\n    return op === 'ci0' || op === 'ci1';\n  } else if (extent === 'iqr') {\n    return op === 'q1' || op === 'q3';\n  }\n  return extent === op;\n}\n\ndescribe('normalizeErrorBar with aggregated data input', () => {\n  const data = {\n    values: [\n      {age: 1, people: 1, people2: 2},\n      {age: 2, people: 4, people2: 8},\n      {age: 3, people: 13, people2: 18},\n      {age: 4, people: 2, people2: 28},\n      {age: 5, people: 19, people2: 23},\n      {age: 6, people: 10, people2: 20},\n      {age: 7, people: 2, people2: 5}\n    ]\n  };\n\n  const mark = 'errorbar';\n\n  it('should produce correct layered specs for vertical errorbar with aggregated data input', () => {\n    assert.deepEqual(\n      normalize(\n        {\n          data,\n          mark: 'errorbar',\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {field: 'people', type: 'quantitative'},\n            y2: {field: 'people2', type: 'quantitative'}\n          }\n        },\n        defaultConfig\n      ),\n      {\n        data,\n        transform: [{calculate: 'datum.people', as: 'lower_people'}, {calculate: 'datum.people2', as: 'upper_people'}],\n        layer: [\n          {\n            mark: {type: 'rule', style: 'errorbar-rule'},\n            encoding: {\n              y: {\n                field: 'lower_people',\n                type: 'quantitative',\n                title: 'people'\n              },\n              y2: {field: 'upper_people', type: 'quantitative'},\n              x: {field: 'age', type: 'ordinal', title: 'age'}\n            }\n          }\n        ]\n      }\n    );\n  });\n\n  it('should produce correct layered specs for horizontal errorbar with aggregated data input', () => {\n    const outputSpec = normalize(\n      {\n        data,\n        mark: 'errorbar',\n        encoding: {\n          y: {field: 'age', type: 'ordinal'},\n          x: {field: 'people', type: 'quantitative'},\n          x2: {field: 'people2', type: 'quantitative'}\n        }\n      },\n      defaultConfig\n    );\n\n    for (let i = 0; i < 2; i++) {\n      const calculate: Transform = outputSpec.transform[i];\n\n      if (isCalculate(calculate)) {\n        assert.isTrue(\n          (calculate.calculate === 'datum.people' && calculate.as === 'lower_people') ||\n            (calculate.calculate === 'datum.people2' && calculate.as === 'upper_people')\n        );\n      } else {\n        assert.fail(isCalculate(calculate), true, 'transform[' + i + '] should be an aggregate transform');\n      }\n    }\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    if (layer) {\n      assert.isTrue(\n        some(layer, unitSpec => {\n          return (\n            isUnitSpec(unitSpec) && isFieldDef(unitSpec.encoding.x) && unitSpec.encoding.x.field === 'lower_people'\n          );\n        })\n      );\n      assert.isTrue(\n        some(layer, unitSpec => {\n          return (\n            isUnitSpec(unitSpec) && isFieldDef(unitSpec.encoding.x2) && unitSpec.encoding.x2.field === 'upper_people'\n          );\n        })\n      );\n    } else {\n      assert.fail(!layer, false, 'layer should be a part of the spec');\n    }\n  });\n\n  it(\n    'should produce a warning if data are aggregated but center and/or extent is specified',\n    log.wrap(localLogger => {\n      const extent = 'stdev';\n      const center = 'mean';\n\n      normalize(\n        {\n          data,\n          mark: {\n            type: 'errorbar',\n            extent,\n            center\n          },\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {field: 'people', type: 'quantitative'},\n            y2: {field: 'people2', type: 'quantitative'}\n          }\n        },\n        defaultConfig\n      );\n\n      assert.equal(localLogger.warns[0], log.message.errorBarCenterAndExtentAreNotNeeded(center, extent));\n    })\n  );\n\n  it('should produce an error if data are aggregated and have both x2 and y2 quantiative', () => {\n    assert.throws(\n      () => {\n        normalize(\n          {\n            data,\n            mark: {\n              type: 'errorbar',\n              extent: 'stdev',\n              center: 'mean'\n            },\n            encoding: {\n              x: {field: 'age', type: 'quantitative'},\n              x2: {field: 'age2', type: 'quantitative'},\n              y: {field: 'people', type: 'quantitative'},\n              y2: {field: 'people2', type: 'quantitative'}\n            }\n          },\n          defaultConfig\n        );\n      },\n      Error,\n      'Cannot have both x2 and y2 with both are quantiative'\n    );\n  });\n\n  it(\n    'should produce a warning if the second continuous axis has aggregate property',\n    log.wrap(localLogger => {\n      const aggregate = 'min';\n\n      normalize(\n        {\n          data,\n          mark,\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {field: 'people', type: 'quantitative'},\n            y2: {field: 'people2', type: 'quantitative', aggregate}\n          }\n        },\n        defaultConfig\n      );\n\n      assert.equal(localLogger.warns[0], log.message.errorBarContinuousAxisHasCustomizedAggregate(aggregate, mark));\n    })\n  );\n\n  it(\n    'should produce a warning if there is an unsupported channel in encoding',\n    log.wrap(localLogger => {\n      const size = 'size';\n\n      normalize(\n        {\n          data,\n          mark,\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {field: 'people', type: 'quantitative'},\n            y2: {field: 'people2', type: 'quantitative', aggregate: 'min'},\n            size: {value: 10}\n          }\n        },\n        defaultConfig\n      );\n\n      assert.equal(localLogger.warns[0], log.message.incompatibleChannel(size, mark));\n    })\n  );\n});\n"]}