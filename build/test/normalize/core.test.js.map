{"version":3,"file":"core.test.js","sourceRoot":"","sources":["../../../test/normalize/core.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport {COLUMN, FACET_CHANNELS, ROW} from '../../src/channel';\nimport {defaultConfig, initConfig} from '../../src/config';\nimport * as log from '../../src/log';\nimport {LocalLogger} from '../../src/log';\nimport {normalize} from '../../src/normalize/index';\nimport {TopLevelSpec} from '../../src/spec/index';\n\n// describe('isStacked()') -- tested as part of stackOffset in stack.test.ts\n\ndescribe('normalize()', () => {\n  describe('normalizeRepeat', () => {\n    it(\n      'should drop columns from repeat with row/column',\n      log.wrap((localLogger: LocalLogger) => {\n        const spec: TopLevelSpec = {\n          $schema: 'https://vega.github.io/schema/vega-lite/v3.json',\n          repeat: {column: ['Horsepower', 'Miles_per_Gallon', 'Acceleration', 'Displacement']},\n          columns: 2,\n          spec: {\n            data: {url: 'data/cars.json'},\n            mark: 'bar',\n            encoding: {\n              x: {\n                field: {repeat: 'column'},\n                bin: true,\n                type: 'quantitative'\n              },\n              y: {aggregate: 'count', type: 'quantitative'},\n              color: {field: 'Origin', type: 'nominal'}\n            }\n          }\n        };\n        const normalized = normalize(spec);\n        expect(normalized['columns']).toBeUndefined();\n        expect(localLogger.warns[0]).toEqual(log.message.columnsNotSupportByRowCol('repeat'));\n      })\n    );\n  });\n\n  describe('normalizeFacetedUnit', () => {\n    for (const channel of FACET_CHANNELS) {\n      it(`should convert single extended spec with ${channel} into a composite spec`, () => {\n        const fieldDef = {field: 'MPAA_Rating', type: 'ordinal'};\n        const spec: any = {\n          name: 'faceted',\n          width: 123,\n          height: 234,\n          description: 'faceted spec',\n          data: {url: 'data/movies.json'},\n          spacing: 20,\n          mark: 'point',\n          encoding: {\n            [channel]: fieldDef,\n            x: {field: 'Worldwide_Gross', type: 'quantitative'},\n            y: {field: 'US_DVD_Sales', type: 'quantitative'}\n          }\n        };\n\n        const config = initConfig(spec.config);\n        const expectedFacet =\n          channel === 'facet'\n            ? fieldDef\n            : {\n                [channel]: fieldDef\n              };\n\n        expect(normalize(spec, config)).toEqual({\n          name: 'faceted',\n          description: 'faceted spec',\n          data: {url: 'data/movies.json'},\n          spacing: 20,\n          facet: expectedFacet,\n          spec: {\n            mark: 'point',\n            width: 123,\n            height: 234,\n            encoding: {\n              x: {field: 'Worldwide_Gross', type: 'quantitative'},\n              y: {field: 'US_DVD_Sales', type: 'quantitative'}\n            }\n          }\n        });\n      });\n    }\n\n    for (const channel of [ROW, COLUMN]) {\n      it(\n        `should drop facet if ${channel} is also specified`,\n        log.wrap(localLogger => {\n          const spec: any = {\n            data: {url: 'data/movies.json'},\n            mark: 'point',\n            encoding: {\n              [channel]: {field: 'MPAA_Rating', type: 'ordinal'},\n              facet: {field: 'todrop', type: 'ordinal'},\n              x: {field: 'Worldwide_Gross', type: 'quantitative'},\n              y: {field: 'US_DVD_Sales', type: 'quantitative'}\n            }\n          };\n\n          const config = initConfig(spec.config);\n          expect(normalize(spec, config)).toEqual({\n            data: {url: 'data/movies.json'},\n            facet: {\n              [channel]: {field: 'MPAA_Rating', type: 'ordinal'}\n            },\n            spec: {\n              mark: 'point',\n              encoding: {\n                x: {field: 'Worldwide_Gross', type: 'quantitative'},\n                y: {field: 'US_DVD_Sales', type: 'quantitative'}\n              }\n            }\n          });\n          expect(localLogger.warns[0]).toEqual(log.message.facetChannelDropped([channel]));\n        })\n      );\n    }\n  });\n\n  describe('normalizeFacet', () => {\n    it(\n      'should drop columns from facet with row/column',\n      log.wrap((localLogger: LocalLogger) => {\n        const spec: TopLevelSpec = {\n          $schema: 'https://vega.github.io/schema/vega-lite/v3.json',\n          data: {url: 'data/cars.json'},\n          facet: {column: {field: 'a', type: 'nominal'}},\n          columns: 2,\n          spec: {\n            mark: 'bar',\n            encoding: {\n              x: {\n                field: {repeat: 'column'},\n                bin: true,\n                type: 'quantitative'\n              },\n              y: {aggregate: 'count', type: 'quantitative'},\n              color: {field: 'Origin', type: 'nominal'}\n            }\n          }\n        };\n        const normalized = normalize(spec);\n        expect(normalized['columns']).toBeUndefined();\n        expect(localLogger.warns[0]).toEqual(log.message.columnsNotSupportByRowCol('facet'));\n      })\n    );\n\n    it('should produce correct layered specs for mean point and vertical error bar', () => {\n      expect(\n        normalize(\n          {\n            description:\n              'A error bar plot showing mean, min, and max in the US population distribution of age groups in 2000.',\n            data: {url: 'data/population.json'},\n            transform: [{calculate: \"(datum.sex==1) ? 'Men':'Women'\", as: 'sex'}],\n            facet: {row: {field: 'sex', type: 'ordinal'}},\n            spec: {\n              layer: [\n                {\n                  mark: 'errorbar',\n                  encoding: {x: {field: 'age', type: 'ordinal'}, y: {field: 'people', type: 'quantitative'}}\n                },\n                {\n                  mark: {type: 'point', opacity: 1, filled: true},\n                  encoding: {\n                    x: {field: 'age', type: 'ordinal'},\n                    y: {field: 'people', type: 'quantitative', aggregate: 'mean'}\n                  }\n                }\n              ]\n            }\n          },\n          defaultConfig\n        )\n      ).toEqual({\n        description:\n          'A error bar plot showing mean, min, and max in the US population distribution of age groups in 2000.',\n        data: {\n          url: 'data/population.json'\n        },\n        transform: [\n          {\n            calculate: \"(datum.sex==1) ? 'Men':'Women'\",\n            as: 'sex'\n          }\n        ],\n        facet: {\n          row: {\n            field: 'sex',\n            type: 'ordinal'\n          }\n        },\n        spec: {\n          layer: [\n            {\n              transform: [\n                {\n                  aggregate: [\n                    {op: 'stderr', field: 'people', as: 'extent_people'},\n                    {op: 'mean', field: 'people', as: 'center_people'}\n                  ],\n                  groupby: ['age']\n                },\n                {\n                  calculate: 'datum[\"center_people\"] + datum[\"extent_people\"]',\n                  as: 'upper_people'\n                },\n                {\n                  calculate: 'datum[\"center_people\"] - datum[\"extent_people\"]',\n                  as: 'lower_people'\n                }\n              ],\n              layer: [\n                {\n                  mark: {type: 'rule', style: 'errorbar-rule'},\n                  encoding: {\n                    y: {\n                      field: 'lower_people',\n                      type: 'quantitative',\n                      title: 'people'\n                    },\n                    y2: {field: 'upper_people', type: 'quantitative'},\n                    x: {field: 'age', type: 'ordinal'},\n                    tooltip: [\n                      {field: 'center_people', title: 'Mean of people', type: 'quantitative'},\n                      {field: 'upper_people', title: 'Mean + stderr of people', type: 'quantitative'},\n                      {field: 'lower_people', title: 'Mean - stderr of people', type: 'quantitative'},\n                      {field: 'age', type: 'ordinal'}\n                    ]\n                  }\n                }\n              ]\n            },\n            {\n              mark: {type: 'point', opacity: 1, filled: true},\n              encoding: {\n                x: {field: 'age', type: 'ordinal'},\n                y: {field: 'people', type: 'quantitative', aggregate: 'mean'}\n              }\n            }\n          ]\n        }\n      });\n    });\n  });\n\n  describe('normalizeLayer', () => {\n    it('correctly passes shared projection and encoding to children of layer', () => {\n      const output = normalize(\n        {\n          data: {url: 'data/population.json'},\n          projection: {type: 'mercator'},\n          encoding: {\n            x: {field: 'age', type: 'ordinal'}\n          },\n          layer: [\n            {mark: 'point'},\n            {\n              layer: [\n                {mark: 'rule'},\n                {\n                  mark: 'text',\n                  encoding: {\n                    text: {field: 'a', type: 'nominal'}\n                  }\n                }\n              ]\n            }\n          ]\n        },\n        defaultConfig\n      );\n\n      expect(output).toEqual({\n        data: {url: 'data/population.json'},\n        layer: [\n          {\n            projection: {type: 'mercator'},\n            mark: 'point',\n            encoding: {\n              x: {field: 'age', type: 'ordinal'}\n            }\n          },\n          {\n            layer: [\n              {\n                projection: {type: 'mercator'},\n                mark: 'rule',\n                encoding: {\n                  x: {field: 'age', type: 'ordinal'}\n                }\n              },\n              {\n                projection: {type: 'mercator'},\n                mark: 'text',\n                encoding: {\n                  x: {field: 'age', type: 'ordinal'},\n                  text: {field: 'a', type: 'nominal'}\n                }\n              }\n            ]\n          }\n        ]\n      });\n    });\n\n    it(\n      'correctly overrides shared projection and encoding and throws warnings',\n      log.wrap((localLogger: LocalLogger) => {\n        const output = normalize(\n          {\n            data: {url: 'data/population.json'},\n            projection: {type: 'mercator'},\n            encoding: {\n              x: {field: 'age', type: 'ordinal'}\n            },\n            layer: [\n              {\n                projection: {type: 'albersUsa'},\n                mark: 'rule'\n              },\n              {\n                mark: 'text',\n                encoding: {\n                  x: {field: 'a', type: 'nominal'}\n                }\n              }\n            ]\n          },\n          defaultConfig\n        );\n\n        expect(localLogger.warns.length).toEqual(2);\n\n        expect(localLogger.warns[0]).toEqual(\n          log.message.projectionOverridden({\n            parentProjection: {type: 'mercator'},\n            projection: {type: 'albersUsa'}\n          })\n        );\n\n        expect(localLogger.warns[1]).toEqual(log.message.encodingOverridden(['x']));\n\n        expect(output).toEqual({\n          data: {url: 'data/population.json'},\n          layer: [\n            {\n              projection: {type: 'albersUsa'},\n              mark: 'rule',\n              encoding: {\n                x: {field: 'age', type: 'ordinal'}\n              }\n            },\n            {\n              projection: {type: 'mercator'},\n              mark: 'text',\n              encoding: {\n                x: {field: 'a', type: 'nominal'}\n              }\n            }\n          ]\n        });\n      })\n    );\n  });\n});\n"]}