{"version":3,"file":"inputs.test.js","sourceRoot":"","sources":["../../../../test/compile/selection/inputs.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\n\nimport * as selection from '../../../src/compile/selection/selection';\nimport inputs from '../../../src/compile/selection/transforms/inputs';\nimport {parseUnitModel} from '../../util';\n\ndescribe('Inputs Selection Transform', () => {\n  const model = parseUnitModel({\n    mark: 'circle',\n    encoding: {\n      x: {field: 'Horsepower', type: 'quantitative'},\n      y: {field: 'Miles_per_Gallon', type: 'quantitative'},\n      color: {field: 'Origin', type: 'nominal'}\n    }\n  });\n\n  model.parseScale();\n  const selCmpts = selection.parseUnitSelection(model, {\n    one: {\n      type: 'single',\n      bind: {input: 'range', min: 0, max: 10, step: 1}\n    },\n    two: {\n      type: 'single',\n      fields: ['Cylinders', 'Horsepower'],\n      bind: {input: 'range', min: 0, max: 10, step: 1}\n    },\n    three: {\n      type: 'single',\n      nearest: true,\n      fields: ['Cylinders', 'Origin'],\n      bind: {\n        Horsepower: {input: 'range', min: 0, max: 10, step: 1},\n        Origin: {input: 'select', options: ['Japan', 'USA', 'Europe']}\n      }\n    },\n    four: {\n      type: 'single',\n      bind: null\n    },\n    six: {\n      type: 'interval',\n      bind: 'scales'\n    }\n  });\n\n  it('identifies transform invocation', () => {\n    expect(inputs.has(selCmpts['one'])).toBeTruthy();\n    expect(inputs.has(selCmpts['two'])).toBeTruthy();\n    expect(inputs.has(selCmpts['three'])).toBeTruthy();\n    expect(inputs.has(selCmpts['four'])).toBeFalsy();\n    expect(inputs.has(selCmpts['six'])).toBeFalsy();\n  });\n\n  it('adds widget binding for default projection', () => {\n    model.component.selection = {one: selCmpts['one']};\n    expect(selection.assembleUnitSelectionSignals(model, [])).toContainEqual({\n      name: 'one_tuple',\n      update: 'one__vgsid_ !== null ? {fields: one_tuple_fields, values: [one__vgsid_]} : null'\n    });\n\n    expect(selection.assembleTopLevelSignals(model, [])).toContainEqual({\n      name: 'one__vgsid_',\n      value: '',\n      on: [\n        {\n          events: [{source: 'scope', type: 'click'}],\n          update: 'datum && item().mark.marktype !== \\'group\\' ? datum[\"_vgsid_\"] : null'\n        }\n      ],\n      bind: {input: 'range', min: 0, max: 10, step: 1}\n    });\n  });\n\n  it('adds single widget binding for compound projection', () => {\n    model.component.selection = {two: selCmpts['two']};\n    expect(selection.assembleUnitSelectionSignals(model, [])).toContainEqual({\n      name: 'two_tuple',\n      update:\n        'two_Cylinders !== null && two_Horsepower !== null ? {fields: two_tuple_fields, values: [two_Cylinders, two_Horsepower]} : null'\n    });\n\n    expect(selection.assembleTopLevelSignals(model, [])).toEqual(\n      expect.arrayContaining([\n        {\n          name: 'two_Horsepower',\n          value: '',\n          on: [\n            {\n              events: [{source: 'scope', type: 'click'}],\n              update: 'datum && item().mark.marktype !== \\'group\\' ? datum[\"Horsepower\"] : null'\n            }\n          ],\n          bind: {input: 'range', min: 0, max: 10, step: 1}\n        },\n        {\n          name: 'two_Cylinders',\n          value: '',\n          on: [\n            {\n              events: [{source: 'scope', type: 'click'}],\n              update: 'datum && item().mark.marktype !== \\'group\\' ? datum[\"Cylinders\"] : null'\n            }\n          ],\n          bind: {input: 'range', min: 0, max: 10, step: 1}\n        }\n      ])\n    );\n  });\n\n  it('adds projection-specific widget bindings', () => {\n    model.component.selection = {three: selCmpts['three']};\n    expect(selection.assembleUnitSelectionSignals(model, [])).toContainEqual({\n      name: 'three_tuple',\n      update:\n        'three_Cylinders !== null && three_Origin !== null ? {fields: three_tuple_fields, values: [three_Cylinders, three_Origin]} : null'\n    });\n\n    expect(selection.assembleTopLevelSignals(model, [])).toEqual(\n      expect.arrayContaining([\n        {\n          name: 'three_Origin',\n          value: '',\n          on: [\n            {\n              events: [{source: 'scope', type: 'click'}],\n              update:\n                'datum && item().mark.marktype !== \\'group\\' ? (item().isVoronoi ? datum.datum : datum)[\"Origin\"] : null'\n            }\n          ],\n          bind: {\n            input: 'select',\n            options: ['Japan', 'USA', 'Europe']\n          }\n        },\n        {\n          name: 'three_Cylinders',\n          value: '',\n          on: [\n            {\n              events: [{source: 'scope', type: 'click'}],\n              update:\n                'datum && item().mark.marktype !== \\'group\\' ? (item().isVoronoi ? datum.datum : datum)[\"Cylinders\"] : null'\n            }\n          ],\n          bind: {\n            Horsepower: {input: 'range', min: 0, max: 10, step: 1},\n            Origin: {\n              input: 'select',\n              options: ['Japan', 'USA', 'Europe']\n            }\n          }\n        }\n      ])\n    );\n  });\n});\n"]}