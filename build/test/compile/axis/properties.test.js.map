{"version":3,"file":"properties.test.js","sourceRoot":"","sources":["../../../../test/compile/axis/properties.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport * as properties from '../../../src/compile/axis/properties';\nimport {labelAlign, labelAngle, labelBaseline} from '../../../src/compile/axis/properties';\nimport {TimeUnit} from '../../../src/timeunit';\nimport {parseUnitModelWithScale} from '../../util';\n\ndescribe('compile/axis', () => {\n  describe('grid()', () => {\n    it('should return true by default for continuous scale that is not binned', () => {\n      const grid = properties.grid('linear', {field: 'a', type: 'quantitative'});\n      assert.deepEqual(grid, true);\n    });\n\n    it('should return false by default for binned field', () => {\n      const grid = properties.grid('linear', {bin: true, field: 'a', type: 'quantitative'});\n      assert.deepEqual(grid, false);\n    });\n\n    it('should return false by default for a discrete scale', () => {\n      const grid = properties.grid('point', {field: 'a', type: 'quantitative'});\n      assert.deepEqual(grid, false);\n    });\n  });\n\n  describe('orient()', () => {\n    it('should return bottom for x by default', () => {\n      const orient = properties.orient('x');\n      assert.deepEqual(orient, 'bottom');\n    });\n\n    it('should return left for y by default', () => {\n      const orient = properties.orient('y');\n      assert.deepEqual(orient, 'left');\n    });\n  });\n\n  describe('tickCount', () => {\n    it('should return undefined by default for a binned field', () => {\n      const tickCount = properties.tickCount(\n        'x',\n        {bin: {maxbins: 10}, field: 'a', type: 'quantitative'},\n        'linear',\n        {signal: 'a'},\n        undefined,\n        {}\n      );\n      assert.deepEqual(tickCount, {signal: 'ceil(a/20)'});\n    });\n\n    for (const timeUnit of ['month', 'hours', 'day', 'quarter'] as TimeUnit[]) {\n      it(`should return undefined by default for a temporal field with timeUnit=${timeUnit}`, () => {\n        const tickCount = properties.tickCount(\n          'x',\n          {timeUnit, field: 'a', type: 'temporal'},\n          'linear',\n          {signal: 'a'},\n          undefined,\n          {}\n        );\n        assert.isUndefined(tickCount);\n      });\n    }\n\n    it('should return size/40 by default for linear scale', () => {\n      const tickCount = properties.tickCount(\n        'x',\n        {field: 'a', type: 'quantitative'},\n        'linear',\n        {signal: 'a'},\n        undefined,\n        {}\n      );\n      assert.deepEqual(tickCount, {signal: 'ceil(a/40)'});\n    });\n\n    it('should return undefined by default for log scale', () => {\n      const tickCount = properties.tickCount('x', {field: 'a', type: 'quantitative'}, 'log', undefined, undefined, {});\n      assert.deepEqual(tickCount, undefined);\n    });\n\n    it('should return undefined by default for point scale', () => {\n      const tickCount = properties.tickCount(\n        'x',\n        {field: 'a', type: 'quantitative'},\n        'point',\n        undefined,\n        undefined,\n        {}\n      );\n      assert.deepEqual(tickCount, undefined);\n    });\n\n    it('should return prebin step signal for axis with tickStep', () => {\n      const tickCount = properties.tickCount('x', {field: 'a', type: 'quantitative'}, 'linear', undefined, 'x', {\n        tickStep: 3\n      });\n      assert.deepEqual(tickCount, {signal: \"(domain('x')[1] - domain('x')[0]) / 3 + 1\"});\n    });\n  });\n\n  describe('values', () => {\n    it('should return correct timestamp values for DateTimes', () => {\n      const values = properties.values(\n        {values: [{year: 1970}, {year: 1980}]},\n        null,\n        {field: 'a', type: 'temporal'},\n        'x'\n      );\n\n      assert.deepEqual(values, [\n        {signal: 'datetime(1970, 0, 1, 0, 0, 0, 0)'},\n        {signal: 'datetime(1980, 0, 1, 0, 0, 0, 0)'}\n      ]);\n    });\n\n    it('should simply return values for non-DateTime', () => {\n      const values = properties.values({values: [1, 2, 3, 4]}, null, {field: 'a', type: 'quantitative'}, 'x');\n      assert.deepEqual(values, [1, 2, 3, 4]);\n    });\n\n    it('should simply drop values when domain is specified', () => {\n      const model1 = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          y: {\n            type: 'quantitative',\n            field: 'US_Gross',\n            scale: {domain: [-1, 2]},\n            bin: {extent: [0, 1]}\n          }\n        },\n        data: {url: 'data/movies.json'}\n      });\n      const values = properties.values({}, model1, model1.fieldDef('y'), 'y');\n\n      assert.deepEqual(values, undefined);\n    });\n\n    it('should return value signal for axis with tickStep', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {\n            type: 'quantitative',\n            field: 'US_Gross'\n          }\n        },\n        data: {url: 'data/movies.json'}\n      });\n      const values = properties.values({tickStep: 3}, model, {type: 'quantitative'}, 'x');\n      assert.deepEqual(values, {signal: \"sequence(domain('x')[0], domain('x')[1] + 3, 3)\"});\n    });\n  });\n\n  describe('labelAngle', () => {\n    const axisModel = parseUnitModelWithScale({\n      mark: 'bar',\n      encoding: {\n        y: {\n          type: 'quantitative',\n          field: 'US_Gross',\n          scale: {domain: [-1, 2]},\n          bin: {extent: [0, 1]},\n          axis: {labelAngle: 600}\n        }\n      },\n      data: {url: 'data/movies.json'}\n    });\n\n    const configModel = parseUnitModelWithScale({\n      config: {axis: {labelAngle: 500}},\n      mark: 'bar',\n      encoding: {\n        y: {\n          type: 'quantitative',\n          field: 'US_Gross',\n          scale: {domain: [-1, 2]},\n          bin: {extent: [0, 1]}\n        }\n      },\n      data: {url: 'data/movies.json'}\n    });\n\n    const defaultModel = parseUnitModelWithScale({\n      data: {\n        values: [\n          {a: 'A', b: 28},\n          {a: 'B', b: 55},\n          {a: 'C', b: 43},\n          {a: 'D', b: 91},\n          {a: 'E', b: 81},\n          {a: 'F', b: 53},\n          {a: 'G', b: 19},\n          {a: 'H', b: 87},\n          {a: 'I', b: 52}\n        ]\n      },\n      mark: 'bar',\n      encoding: {\n        x: {field: 'a', type: 'ordinal'},\n        y: {field: 'b', type: 'quantitative'}\n      }\n    });\n\n    const bothModel = parseUnitModelWithScale({\n      config: {axis: {labelAngle: 500}},\n      mark: 'bar',\n      encoding: {\n        y: {\n          type: 'quantitative',\n          field: 'US_Gross',\n          scale: {domain: [-1, 2]},\n          bin: {extent: [0, 1]},\n          axis: {labelAngle: 600}\n        }\n      },\n      data: {url: 'data/movies.json'}\n    });\n\n    const neitherModel = parseUnitModelWithScale({\n      mark: 'bar',\n      encoding: {\n        y: {\n          type: 'quantitative',\n          field: 'US_Gross',\n          scale: {domain: [-1, 2]},\n          bin: {extent: [0, 1]}\n        }\n      },\n      data: {url: 'data/movies.json'}\n    });\n\n    it('should return the correct labelAngle from the axis definition', () => {\n      assert.deepEqual(240, labelAngle(axisModel, axisModel.axis('y'), 'y', axisModel.fieldDef('y')));\n    });\n\n    it('should return the correct labelAngle from the axis config definition', () => {\n      assert.deepEqual(140, labelAngle(configModel, configModel.axis('y'), 'y', configModel.fieldDef('y')));\n    });\n\n    it('should return the correct default labelAngle when not specified', () => {\n      assert.deepEqual(270, labelAngle(defaultModel, defaultModel.axis('x'), 'x', defaultModel.fieldDef('x')));\n    });\n\n    it('should return the labelAngle declared in the axis when both the axis and axis config have labelAngle', () => {\n      assert.deepEqual(240, labelAngle(bothModel, bothModel.axis('y'), 'y', bothModel.fieldDef('y')));\n    });\n\n    it('should return undefined when there is no default and no specified labelAngle', () => {\n      assert.deepEqual(undefined, labelAngle(neitherModel, neitherModel.axis('y'), 'y', neitherModel.fieldDef('y')));\n    });\n  });\n\n  describe('labelAlign', () => {\n    describe('horizontal orients', () => {\n      it('360 degree check for horizonatal orients return to see if they orient properly', () => {\n        assert.equal(labelAlign(0, 'top'), 'center');\n        assert.equal(labelAlign(15, 'top'), 'right');\n        assert.equal(labelAlign(30, 'top'), 'right');\n        assert.equal(labelAlign(45, 'top'), 'right');\n        assert.equal(labelAlign(60, 'top'), 'right');\n        assert.equal(labelAlign(75, 'top'), 'right');\n        assert.equal(labelAlign(90, 'top'), 'right');\n        assert.equal(labelAlign(105, 'top'), 'right');\n        assert.equal(labelAlign(120, 'top'), 'right');\n        assert.equal(labelAlign(135, 'top'), 'right');\n        assert.equal(labelAlign(150, 'top'), 'right');\n        assert.equal(labelAlign(165, 'top'), 'right');\n        assert.equal(labelAlign(180, 'top'), 'center');\n        assert.equal(labelAlign(195, 'bottom'), 'right');\n        assert.equal(labelAlign(210, 'bottom'), 'right');\n        assert.equal(labelAlign(225, 'bottom'), 'right');\n        assert.equal(labelAlign(240, 'bottom'), 'right');\n        assert.equal(labelAlign(255, 'bottom'), 'right');\n        assert.equal(labelAlign(270, 'bottom'), 'right');\n        assert.equal(labelAlign(285, 'bottom'), 'right');\n        assert.equal(labelAlign(300, 'bottom'), 'right');\n        assert.equal(labelAlign(315, 'bottom'), 'right');\n        assert.equal(labelAlign(330, 'bottom'), 'right');\n        assert.equal(labelAlign(345, 'bottom'), 'right');\n      });\n      it('360 degree check for vertical orients return to see if they orient properly', () => {\n        assert.equal(labelAlign(0, 'left'), 'right');\n        assert.equal(labelAlign(15, 'left'), 'right');\n        assert.equal(labelAlign(30, 'left'), 'right');\n        assert.equal(labelAlign(45, 'left'), 'right');\n        assert.equal(labelAlign(60, 'left'), 'right');\n        assert.equal(labelAlign(75, 'left'), 'right');\n        assert.equal(labelAlign(90, 'left'), 'center');\n        assert.equal(labelAlign(105, 'left'), 'left');\n        assert.equal(labelAlign(120, 'left'), 'left');\n        assert.equal(labelAlign(135, 'left'), 'left');\n        assert.equal(labelAlign(150, 'left'), 'left');\n        assert.equal(labelAlign(165, 'left'), 'left');\n        assert.equal(labelAlign(180, 'left'), 'left');\n        assert.equal(labelAlign(195, 'right'), 'right');\n        assert.equal(labelAlign(210, 'right'), 'right');\n        assert.equal(labelAlign(225, 'right'), 'right');\n        assert.equal(labelAlign(240, 'right'), 'right');\n        assert.equal(labelAlign(255, 'right'), 'right');\n        assert.equal(labelAlign(270, 'right'), 'center');\n        assert.equal(labelAlign(285, 'right'), 'left');\n        assert.equal(labelAlign(300, 'right'), 'left');\n        assert.equal(labelAlign(315, 'right'), 'left');\n        assert.equal(labelAlign(330, 'right'), 'left');\n        assert.equal(labelAlign(345, 'right'), 'left');\n      });\n      it('should return undefined if angle is undefined', () => {\n        assert.deepEqual(labelAlign(undefined, 'left'), undefined);\n      });\n    });\n  });\n\n  describe('labelBaseline', () => {\n    it('is middle for perpendiculars horizontal orients', () => {\n      assert.deepEqual(labelBaseline(90, 'top'), 'middle');\n      assert.deepEqual(labelBaseline(270, 'bottom'), 'middle');\n    });\n\n    it('is top for bottom orients for 1st and 4th quadrants', () => {\n      assert.deepEqual(labelBaseline(45, 'bottom'), 'top');\n      assert.deepEqual(labelBaseline(180, 'top'), 'top');\n    });\n\n    it('is bottom for bottom orients for 2nd and 3rd quadrants', () => {\n      assert.deepEqual(labelBaseline(100, 'bottom'), 'middle');\n      assert.deepEqual(labelBaseline(260, 'bottom'), 'middle');\n    });\n\n    it('is middle for 0 and 180 horizontal orients', () => {\n      assert.deepEqual(labelBaseline(0, 'left'), 'middle');\n      assert.deepEqual(labelBaseline(180, 'right'), 'middle');\n    });\n\n    it('is top for bottom orients for 1st and 2nd quadrants', () => {\n      assert.deepEqual(labelBaseline(80, 'left'), 'top');\n      assert.deepEqual(labelBaseline(100, 'left'), 'top');\n    });\n\n    it('is bottom for bottom orients for 3rd and 4th quadrants', () => {\n      assert.deepEqual(labelBaseline(280, 'left'), 'bottom');\n      assert.deepEqual(labelBaseline(260, 'left'), 'bottom');\n    });\n\n    it('is bottom for bottom orients for 3rd and 4th quadrants', () => {\n      assert.deepEqual(labelBaseline(280, 'left'), 'bottom');\n      assert.deepEqual(labelBaseline(260, 'left'), 'bottom');\n    });\n\n    it('should return undefined if angle is undefined', () => {\n      assert.deepEqual(labelBaseline(undefined, 'left'), undefined);\n    });\n  });\n});\n"]}