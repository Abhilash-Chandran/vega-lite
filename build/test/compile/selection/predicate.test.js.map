{"version":3,"file":"predicate.test.js","sourceRoot":"","sources":["../../../../test/compile/selection/predicate.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\n\nimport {assert} from 'chai';\nimport {nonPosition} from '../../../src/compile/mark/mixins';\nimport * as selection from '../../../src/compile/selection/selection';\nimport {expression} from '../../../src/predicate';\nimport {VgEncodeEntry} from '../../../src/vega.schema';\nimport {parseUnitModel} from '../../util';\n\nconst predicate = selection.selectionPredicate;\n\ndescribe('Selection Predicate', () => {\n  const model = parseUnitModel({\n    mark: 'circle',\n    encoding: {\n      x: {field: 'Horsepower', type: 'quantitative'},\n      y: {field: 'Miles_per_Gallon', type: 'quantitative'},\n      color: {\n        field: 'Cylinders',\n        type: 'ordinal',\n        condition: {\n          selection: 'one',\n          value: 'grey'\n        }\n      },\n      opacity: {\n        field: 'Origin',\n        type: 'nominal',\n        condition: {\n          selection: {or: ['one', {and: ['two', {not: 'thr-ee'}]}]},\n          value: 0.5\n        }\n      }\n    }\n  });\n\n  model.parseScale();\n\n  model.component.selection = selection.parseUnitSelection(model, {\n    one: {type: 'single'},\n    two: {type: 'multi', resolve: 'union'},\n    'thr-ee': {type: 'interval', resolve: 'intersect'},\n    four: {type: 'single', empty: 'none'}\n  });\n\n  it('generates the predicate expression', () => {\n    assert.equal(predicate(model, 'one'), '!(length(data(\"one_store\"))) || (vlSelectionTest(\"one_store\", datum))');\n\n    assert.equal(predicate(model, 'four'), '(vlSelectionTest(\"four_store\", datum))');\n\n    assert.equal(\n      predicate(model, {not: 'one'}),\n      '!(length(data(\"one_store\"))) || (!(vlSelectionTest(\"one_store\", datum)))'\n    );\n\n    assert.equal(\n      predicate(model, {not: {and: ['one', 'two']}}),\n      '!(length(data(\"one_store\")) || length(data(\"two_store\"))) || ' +\n        '(!((vlSelectionTest(\"one_store\", datum)) && ' +\n        '(vlSelectionTest(\"two_store\", datum, \"union\"))))'\n    );\n\n    assert.equal(\n      predicate(model, {not: {and: ['one', 'four']}}),\n      '!(length(data(\"one_store\"))) || ' +\n        '(!((vlSelectionTest(\"one_store\", datum)) && ' +\n        '(vlSelectionTest(\"four_store\", datum))))'\n    );\n\n    assert.equal(\n      predicate(model, {and: ['one', 'two', {not: 'thr-ee'}]}),\n      '!(length(data(\"one_store\")) || length(data(\"two_store\")) || length(data(\"thr_ee_store\"))) || ' +\n        '((vlSelectionTest(\"one_store\", datum)) && ' +\n        '(vlSelectionTest(\"two_store\", datum, \"union\")) && ' +\n        '(!(vlSelectionTest(\"thr_ee_store\", datum, \"intersect\"))))'\n    );\n\n    assert.equal(\n      predicate(model, {or: ['one', {and: ['two', {not: 'thr-ee'}]}]}),\n      '!(length(data(\"one_store\")) || length(data(\"two_store\")) || length(data(\"thr_ee_store\"))) || ' +\n        '((vlSelectionTest(\"one_store\", datum)) || ' +\n        '((vlSelectionTest(\"two_store\", datum, \"union\")) && ' +\n        '(!(vlSelectionTest(\"thr_ee_store\", datum, \"intersect\")))))'\n    );\n  });\n\n  it('generates Vega production rules', () => {\n    assert.deepEqual<VgEncodeEntry>(nonPosition('color', model, {vgChannel: 'fill'}), {\n      fill: [\n        {test: '!(length(data(\"one_store\"))) || (vlSelectionTest(\"one_store\", datum))', value: 'grey'},\n        {scale: 'color', field: 'Cylinders'}\n      ]\n    });\n\n    assert.deepEqual<VgEncodeEntry>(nonPosition('opacity', model), {\n      opacity: [\n        {\n          test:\n            '!(length(data(\"one_store\")) || length(data(\"two_store\")) || length(data(\"thr_ee_store\"))) || ' +\n            '((vlSelectionTest(\"one_store\", datum)) || ' +\n            '((vlSelectionTest(\"two_store\", datum, \"union\")) && ' +\n            '(!(vlSelectionTest(\"thr_ee_store\", datum, \"intersect\")))))',\n          value: 0.5\n        },\n        {scale: 'opacity', field: 'Origin'}\n      ]\n    });\n  });\n\n  it('generates a selection filter', () => {\n    assert.equal(\n      expression(model, {selection: 'one'}),\n      '!(length(data(\"one_store\"))) || (vlSelectionTest(\"one_store\", datum))'\n    );\n\n    assert.equal(\n      expression(model, {selection: {not: 'one'}}),\n      '!(length(data(\"one_store\"))) || (!(vlSelectionTest(\"one_store\", datum)))'\n    );\n\n    assert.equal(\n      expression(model, {selection: {not: {and: ['one', 'two']}}}),\n      '!(length(data(\"one_store\")) || length(data(\"two_store\"))) || ' +\n        '(!((vlSelectionTest(\"one_store\", datum)) && ' +\n        '(vlSelectionTest(\"two_store\", datum, \"union\"))))'\n    );\n\n    assert.equal(\n      expression(model, {selection: {and: ['one', 'two', {not: 'thr-ee'}]}}),\n      '!(length(data(\"one_store\")) || length(data(\"two_store\")) || length(data(\"thr_ee_store\"))) || ' +\n        '((vlSelectionTest(\"one_store\", datum)) && ' +\n        '(vlSelectionTest(\"two_store\", datum, \"union\")) && ' +\n        '(!(vlSelectionTest(\"thr_ee_store\", datum, \"intersect\"))))'\n    );\n\n    assert.equal(\n      expression(model, {selection: {or: ['one', {and: ['two', {not: 'thr-ee'}]}]}}),\n      '!(length(data(\"one_store\")) || length(data(\"two_store\")) || length(data(\"thr_ee_store\"))) || ' +\n        '((vlSelectionTest(\"one_store\", datum)) || ' +\n        '((vlSelectionTest(\"two_store\", datum, \"union\")) && ' +\n        '(!(vlSelectionTest(\"thr_ee_store\", datum, \"intersect\")))))'\n    );\n  });\n\n  it('throws an error for unknown selections', () => {\n    assert.throws(() => predicate(model, 'helloworld'), 'Cannot find a selection named \"helloworld\"');\n  });\n});\n"]}