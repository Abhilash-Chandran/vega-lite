{"version":3,"file":"pathoverlay.test.js","sourceRoot":"","sources":["../../../test/normalize/pathoverlay.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport {normalize} from '../../src/normalize/index';\nimport {PathOverlayNormalizer} from '../../src/normalize/pathoverlay';\nimport {TopLevelSpec} from '../../src/spec';\nimport {DataMixins} from '../../src/spec/base';\nimport {TopLevel} from '../../src/spec/toplevel';\nimport {NormalizedUnitSpec} from '../../src/spec/unit';\n\ndescribe('PathOverlayNormalizer', () => {\n  const pathOverlayNormalizer = new PathOverlayNormalizer();\n\n  it('correctly normalizes line with overlayed point.', () => {\n    const spec: TopLevel<NormalizedUnitSpec> & DataMixins = {\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      mark: 'line',\n      encoding: {\n        x: {field: 'date', type: 'temporal'},\n        y: {field: 'price', type: 'quantitative'}\n      },\n      config: {line: {point: {}}}\n    };\n\n    expect(pathOverlayNormalizer.hasMatchingType(spec, spec.config)).toBeTruthy();\n\n    const normalizedSpec = normalize(spec);\n    expect(normalizedSpec).toEqual({\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      layer: [\n        {\n          mark: 'line',\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        },\n        {\n          mark: {type: 'point', opacity: 1, filled: true},\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        }\n      ],\n      config: {line: {point: {}}}\n    });\n  });\n\n  it('correctly normalizes line with transparent point overlayed.', () => {\n    const spec: TopLevelSpec = {\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      mark: {type: 'line', point: 'transparent'},\n      encoding: {\n        x: {field: 'date', type: 'temporal'},\n        y: {field: 'price', type: 'quantitative'}\n      }\n    };\n    const normalizedSpec = normalize(spec);\n    expect(normalizedSpec).toEqual({\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      layer: [\n        {\n          mark: 'line',\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        },\n        {\n          mark: {type: 'point', opacity: 0, filled: true},\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        }\n      ]\n    });\n  });\n\n  it('correctly normalizes line with point overlayed via mark definition.', () => {\n    const spec: TopLevelSpec = {\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      mark: {type: 'line', point: {color: 'red'}},\n      encoding: {\n        x: {field: 'date', type: 'temporal'},\n        y: {field: 'price', type: 'quantitative'}\n      }\n    };\n    const normalizedSpec = normalize(spec);\n    expect(normalizedSpec).toEqual({\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      layer: [\n        {\n          mark: 'line',\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        },\n        {\n          mark: {type: 'point', opacity: 1, filled: true, color: 'red'},\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        }\n      ]\n    });\n  });\n\n  it('correctly normalizes faceted line plots with overlayed point.', () => {\n    const spec: TopLevelSpec = {\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      mark: 'line',\n      encoding: {\n        row: {field: 'symbol', type: 'nominal'},\n        x: {field: 'date', type: 'temporal'},\n        y: {field: 'price', type: 'quantitative'}\n      },\n      config: {line: {point: {}}}\n    };\n    const normalizedSpec = normalize(spec);\n    expect(normalizedSpec).toEqual({\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      facet: {\n        row: {field: 'symbol', type: 'nominal'}\n      },\n      spec: {\n        layer: [\n          {\n            mark: 'line',\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          },\n          {\n            mark: {type: 'point', opacity: 1, filled: true},\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          }\n        ]\n      },\n      config: {line: {point: {}}}\n    });\n  });\n\n  it('correctly normalizes area with overlay line and point', () => {\n    const spec: TopLevelSpec = {\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      mark: 'area',\n      encoding: {\n        x: {field: 'date', type: 'temporal'},\n        y: {field: 'price', type: 'quantitative'}\n      },\n      config: {area: {line: {}, point: {}}}\n    };\n    const normalizedSpec = normalize(spec);\n    expect(normalizedSpec).toEqual({\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      layer: [\n        {\n          mark: {type: 'area', opacity: 0.7},\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        },\n        {\n          mark: {type: 'line'},\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        },\n        {\n          mark: {type: 'point', opacity: 1, filled: true},\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        }\n      ],\n      config: {area: {line: {}, point: {}}}\n    });\n  });\n\n  it('correctly normalizes interpolated area with overlay line', () => {\n    const spec: TopLevelSpec = {\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      mark: {type: 'area', interpolate: 'monotone'},\n      encoding: {\n        x: {field: 'date', type: 'temporal'},\n        y: {field: 'price', type: 'quantitative'}\n      },\n      config: {area: {line: {}}}\n    };\n    const normalizedSpec = normalize(spec);\n    expect(normalizedSpec).toEqual({\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      layer: [\n        {\n          mark: {type: 'area', opacity: 0.7, interpolate: 'monotone'},\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        },\n        {\n          mark: {type: 'line', interpolate: 'monotone'},\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        }\n      ],\n      config: {area: {line: {}}}\n    });\n  });\n\n  it('correctly normalizes area with overlay point and line disabled in config.', () => {\n    for (const overlay of [null, false]) {\n      const spec: TopLevelSpec = {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        mark: 'area',\n        encoding: {\n          x: {field: 'date', type: 'temporal'},\n          y: {field: 'price', type: 'quantitative'}\n        },\n        config: {\n          area: {point: overlay, line: overlay}\n        }\n      };\n      const normalizedSpec = normalize(spec);\n      expect(normalizedSpec).toEqual({\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        mark: 'area',\n        encoding: {\n          x: {field: 'date', type: 'temporal'},\n          y: {field: 'price', type: 'quantitative'}\n        },\n        config: {\n          area: {point: overlay, line: overlay}\n        }\n      });\n    }\n  });\n\n  it('correctly normalizes stacked area with overlay line', () => {\n    const spec: TopLevelSpec = {\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      mark: 'area',\n      encoding: {\n        x: {field: 'date', type: 'temporal'},\n        y: {aggregate: 'sum', field: 'price', type: 'quantitative'},\n        color: {field: 'symbol', type: 'nominal'}\n      },\n      config: {area: {line: {}}}\n    };\n    const normalizedSpec = normalize(spec);\n    expect(normalizedSpec).toEqual({\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      layer: [\n        {\n          mark: {type: 'area', opacity: 0.7},\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {aggregate: 'sum', field: 'price', type: 'quantitative'},\n            color: {field: 'symbol', type: 'nominal'}\n          }\n        },\n        {\n          mark: {type: 'line'},\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {aggregate: 'sum', field: 'price', type: 'quantitative', stack: 'zero'},\n            color: {field: 'symbol', type: 'nominal'}\n          }\n        }\n      ],\n      config: {area: {line: {}}}\n    });\n  });\n\n  it('correctly normalizes streamgraph with overlay line', () => {\n    const spec: TopLevelSpec = {\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      mark: 'area',\n      encoding: {\n        x: {field: 'date', type: 'temporal'},\n        y: {aggregate: 'sum', field: 'price', type: 'quantitative', stack: 'center'},\n        color: {field: 'symbol', type: 'nominal'}\n      },\n      config: {area: {line: {}}}\n    };\n\n    const normalizedSpec = normalize(spec);\n    expect(normalizedSpec).toEqual({\n      data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n      layer: [\n        {\n          mark: {type: 'area', opacity: 0.7},\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {aggregate: 'sum', field: 'price', type: 'quantitative', stack: 'center'},\n            color: {field: 'symbol', type: 'nominal'}\n          }\n        },\n        {\n          mark: {type: 'line'},\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {aggregate: 'sum', field: 'price', type: 'quantitative', stack: 'center'},\n            color: {field: 'symbol', type: 'nominal'}\n          }\n        }\n      ],\n      config: {area: {line: {}}}\n    });\n  });\n});\n"]}