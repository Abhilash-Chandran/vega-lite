{"version":3,"file":"errorbar.test.js","sourceRoot":"","sources":["../../../test/compositemark/errorbar.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport {AggregateOp} from 'vega';\nimport {ErrorBarCenter, ErrorBarExtent} from '../../src/compositemark/errorbar';\nimport {defaultConfig} from '../../src/config';\nimport {isFieldDef} from '../../src/fielddef';\nimport * as log from '../../src/log';\nimport {isMarkDef} from '../../src/mark';\nimport {CompositeUnitSpec, ExtendedLayerSpec, GenericSpec, isLayerSpec, isUnitSpec, normalize} from '../../src/spec';\nimport {isAggregate, isCalculate, Transform} from '../../src/transform';\nimport {some} from '../../src/util';\n\ndescribe('normalizeErrorBar with raw data input', () => {\n  it('should produce correct layered specs for mean point and vertical error bar', () => {\n    const output = normalize(\n      {\n        data: {\n          url: 'data/population.json'\n        },\n        mark: 'errorbar',\n        encoding: {\n          x: {\n            field: 'age',\n            type: 'ordinal'\n          },\n          y: {\n            field: 'people',\n            type: 'quantitative'\n          }\n        }\n      },\n      defaultConfig\n    );\n\n    expect(output).toEqual({\n      data: {url: 'data/population.json'},\n      transform: [\n        {\n          aggregate: [\n            {op: 'stderr', field: 'people', as: 'extent_people'},\n            {op: 'mean', field: 'people', as: 'center_people'}\n          ],\n          groupby: ['age']\n        },\n        {\n          calculate: 'datum.center_people + datum.extent_people',\n          as: 'upper_people'\n        },\n        {\n          calculate: 'datum.center_people - datum.extent_people',\n          as: 'lower_people'\n        }\n      ],\n      layer: [\n        {\n          mark: {type: 'rule', style: 'errorbar-rule'},\n          encoding: {\n            y: {\n              field: 'lower_people',\n              type: 'quantitative',\n              title: 'people'\n            },\n            y2: {field: 'upper_people', type: 'quantitative'},\n            x: {field: 'age', type: 'ordinal'},\n            tooltip: [\n              {field: 'center_people', title: 'Mean of people', type: 'quantitative'},\n              {field: 'upper_people', title: 'Mean + stderr of people', type: 'quantitative'},\n              {field: 'lower_people', title: 'Mean - stderr of people', type: 'quantitative'},\n              {field: 'age', type: 'ordinal'}\n            ]\n          }\n        }\n      ]\n    });\n  });\n\n  it('should produce an error if both axes have aggregate errorbar', () => {\n    expect(() => {\n      normalize(\n        {\n          data: {url: 'data/population.json'},\n          mark: {\n            type: 'errorbar'\n          },\n          encoding: {\n            x: {aggregate: 'errorbar', field: 'people', type: 'quantitative'},\n            y: {\n              aggregate: 'errorbar',\n              field: 'people',\n              type: 'quantitative'\n            },\n            color: {value: 'skyblue'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it(\n    'should produce a warning if continuous axis has aggregate property',\n    log.wrap(localLogger => {\n      const aggregate = 'min';\n      const mark = 'errorbar';\n\n      normalize(\n        {\n          data: {url: 'data/population.json'},\n          mark,\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {\n              aggregate,\n              field: 'people',\n              type: 'quantitative'\n            },\n            color: {value: 'skyblue'}\n          }\n        },\n        defaultConfig\n      );\n\n      expect(localLogger.warns[0]).toEqual(log.message.errorBarContinuousAxisHasCustomizedAggregate(aggregate, mark));\n    })\n  );\n\n  it('should produce an error if build 1D errorbar with a discrete axis', () => {\n    expect(() => {\n      normalize(\n        {\n          data: {url: 'data/population.json'},\n          mark: 'errorbar',\n          encoding: {\n            x: {field: 'age', type: 'ordinal'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it('should produce an error if both axes are discrete', () => {\n    expect(() => {\n      normalize(\n        {\n          data: {url: 'data/population.json'},\n          mark: {\n            type: 'errorbar'\n          },\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {\n              field: 'age',\n              type: 'ordinal'\n            },\n            color: {value: 'skyblue'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it('should produce an error if in 2D errobar both axes are not valid field definitions', () => {\n    expect(() => {\n      normalize(\n        {\n          data: {url: 'data/population.json'},\n          mark: {\n            type: 'errorbar'\n          },\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {\n              type: 'ordinal'\n            },\n            color: {value: 'skyblue'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it('should produce an error if 1D errorbar only axis is discrete', () => {\n    expect(() => {\n      normalize(\n        {\n          data: {url: 'data/population.json'},\n          mark: 'errorbar',\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            color: {value: 'skyblue'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it('should aggregate y field for vertical errorbar with two quantitative axes and explicit orient', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'errorbar',\n          orient: 'vertical'\n        },\n        encoding: {\n          x: {\n            field: 'age',\n            type: 'quantitative'\n          },\n          y: {\n            field: 'people',\n            type: 'quantitative'\n          }\n        }\n      },\n      defaultConfig\n    );\n    const aggregateTransform = outputSpec.transform[0];\n    if (isAggregate(aggregateTransform)) {\n      expect(\n        some(aggregateTransform.aggregate, aggregateFieldDef => {\n          return (\n            aggregateFieldDef.field === 'people' &&\n            (aggregateFieldDef.op === 'mean' || aggregateFieldDef.op === 'median')\n          );\n        })\n      ).toBe(true);\n    } else {\n      expect(false).toBe(true);\n    }\n  });\n\n  it('should aggregate x field for horizontal errorbar with two quantitative axes and explicit orient', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'errorbar',\n          orient: 'horizontal'\n        },\n        encoding: {\n          x: {\n            field: 'age',\n            type: 'quantitative'\n          },\n          y: {\n            field: 'people',\n            type: 'quantitative'\n          }\n        }\n      },\n      defaultConfig\n    );\n\n    const aggregateTransform = outputSpec.transform[0];\n    if (isAggregate(aggregateTransform)) {\n      expect(\n        some(aggregateTransform.aggregate, aggregateFieldDef => {\n          return (\n            aggregateFieldDef.field === 'age' && (aggregateFieldDef.op === 'mean' || aggregateFieldDef.op === 'median')\n          );\n        })\n      ).toBe(true);\n    } else {\n      expect(false).toBe(true);\n    }\n  });\n\n  it('should aggregate y field for vertical errorbar with two quantitative axes and specify orientation with aggregate', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: 'errorbar',\n        encoding: {\n          x: {\n            field: 'age',\n            type: 'quantitative'\n          },\n          y: {\n            aggregate: 'errorbar',\n            field: 'people',\n            type: 'quantitative'\n          }\n        }\n      },\n      defaultConfig\n    );\n\n    const aggregateTransform = outputSpec.transform[0];\n    if (isAggregate(aggregateTransform)) {\n      expect(\n        some(aggregateTransform.aggregate, aggregateFieldDef => {\n          return (\n            aggregateFieldDef.field === 'people' &&\n            (aggregateFieldDef.op === 'mean' || aggregateFieldDef.op === 'median')\n          );\n        })\n      ).toBe(true);\n    } else {\n      expect(false).toBe(true);\n    }\n  });\n\n  it('should aggregate x field for horizontal errorbar with two quantitative axes and specify orientation with aggregate', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: 'errorbar',\n        encoding: {\n          x: {\n            aggregate: 'errorbar',\n            field: 'age',\n            type: 'quantitative'\n          },\n          y: {\n            field: 'people',\n            type: 'quantitative'\n          }\n        }\n      },\n      defaultConfig\n    );\n\n    const aggregateTransform = outputSpec.transform[0];\n    if (isAggregate(aggregateTransform)) {\n      expect(\n        some(aggregateTransform.aggregate, aggregateFieldDef => {\n          return (\n            aggregateFieldDef.field === 'age' && (aggregateFieldDef.op === 'mean' || aggregateFieldDef.op === 'median')\n          );\n        })\n      ).toBe(true);\n    } else {\n      expect(false).toBe(true);\n    }\n  });\n\n  it('should aggregate x field for horizontal errorbar with x as quantitative axis', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: 'errorbar',\n        encoding: {\n          x: {\n            field: 'age',\n            type: 'quantitative'\n          },\n          y: {\n            field: 'people',\n            type: 'ordinal'\n          }\n        }\n      },\n      defaultConfig\n    );\n\n    const aggregateTransform = outputSpec.transform[0];\n    if (isAggregate(aggregateTransform)) {\n      expect(\n        some(aggregateTransform.aggregate, aggregateFieldDef => {\n          return (\n            aggregateFieldDef.field === 'age' && (aggregateFieldDef.op === 'mean' || aggregateFieldDef.op === 'median')\n          );\n        })\n      ).toBe(true);\n    } else {\n      expect(false).toBe(true);\n    }\n  });\n\n  it('should produce correct layered specs for veritcal errorbar with ticks', () => {\n    const color = 'red';\n    const opacity = 0.5;\n    const size = 10;\n\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'errorbar',\n          ticks: {\n            size,\n            color,\n            opacity\n          }\n        },\n        encoding: {\n          x: {\n            field: 'age',\n            type: 'ordinal'\n          },\n          y: {\n            field: 'people',\n            type: 'quantitative'\n          }\n        }\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    if (layer) {\n      expect(\n        some(layer, unitSpec => {\n          return (\n            isUnitSpec(unitSpec) &&\n            isMarkDef(unitSpec.mark) &&\n            unitSpec.mark.type === 'tick' &&\n            unitSpec.mark.size === size &&\n            unitSpec.mark.color === color &&\n            unitSpec.mark.opacity === opacity\n          );\n        })\n      ).toBe(true);\n    } else {\n      expect(false).toBe(true);\n    }\n  });\n\n  it('should produce correct layered specs with customized title', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {\n          type: 'errorbar',\n          point: false\n        },\n        encoding: {\n          x: {\n            field: 'age',\n            type: 'ordinal'\n          },\n          y: {\n            field: 'people',\n            type: 'quantitative',\n            title: 'population'\n          }\n        }\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    if (layer) {\n      expect(\n        some(layer, unitSpec => {\n          return isUnitSpec(unitSpec) && isFieldDef(unitSpec.encoding.y) && unitSpec.encoding.y.title === 'population';\n        })\n      ).toBe(true);\n    } else {\n      expect(false).toBe(true);\n    }\n  });\n\n  it(\"should not overwrite transform with errorbar's transfroms\", () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: 'errorbar',\n        transform: [{calculate: 'age * 2', as: 'age2'}],\n        encoding: {x: {field: 'age', type: 'ordinal'}, y: {field: 'people', type: 'quantitative', title: 'population'}}\n      },\n      defaultConfig\n    );\n\n    const transforms: Transform[] = outputSpec.transform;\n    expect(transforms).toBeDefined();\n    expect(transforms).not.toHaveLength(0);\n    expect(transforms[0]).toEqual({calculate: 'age * 2', as: 'age2'});\n  });\n\n  it('should produce a correct tooltip title for errorbar with stdev extent', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {type: 'errorbar', extent: 'stdev'},\n        encoding: {x: {field: 'age', type: 'ordinal'}, y: {field: 'people', type: 'quantitative'}}\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    expect(layer).toBeTruthy();\n    for (const unitSpec of layer) {\n      const encoding = isUnitSpec(unitSpec) && unitSpec.encoding;\n      expect(encoding).toBeTruthy();\n      const tooltip = encoding.tooltip;\n      expect(tooltip).toEqual([\n        {field: 'center_people', title: 'Mean of people', type: 'quantitative'},\n        {field: 'upper_people', title: 'Mean + stdev of people', type: 'quantitative'},\n        {field: 'lower_people', title: 'Mean - stdev of people', type: 'quantitative'},\n        {field: 'age', type: 'ordinal'}\n      ]);\n    }\n  });\n\n  it('should produce a correct tooltip title for errorbar with stderr extent', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {type: 'errorbar', extent: 'stderr'},\n        encoding: {x: {field: 'age', type: 'ordinal'}, y: {field: 'people', type: 'quantitative'}}\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    expect(layer).toBeTruthy();\n    for (const unitSpec of layer) {\n      const encoding = isUnitSpec(unitSpec) && unitSpec.encoding;\n      expect(encoding).toBeTruthy();\n      const tooltip = encoding.tooltip;\n      expect(tooltip).toEqual([\n        {field: 'center_people', title: 'Mean of people', type: 'quantitative'},\n        {field: 'upper_people', title: 'Mean + stderr of people', type: 'quantitative'},\n        {field: 'lower_people', title: 'Mean - stderr of people', type: 'quantitative'},\n        {field: 'age', type: 'ordinal'}\n      ]);\n    }\n  });\n\n  it('should produce a correct tooltip title for errorbar with ci extent', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {type: 'errorbar', extent: 'ci'},\n        encoding: {x: {field: 'age', type: 'ordinal'}, y: {field: 'people', type: 'quantitative'}}\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    expect(layer).toBeTruthy();\n    for (const unitSpec of layer) {\n      const encoding = isUnitSpec(unitSpec) && unitSpec.encoding;\n      expect(encoding).toBeTruthy();\n      const tooltip = encoding.tooltip;\n      expect(tooltip).toEqual([\n        {field: 'upper_people', title: 'Ci1 of people', type: 'quantitative'},\n        {field: 'lower_people', title: 'Ci0 of people', type: 'quantitative'},\n        {field: 'center_people', title: 'Mean of people', type: 'quantitative'},\n        {field: 'age', type: 'ordinal'}\n      ]);\n    }\n  });\n\n  it('should produce a correct tooltip title for errorbar with iqr extent', () => {\n    const outputSpec = normalize(\n      {\n        data: {url: 'data/population.json'},\n        mark: {type: 'errorbar', extent: 'iqr'},\n        encoding: {x: {field: 'age', type: 'ordinal'}, y: {field: 'people', type: 'quantitative'}}\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    expect(layer).toBeTruthy();\n    for (const unitSpec of layer) {\n      const encoding = isUnitSpec(unitSpec) && unitSpec.encoding;\n      expect(encoding).toBeTruthy();\n      const tooltip = encoding.tooltip;\n      expect(tooltip).toEqual([\n        {field: 'upper_people', title: 'Q3 of people', type: 'quantitative'},\n        {field: 'lower_people', title: 'Q1 of people', type: 'quantitative'},\n        {field: 'center_people', title: 'Median of people', type: 'quantitative'},\n        {field: 'age', type: 'ordinal'}\n      ]);\n    }\n  });\n});\n\ndescribe('normalizeErrorBar for all possible extents and centers with raw data input', () => {\n  const centers: ErrorBarCenter[] = ['mean', 'median', undefined];\n  const extents: ErrorBarExtent[] = ['stderr', 'stdev', 'ci', 'iqr', undefined];\n\n  const warningOutputMap = {\n    mean: {\n      stderr: [false, false],\n      stdev: [false, false],\n      ci: [false, true],\n      iqr: [true, true],\n      '': [false, false]\n    },\n    median: {\n      stderr: [true, false],\n      stdev: [true, false],\n      ci: [true, true],\n      iqr: [false, true],\n      '': [false, false]\n    },\n    '': {\n      stderr: [false, false],\n      stdev: [false, false],\n      ci: [false, false],\n      iqr: [false, false],\n      '': [false, false]\n    }\n  };\n\n  const warningMessage = [\n    (center: ErrorBarCenter, extent: ErrorBarExtent, type: 'errorbar' | 'errorband') => {\n      return log.message.errorBarCenterIsUsedWithWrongExtent(center, extent, type); // msg1\n    },\n    (_center: ErrorBarCenter, extent: ErrorBarExtent, type: 'errorbar' | 'errorband') => {\n      return log.message.errorBarCenterIsNotNeeded(extent, type); // msg2\n    }\n  ];\n\n  const type = 'errorbar';\n\n  for (const center of centers) {\n    for (const extent of extents) {\n      const spec: GenericSpec<CompositeUnitSpec, ExtendedLayerSpec> = {\n        data: {url: 'data/population.json'},\n        mark: {type, ...(center ? {center} : {}), ...(extent ? {extent} : {})},\n        encoding: {\n          x: {field: 'people', type: 'quantitative'},\n          y: {field: 'people', type: 'quantitative'}\n        }\n      };\n\n      const warningOutput = warningOutputMap[center ? center : ''][extent ? extent : ''];\n\n      for (let k = 0; k < warningOutput.length; k++) {\n        const testMsg =\n          'should ' +\n          (warningOutput[k] ? '' : 'not ') +\n          'produce a warning if center is ' +\n          (center ? center : 'not specified') +\n          ' and extent is ' +\n          (extent ? extent : 'not specified') +\n          ' that ' +\n          warningMessage[k](center, extent, type);\n\n        it(\n          testMsg,\n          log.wrap(localLogger => {\n            normalize(spec, defaultConfig);\n\n            expect(warningOutput[k]).toEqual(\n              some(localLogger.warns, message => {\n                return message === warningMessage[k](center, extent, type);\n              })\n            );\n          })\n        );\n      }\n\n      const outputSpec = normalize(spec, defaultConfig);\n      const aggregateTransform = outputSpec.transform[0];\n      const testMsg =\n        'should produce a correct layer spec if center is ' +\n        (center ? center : 'not specified') +\n        ' and extent is ' +\n        (extent ? extent : 'not specified') +\n        '.';\n\n      it(testMsg, () => {\n        if (isAggregate(aggregateTransform)) {\n          if (extent === 'iqr' || (center === 'median' && !extent)) {\n            expect(\n              some(aggregateTransform.aggregate, aggregateFieldDef => {\n                return aggregateFieldDef.op === 'median';\n              })\n            ).toBe(true);\n          } else if (extent === 'ci') {\n            expect(\n              some(aggregateTransform.aggregate, aggregateFieldDef => {\n                return aggregateFieldDef.op === 'mean';\n              })\n            ).toBe(true);\n          } else {\n            if (center) {\n              expect(\n                some(aggregateTransform.aggregate, aggregateFieldDef => {\n                  return aggregateFieldDef.op === center;\n                })\n              ).toBe(true);\n            } else {\n              expect(\n                some(aggregateTransform.aggregate, aggregateFieldDef => {\n                  return aggregateFieldDef.op === 'mean';\n                })\n              ).toBe(true);\n            }\n\n            if (extent) {\n              expect(\n                some(aggregateTransform.aggregate, aggregateFieldDef => {\n                  return isPartOfExtent(extent, aggregateFieldDef.op);\n                })\n              ).toBe(true);\n            } else if (center === 'median') {\n              expect(\n                some(aggregateTransform.aggregate, aggregateFieldDef => {\n                  return isPartOfExtent('iqr', aggregateFieldDef.op);\n                })\n              ).toBe(true);\n\n              expect(\n                some(aggregateTransform.aggregate, aggregateFieldDef => {\n                  return aggregateFieldDef.op === 'median';\n                })\n              ).toBe(false);\n            } else {\n              expect(\n                some(aggregateTransform.aggregate, aggregateFieldDef => {\n                  return isPartOfExtent('stderr', aggregateFieldDef.op);\n                })\n              ).toBe(true);\n            }\n          }\n        } else {\n          expect(false).toBe(true);\n        }\n      });\n    }\n  }\n});\n\nfunction isPartOfExtent(extent: ErrorBarExtent, op: AggregateOp) {\n  if (extent === 'ci') {\n    return op === 'ci0' || op === 'ci1';\n  } else if (extent === 'iqr') {\n    return op === 'q1' || op === 'q3';\n  }\n  return extent === op;\n}\n\ndescribe('normalizeErrorBar with aggregated upper and lower bound input', () => {\n  const data = {\n    values: [\n      {age: 1, people: 1, people2: 2},\n      {age: 2, people: 4, people2: 8},\n      {age: 3, people: 13, people2: 18},\n      {age: 4, people: 2, people2: 28},\n      {age: 5, people: 19, people2: 23},\n      {age: 6, people: 10, people2: 20},\n      {age: 7, people: 2, people2: 5}\n    ]\n  };\n\n  const mark = 'errorbar';\n\n  it('should produce correct layered specs for vertical errorbar with aggregated upper and lower bound input', () => {\n    expect(\n      normalize(\n        {\n          data,\n          mark,\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {field: 'people', type: 'quantitative'},\n            y2: {field: 'people2', type: 'quantitative'}\n          }\n        },\n        defaultConfig\n      )\n    ).toEqual({\n      data,\n      transform: [{calculate: 'datum.people2', as: 'upper_people'}, {calculate: 'datum.people', as: 'lower_people'}],\n      layer: [\n        {\n          mark: {type: 'rule', style: 'errorbar-rule'},\n          encoding: {\n            y: {\n              field: 'lower_people',\n              type: 'quantitative',\n              title: 'people'\n            },\n            y2: {field: 'upper_people', type: 'quantitative'},\n            x: {field: 'age', type: 'ordinal'},\n            tooltip: [\n              {field: 'upper_people', title: 'people2', type: 'quantitative'},\n              {field: 'lower_people', title: 'people', type: 'quantitative'},\n              {field: 'age', type: 'ordinal'}\n            ]\n          }\n        }\n      ]\n    });\n  });\n\n  it('should produce correct layered specs for horizontal errorbar with aggregated upper and lower bound input', () => {\n    const outputSpec = normalize(\n      {\n        data,\n        mark,\n        encoding: {\n          y: {field: 'age', type: 'ordinal'},\n          x: {field: 'people', type: 'quantitative'},\n          x2: {field: 'people2', type: 'quantitative'}\n        }\n      },\n      defaultConfig\n    );\n\n    for (let i = 0; i < 2; i++) {\n      const calculate: Transform = outputSpec.transform[i];\n\n      if (isCalculate(calculate)) {\n        expect(\n          (calculate.calculate === 'datum.people' && calculate.as === 'lower_people') ||\n            (calculate.calculate === 'datum.people2' && calculate.as === 'upper_people')\n        ).toBe(true);\n      } else {\n        expect(false).toBe(true);\n      }\n    }\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    if (layer) {\n      expect(\n        some(layer, unitSpec => {\n          return (\n            isUnitSpec(unitSpec) && isFieldDef(unitSpec.encoding.x) && unitSpec.encoding.x.field === 'lower_people'\n          );\n        })\n      ).toBe(true);\n      expect(\n        some(layer, unitSpec => {\n          return (\n            isUnitSpec(unitSpec) && isFieldDef(unitSpec.encoding.x2) && unitSpec.encoding.x2.field === 'upper_people'\n          );\n        })\n      ).toBe(true);\n    } else {\n      expect(false).toBe(true);\n    }\n  });\n\n  it(\n    'should produce a warning if upper and lower bound are aggregated but center and/or extent is specified',\n    log.wrap(localLogger => {\n      const extent = 'stdev';\n      const center = 'mean';\n\n      normalize(\n        {\n          data,\n          mark: {\n            type: 'errorbar',\n            extent,\n            center\n          },\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {field: 'people', type: 'quantitative'},\n            y2: {field: 'people2', type: 'quantitative'}\n          }\n        },\n        defaultConfig\n      );\n\n      expect(localLogger.warns[0]).toEqual(log.message.errorBarCenterAndExtentAreNotNeeded(center, extent));\n    })\n  );\n\n  it('should produce an error if upper and lower bound are aggregated and have both x2 and y2 quantiative', () => {\n    expect(() => {\n      normalize(\n        {\n          data,\n          mark,\n          encoding: {\n            x: {field: 'age', type: 'quantitative'},\n            x2: {field: 'age2', type: 'quantitative'},\n            y: {field: 'people', type: 'quantitative'},\n            y2: {field: 'people2', type: 'quantitative'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it(\n    'should produce a warning if the second continuous axis has aggregate property',\n    log.wrap(localLogger => {\n      const aggregate = 'min';\n\n      normalize(\n        {\n          data,\n          mark,\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {field: 'people', type: 'quantitative'},\n            y2: {field: 'people2', type: 'quantitative', aggregate}\n          }\n        },\n        defaultConfig\n      );\n\n      expect(localLogger.warns[0]).toEqual(log.message.errorBarContinuousAxisHasCustomizedAggregate(aggregate, mark));\n    })\n  );\n\n  it(\n    'should produce a warning if there is an unsupported channel in encoding',\n    log.wrap(localLogger => {\n      const size = 'size';\n\n      normalize(\n        {\n          data,\n          mark,\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {field: 'people', type: 'quantitative'},\n            y2: {field: 'people2', type: 'quantitative', aggregate: 'min'},\n            size: {value: 10}\n          }\n        },\n        defaultConfig\n      );\n\n      expect(localLogger.warns[0]).toEqual(log.message.incompatibleChannel(size, mark));\n    })\n  );\n\n  it('should produce a correct tooltip title for ranged errorbar', () => {\n    const outputSpec = normalize(\n      {\n        data,\n        mark,\n        encoding: {\n          x: {field: 'age', type: 'ordinal'},\n          y: {field: 'people', type: 'quantitative'},\n          y2: {field: 'people2', type: 'quantitative'}\n        }\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    expect(layer).toBeTruthy();\n    for (const unitSpec of layer) {\n      const encoding = isUnitSpec(unitSpec) && unitSpec.encoding;\n      expect(encoding).toBeTruthy();\n      const tooltip = encoding.tooltip;\n      expect(tooltip).toEqual([\n        {field: 'upper_people', title: 'people2', type: 'quantitative'},\n        {field: 'lower_people', title: 'people', type: 'quantitative'},\n        {field: 'age', type: 'ordinal'}\n      ]);\n    }\n  });\n});\n\ndescribe('normalizeErrorBar with aggregated error input', () => {\n  const data = {\n    values: [\n      {age: 1, people: 1, people_err: 2, people_err2: -3},\n      {age: 2, people: 4, people_err: 8, people_err2: -3},\n      {age: 3, people: 13, people_err: 18, people_err2: -3},\n      {age: 4, people: 2, people_err: 28, people_err2: -3}\n    ]\n  };\n\n  const mark = 'errorbar';\n\n  it('should produce correct layered specs for vertical errorbar with aggregated error input', () => {\n    expect(\n      normalize(\n        {\n          data,\n          mark,\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {field: 'people', type: 'quantitative'},\n            yError: {field: 'people_error', type: 'quantitative'}\n          }\n        },\n        defaultConfig\n      )\n    ).toEqual({\n      data,\n      transform: [\n        {calculate: 'datum.people + datum.people_error', as: 'upper_people'},\n        {calculate: 'datum.people - datum.people_error', as: 'lower_people'}\n      ],\n      layer: [\n        {\n          mark: {type: 'rule', style: 'errorbar-rule'},\n          encoding: {\n            y: {\n              field: 'lower_people',\n              type: 'quantitative',\n              title: 'people'\n            },\n            y2: {field: 'upper_people', type: 'quantitative'},\n            x: {field: 'age', type: 'ordinal'},\n            tooltip: [\n              {field: 'people', title: 'people', type: 'quantitative'},\n              {field: 'upper_people', title: 'people + people_error', type: 'quantitative'},\n              {field: 'lower_people', title: 'people - people_error', type: 'quantitative'},\n              {field: 'age', type: 'ordinal'}\n            ]\n          }\n        }\n      ]\n    });\n  });\n\n  it('should produce correct layered specs for horizontal errorbar with aggregated error input', () => {\n    const outputSpec = normalize(\n      {\n        data,\n        mark,\n        encoding: {\n          y: {field: 'age', type: 'ordinal'},\n          x: {field: 'people', type: 'quantitative'},\n          xError: {field: 'people_error', type: 'quantitative'}\n        }\n      },\n      defaultConfig\n    );\n\n    for (let i = 0; i < 2; i++) {\n      const calculate: Transform = outputSpec.transform[i];\n\n      if (isCalculate(calculate)) {\n        expect(\n          (calculate.calculate === 'datum.people - datum.people_error' && calculate.as === 'lower_people') ||\n            (calculate.calculate === 'datum.people + datum.people_error' && calculate.as === 'upper_people')\n        ).toBe(true);\n      } else {\n        expect(false).toBe(true);\n      }\n    }\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    if (layer) {\n      expect(\n        some(layer, unitSpec => {\n          return (\n            isUnitSpec(unitSpec) && isFieldDef(unitSpec.encoding.x) && unitSpec.encoding.x.field === 'lower_people'\n          );\n        })\n      ).toBe(true);\n      expect(\n        some(layer, unitSpec => {\n          return (\n            isUnitSpec(unitSpec) && isFieldDef(unitSpec.encoding.x2) && unitSpec.encoding.x2.field === 'upper_people'\n          );\n        })\n      ).toBe(true);\n    } else {\n      expect(false).toBe(true);\n    }\n  });\n\n  it('should produce correct layered specs for horizontal errorbar with 2 aggregated error input', () => {\n    const outputSpec = normalize(\n      {\n        data,\n        mark,\n        encoding: {\n          y: {field: 'age', type: 'ordinal'},\n          x: {field: 'people', type: 'quantitative'},\n          xError: {field: 'people_error', type: 'quantitative'},\n          xError2: {field: 'people_error2', type: 'quantitative'}\n        }\n      },\n      defaultConfig\n    );\n\n    for (let i = 0; i < 2; i++) {\n      const calculate: Transform = outputSpec.transform[i];\n\n      if (isCalculate(calculate)) {\n        expect(\n          (calculate.calculate === 'datum.people + datum.people_error' && calculate.as === 'upper_people') ||\n            (calculate.calculate === 'datum.people + datum.people_error2' && calculate.as === 'lower_people')\n        ).toBe(true);\n      } else {\n        expect(false).toBe(true);\n      }\n    }\n\n    if (isLayerSpec(outputSpec)) {\n      const unit = outputSpec.layer[0];\n      if (isUnitSpec(unit)) {\n        const tooltip = unit.encoding.tooltip;\n        expect(tooltip).toEqual([\n          {field: 'people', title: 'people', type: 'quantitative'},\n          {field: 'upper_people', title: 'people + people_error', type: 'quantitative'},\n          {field: 'lower_people', title: 'people + people_error2', type: 'quantitative'},\n          {field: 'age', type: 'ordinal'}\n        ]);\n      }\n    }\n  });\n\n  it(\n    'should produce a warning if error are aggregated but center and/or extent is specified',\n    log.wrap(localLogger => {\n      const extent = 'stdev';\n      const center = 'mean';\n\n      normalize(\n        {\n          data,\n          mark: {\n            type: 'errorbar',\n            extent,\n            center\n          },\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {field: 'people', type: 'quantitative'},\n            yError: {field: 'people_error', type: 'quantitative'}\n          }\n        },\n        defaultConfig\n      );\n\n      expect(localLogger.warns[0]).toEqual(log.message.errorBarCenterAndExtentAreNotNeeded(center, extent));\n    })\n  );\n\n  it('should produce an error if error are aggregated and have both xError and yError quantiative', () => {\n    expect(() => {\n      normalize(\n        {\n          data,\n          mark,\n          encoding: {\n            x: {field: 'age', type: 'quantitative'},\n            xError: {field: 'age', type: 'quantitative'},\n            y: {field: 'people', type: 'quantitative'},\n            yError: {field: 'people_errpr', type: 'quantitative'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it('should produce an error if error are aggregated for horizontal errorbar and xError2 exist without xError', () => {\n    expect(() => {\n      normalize(\n        {\n          data,\n          mark,\n          encoding: {\n            x: {field: 'age', type: 'quantitative'},\n            xError2: {field: 'age', type: 'quantitative'},\n            y: {field: 'people', type: 'quantitative'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it('should produce an error if error are aggregated for vertical errorbar and yError2 exist without yError', () => {\n    expect(() => {\n      normalize(\n        {\n          data,\n          mark,\n          encoding: {\n            x: {field: 'age', type: 'quantitative'},\n            yError2: {field: 'people_error2', type: 'quantitative'},\n            y: {field: 'people', type: 'quantitative'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it(\n    'should produce a warning if the second continuous axis has aggregate property',\n    log.wrap(localLogger => {\n      const aggregate = 'min';\n\n      normalize(\n        {\n          data,\n          mark,\n          encoding: {\n            x: {field: 'age', type: 'ordinal'},\n            y: {field: 'people', type: 'quantitative'},\n            yError: {field: 'people_error', type: 'quantitative', aggregate}\n          }\n        },\n        defaultConfig\n      );\n\n      expect(localLogger.warns[0]).toEqual(log.message.errorBarContinuousAxisHasCustomizedAggregate(aggregate, mark));\n    })\n  );\n\n  it('should produce an error if both error and upper-lower bound are aggregated', () => {\n    expect(() => {\n      normalize(\n        {\n          data,\n          mark,\n          encoding: {\n            x: {field: 'age', type: 'quantitative'},\n            xError: {field: 'people_error', type: 'ordinal'},\n            x2: {field: 'people_error2', type: 'quantitative'},\n            y: {field: 'people', type: 'quantitative'}\n          }\n        },\n        defaultConfig\n      );\n    }).toThrow();\n  });\n\n  it('should produce a correct tooltip title for errorbar with pre-aggregated error value', () => {\n    const outputSpec = normalize(\n      {\n        data,\n        mark,\n        encoding: {\n          x: {field: 'age', type: 'ordinal'},\n          y: {field: 'people', type: 'quantitative'},\n          yError: {field: 'people_error', type: 'quantitative'}\n        }\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    expect(layer).toBeTruthy();\n    for (const unitSpec of layer) {\n      const encoding = isUnitSpec(unitSpec) && unitSpec.encoding;\n      expect(encoding).toBeTruthy();\n      const tooltip = encoding.tooltip;\n      expect(tooltip).toEqual([\n        {field: 'people', title: 'people', type: 'quantitative'},\n        {field: 'upper_people', title: 'people + people_error', type: 'quantitative'},\n        {field: 'lower_people', title: 'people - people_error', type: 'quantitative'},\n        {field: 'age', type: 'ordinal'}\n      ]);\n    }\n  });\n\n  it('should produce a correct tooltip title for errorbar with pre-aggregated error value', () => {\n    const outputSpec = normalize(\n      {\n        data,\n        mark,\n        encoding: {\n          x: {field: 'age', type: 'ordinal'},\n          y: {field: 'people', type: 'quantitative'},\n          yError: {field: 'people_error', type: 'quantitative'},\n          yError2: {field: 'people_error2', type: 'quantitative'}\n        }\n      },\n      defaultConfig\n    );\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    expect(layer).toBeTruthy();\n    for (const unitSpec of layer) {\n      const encoding = isUnitSpec(unitSpec) && unitSpec.encoding;\n      expect(encoding).toBeTruthy();\n      const tooltip = encoding.tooltip;\n      expect(tooltip).toEqual([\n        {field: 'people', title: 'people', type: 'quantitative'},\n        {field: 'upper_people', title: 'people + people_error', type: 'quantitative'},\n        {field: 'lower_people', title: 'people + people_error2', type: 'quantitative'},\n        {field: 'age', type: 'ordinal'}\n      ]);\n    }\n  });\n});\n"]}