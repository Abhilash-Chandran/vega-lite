{"version":3,"file":"optimize.test.js","sourceRoot":"","sources":["../../../../test/compile/data/optimize.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,YAAY,EAAC,MAAM,oCAAoC,CAAC;AAChE,OAAO,EAAC,SAAS,EAAC,MAAM,uCAAuC,CAAC;AAChE,OAAO,EAAC,UAAU,EAAC,MAAM,oCAAoC,CAAC;AAE9D,QAAQ,CAAC,uBAAuB,EAAE;IAChC,QAAQ,CAAC,YAAY,EAAE;QACrB,EAAE,CAAC,yCAAyC,EAAE;YAC5C,IAAM,IAAI,GAAG,IAAI,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC5C,yDAAyD;YACzD,aAAa;YACb,IAAM,MAAM,GAAG,IAAI,SAAS,CAAC,IAAI,EAAE,EAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAC,CAAC,CAAC;YAC/D,aAAa;YACb,IAAM,MAAM,GAAG,IAAI,SAAS,CAAC,IAAI,EAAE,EAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,SAAS,EAAC,CAAC,CAAC;YAChE,UAAU,CAAC,IAAI,CAAC,CAAC;YACjB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,IAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAc,CAAC;YACtD,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,EAAE,EAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,SAAS,EAAC,CAAC,CAAC;QACpF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE;YAC5C,IAAM,IAAI,GAAG,IAAI,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC5C,aAAa;YACb,IAAM,MAAM,GAAG,IAAI,SAAS,CAAC,IAAI,EAAE,EAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAC,CAAC,CAAC;YAC/D,aAAa;YACb,IAAM,MAAM,GAAG,IAAI,SAAS,CAAC,IAAI,EAAE,EAAC,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,MAAM,EAAC,CAAC,CAAC;YAC9D,UAAU,CAAC,IAAI,CAAC,CAAC;YACjB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,IAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAc,CAAC;YACtD,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,EAAE,EAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAC,CAAC,CAAC;YAClE,IAAM,QAAQ,GAAG,eAAe,CAAC,QAAuB,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAC,CAAC,EAAE,QAAQ,EAAC,CAAC,CAAC;YACnD,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAC,CAAC,EAAE,SAAS,EAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {DataFlowNode} from '../../../src/compile/data/dataflow';\nimport {ParseNode} from '../../../src/compile/data/formatparse';\nimport {mergeParse} from '../../../src/compile/data/optimize';\n\ndescribe('compile/data/optimize', () => {\n  describe('mergeParse', () => {\n    it('should merge non-conflicting ParseNodes', () => {\n      const root = new DataFlowNode(null, 'root');\n      // ts-ignore is used to suppress the noUnusedLocals error\n      // @ts-ignore\n      const parse1 = new ParseNode(root, {a: 'number', b: 'string'});\n      // @ts-ignore\n      const parse2 = new ParseNode(root, {b: 'string', c: 'boolean'});\n      mergeParse(root);\n      assert.deepEqual(root.children.length, 1);\n      const mergedParseNode = root.children[0] as ParseNode;\n      assert.deepEqual(mergedParseNode.parse, {a: 'number', b: 'string', c: 'boolean'});\n    });\n\n    it('should not merge conflicting ParseNodes', () => {\n      const root = new DataFlowNode(null, 'root');\n      // @ts-ignore\n      const parse1 = new ParseNode(root, {a: 'number', b: 'string'});\n      // @ts-ignore\n      const parse2 = new ParseNode(root, {a: 'boolean', d: 'date'});\n      mergeParse(root);\n      assert.deepEqual(root.children.length, 1);\n      const mergedParseNode = root.children[0] as ParseNode;\n      assert.deepEqual(mergedParseNode.parse, {b: 'string', d: 'date'});\n      const children = mergedParseNode.children as [ParseNode];\n      assert.deepEqual(children[0].parse, {a: 'number'});\n      assert.deepEqual(children[1].parse, {a: 'boolean'});\n    });\n  });\n});\n"]}