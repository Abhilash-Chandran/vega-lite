{"version":3,"file":"optimizers.test.js","sourceRoot":"","sources":["../../../../test/compile/data/optimizers.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,YAAY,EAAC,MAAM,oCAAoC,CAAC;AAChE,OAAO,EAAC,UAAU,EAAC,MAAM,kCAAkC,CAAC;AAC5D,OAAO,EAAC,wBAAwB,EAAC,MAAM,sCAAsC,CAAC;AAG9E,QAAQ,CAAC,wBAAwB,EAAE;IACjC,EAAE,CAAC,yDAAyD,EAAE;QAC5D,IAAM,SAAS,GAAc;YAC3B,MAAM,EAAE,GAAG;YACX,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,OAAO;YACf,KAAK,EAAE,GAAG;SACX,CAAC;QACF,IAAM,IAAI,GAAG,IAAI,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC5C,IAAM,UAAU,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACnD,aAAa;QACb,IAAM,UAAU,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACnD,wBAAwB,CAAC,IAAI,CAAC,CAAC;QAC/B,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {DataFlowNode} from '../../../src/compile/data/dataflow';\nimport {ImputeNode} from '../../../src/compile/data/impute';\nimport {mergeIdenticalTransforms} from '../../../src/compile/data/optimizers';\nimport {Transform} from '../../../src/transform';\n\ndescribe('compile/data/optimizer', () => {\n  it('should merge two impute nodes with identical transforms', () => {\n    const transform: Transform = {\n      impute: 'y',\n      key: 'x',\n      method: 'value',\n      value: 200\n    };\n    const root = new DataFlowNode(null, 'root');\n    const transform1 = new ImputeNode(root, transform);\n    // @ts-ignore\n    const transform2 = new ImputeNode(root, transform);\n    mergeIdenticalTransforms(root);\n    assert.deepEqual(root.children.length, 1);\n    assert.deepEqual(root.children[0], transform1);\n  });\n});\n"]}