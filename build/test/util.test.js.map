{"version":3,"file":"util.test.js","sourceRoot":"","sources":["../../test/util.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {flatAccessWithDatum} from '../src/util';\n\nimport {\n  accessPathDepth,\n  accessPathWithDatum,\n  deleteNestedProperty,\n  hash,\n  replacePathInField,\n  stringify,\n  varName\n} from '../src/util';\n\ndescribe('util', () => {\n  describe('varName', () => {\n    it('replaces all non-alphanumeric characters with _', () => {\n      assert.equal(varName('bin-mpg$!@#%_+1'), 'bin_mpg_______1');\n    });\n\n    it('prepends _ if the string starts with number', () => {\n      assert.equal(varName('1a'), '_1a');\n    });\n  });\n\n  describe('stringify', () => {\n    it('stringifies numbers', () => {\n      assert.equal(stringify(12), '12');\n    });\n\n    it('stringifies booleans', () => {\n      assert.equal(stringify(true), 'true');\n    });\n\n    it('stringifies strings', () => {\n      assert.equal(stringify('foo'), '\"foo\"');\n    });\n\n    it('stringifies objects', () => {\n      assert.equal(stringify({foo: 42}), '{\"foo\":42}');\n    });\n  });\n\n  describe('hash', () => {\n    it('hashes numbers as numbers', () => {\n      assert.equal(hash(12), 12);\n    });\n\n    it('hashes booleans as strings so that they can be used as keys', () => {\n      assert.equal(hash(true), 'true');\n    });\n\n    it('hashes strings as strings', () => {\n      assert.equal(hash('foo'), 'foo');\n    });\n\n    it('hashes objects', () => {\n      assert.equal(hash({foo: 42}), '{\"foo\":42}');\n    });\n  });\n  describe('deleteNestedProperty', () => {\n    it('removes a property from an object', () => {\n      const originalObject = {\n        property1: {property1: 'value1'},\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      const newObject = {\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      deleteNestedProperty(originalObject, ['property1']);\n      assert.equal(stringify(originalObject), stringify(newObject));\n    });\n\n    it('removes nested properties', () => {\n      const originalObject = {\n        property1: {property4: 'value1'},\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      const newObject = {\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      deleteNestedProperty(originalObject, ['property1', 'property4']);\n      assert.equal(stringify(originalObject), stringify(newObject));\n    });\n\n    it('stops when it does not empty the last element', () => {\n      const originalObject = {\n        property1: {property4: 'value1'},\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3', property7: 'value4'}\n      };\n      const newObject = {\n        property1: {property4: 'value1'},\n        property2: {property5: 'value2'},\n        property3: {property6: 'value3'}\n      };\n      deleteNestedProperty(originalObject, ['property3', 'property7']);\n      assert.equal(stringify(originalObject), stringify(newObject));\n    });\n  });\n\n  describe('accessPathWithDatum', () => {\n    it('should parse foo', () => {\n      assert.equal(accessPathWithDatum('foo'), 'datum[\"foo\"]');\n    });\n\n    it('should parse foo.bar', () => {\n      assert.equal(accessPathWithDatum('foo.bar'), 'datum[\"foo\"] && datum[\"foo\"][\"bar\"]');\n    });\n\n    it('should support cusotom datum', () => {\n      assert.equal(accessPathWithDatum('foo', 'parent'), 'parent[\"foo\"]');\n    });\n  });\n\n  describe('flatAccessWithDatum', () => {\n    it('should parse foo.bar', () => {\n      assert.equal(flatAccessWithDatum('foo.bar'), 'datum[\"foo.bar\"]');\n    });\n\n    it('should return string value of field name', () => {\n      assert.equal(flatAccessWithDatum('foo[\"bar\"].baz'), 'datum[\"foo.bar.baz\"]');\n    });\n\n    it('should support cusotom datum', () => {\n      assert.equal(flatAccessWithDatum('foo', 'parent'), 'parent[\"foo\"]');\n    });\n  });\n\n  describe('accessPathDepth', () => {\n    it('should return 1 if the field is not nested', () => {\n      assert.equal(accessPathDepth('foo'), 1);\n    });\n\n    it('should return 1 if . is escaped', () => {\n      assert.equal(accessPathDepth('foo\\\\.bar'), 1);\n    });\n\n    it('should return 2 for foo.bar', () => {\n      assert.equal(accessPathDepth('foo.bar'), 2);\n    });\n  });\n\n  describe('removePathFromField', () => {\n    it('should convert nested accesses to \\\\.', () => {\n      assert.equal(replacePathInField('foo[\"bar\"].baz'), 'foo\\\\.bar\\\\.baz');\n    });\n\n    it('should keep \\\\.', () => {\n      assert.equal(replacePathInField('foo\\\\.bar'), 'foo\\\\.bar');\n    });\n  });\n});\n"]}