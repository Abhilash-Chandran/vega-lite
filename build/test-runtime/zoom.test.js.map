{"version":3,"file":"zoom.test.js","sourceRoot":"","sources":["../../test-runtime/zoom.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {Page} from 'puppeteer';\nimport {bound, brush, compositeTypes, embedFn, parentSelector, spec, testRenderFn, tuples, unbound} from './util';\n\ndeclare const page: Page;\n\nconst hits = {\n  zoom: [9, 23],\n  bins: [8, 2]\n};\n\ntype InOut = 'in' | 'out';\n\nfunction zoom(key: string, idx: number, direction: InOut, parent?: string, targetBrush?: boolean) {\n  const delta = direction === 'out' ? 200 : -200;\n  return `zoom(${hits[key][idx]}, ${delta}, ${parent}, ${targetBrush})`;\n}\n\nconst cmp = (a: number, b: number) => a - b;\n\nfor (const bind of [bound, unbound]) {\n  describe(`Zoom ${bind} interval selections at runtime`, async () => {\n    beforeAll(async () => {\n      await page.goto('http://0.0.0.0:8000/test-runtime/');\n    });\n\n    const type = 'interval';\n    const embed = embedFn(page);\n    const testRender = testRenderFn(page, `interval/zoom/${bind}`);\n    const binding = bind === bound ? {bind: 'scales'} : {};\n\n    const assertExtent = {\n      in: ['isAtLeast', 'isAtMost'],\n      out: ['isAtMost', 'isAtLeast']\n    };\n\n    async function setup(brushKey: string, idx: number, encodings: string[], parent?: string) {\n      const inOut: InOut = idx % 2 ? 'out' : 'in';\n      let xold: number[];\n      let yold: number[];\n\n      if (bind === unbound) {\n        const drag = (await page.evaluate(brush(brushKey, idx, parent)))[0];\n        xold = drag.values[0].sort(cmp);\n        yold = encodings.indexOf('y') >= 0 ? drag.values[encodings.indexOf('x') + 1].sort(cmp) : null;\n      } else {\n        xold = JSON.parse(await page.evaluate('JSON.stringify(view._runtime.scales.x.value.domain())'));\n        yold = await page.evaluate('view._runtime.scales.y.value.domain()');\n      }\n\n      return {inOut, xold, yold};\n    }\n\n    it('should zoom in and out', async () => {\n      for (let i = 0; i < hits.zoom.length; i++) {\n        await embed(spec('unit', i, {type, ...binding}));\n        const {inOut, xold, yold} = await setup('drag', i, ['x', 'y']);\n        await testRender(`${inOut}-0`);\n\n        const zoomed = (await page.evaluate(zoom('zoom', i, inOut, null, bind === unbound)))[0];\n        const xnew = zoomed.values[0].sort(cmp);\n        const ynew = zoomed.values[1].sort(cmp);\n        await testRender(`${inOut}-1`);\n        assert[assertExtent[inOut][0]](xnew[0], xold[0]);\n        assert[assertExtent[inOut][1]](xnew[1], xold[1]);\n        assert[assertExtent[inOut][0]](ynew[0], yold[0]);\n        assert[assertExtent[inOut][1]](ynew[1], yold[1]);\n      }\n    });\n\n    it('should work with binned domains', async () => {\n      for (let i = 0; i < hits.bins.length; i++) {\n        const encodings = ['y'];\n        await embed(\n          spec(\n            'unit',\n            1,\n            {type, ...binding, encodings},\n            {\n              x: {aggregate: 'count', type: 'quantitative'},\n              y: {bin: true},\n              color: {value: 'steelblue', field: null, type: null}\n            }\n          )\n        );\n\n        const {inOut, yold} = await setup('bins', i, encodings);\n        await testRender(`bins_${inOut}-0`);\n\n        const zoomed = (await page.evaluate(zoom('bins', i, inOut, null, bind === unbound)))[0];\n        const ynew = zoomed.values[0].sort(cmp);\n        assert[assertExtent[inOut][0]](ynew[0], yold[0]);\n        assert[assertExtent[inOut][1]](ynew[1], yold[1]);\n        await testRender(`bins_${inOut}-1`);\n      }\n    });\n\n    it('should work with temporal domains', async () => {\n      const values = tuples.map(d => ({...d, a: new Date(2017, d.a)}));\n      const encodings = ['x'];\n\n      for (let i = 0; i < hits.zoom.length; i++) {\n        await embed(spec('unit', i, {type, ...binding, encodings}, {values, x: {type: 'temporal'}}));\n        const {inOut, xold} = await setup('drag', i, encodings);\n        await testRender(`temporal_${inOut}-0`);\n\n        const zoomed = (await page.evaluate(zoom('zoom', i, inOut, null, bind === unbound)))[0];\n        const xnew = zoomed.values[0].sort(cmp);\n        assert[assertExtent[inOut][0]](+xnew[0], +new Date(xold[0]));\n        assert[assertExtent[inOut][1]](+xnew[1], +new Date(xold[1]));\n        await testRender(`temporal_${inOut}-1`);\n      }\n    });\n\n    it('should work with log/pow scales', async () => {\n      for (let i = 0; i < hits.zoom.length; i++) {\n        await embed(\n          spec(\n            'unit',\n            i,\n            {type, ...binding},\n            {\n              x: {scale: {type: 'pow', exponent: 1.5}},\n              y: {scale: {type: 'log'}}\n            }\n          )\n        );\n        const {inOut, xold, yold} = await setup('drag', i, ['x', 'y']);\n        await testRender(`logpow_${inOut}-0`);\n\n        const zoomed = (await page.evaluate(zoom('zoom', i, inOut, null, bind === unbound)))[0];\n        const xnew = zoomed.values[0].sort(cmp);\n        const ynew = zoomed.values[1].sort(cmp);\n        assert[assertExtent[inOut][0]](xnew[0], xold[0]);\n        assert[assertExtent[inOut][1]](xnew[1], xold[1]);\n        assert[assertExtent[inOut][0]](ynew[0], yold[0]);\n        assert[assertExtent[inOut][1]](ynew[1], yold[1]);\n        await testRender(`logpow_${inOut}-1`);\n      }\n    });\n\n    if (bind === unbound) {\n      it('should work with ordinal/nominal domains', async () => {\n        for (let i = 0; i < hits.zoom.length; i++) {\n          await embed(\n            spec(\n              'unit',\n              i,\n              {type, ...binding},\n              {\n                x: {type: 'ordinal'},\n                y: {type: 'nominal'}\n              }\n            )\n          );\n          const {inOut, xold, yold} = await setup('drag', i, ['x', 'y']);\n          await testRender(`ord_${inOut}-0`);\n\n          const zoomed = (await page.evaluate(zoom('zoom', i, inOut, null, bind === unbound)))[0];\n          const xnew = zoomed.values[0].sort(cmp);\n          const ynew = zoomed.values[1].sort(cmp);\n\n          if (inOut === 'in') {\n            expect(xnew.length).toBeLessThanOrEqual(xold.length);\n            expect(ynew.length).toBeLessThanOrEqual(yold.length);\n          } else {\n            expect(xnew.length).toBeGreaterThanOrEqual(xold.length);\n            expect(ynew.length).toBeGreaterThanOrEqual(yold.length);\n          }\n\n          await testRender(`ord_${inOut}-1`);\n        }\n      });\n    } else {\n      for (const specType of compositeTypes) {\n        it(`should work with shared scales in ${specType} views`, async () => {\n          for (let i = 0; i < hits.bins.length; i++) {\n            await embed(spec(specType, 0, {type, ...binding}, {resolve: {scale: {x: 'shared', y: 'shared'}}}));\n            const parent = parentSelector(specType, i);\n            const {inOut, xold, yold} = await setup(specType, i, ['x', 'y'], parent);\n            const zoomed = (await page.evaluate(zoom('bins', i, inOut, null, bind === unbound)))[0];\n            const xnew = zoomed.values[0].sort(cmp);\n            const ynew = zoomed.values[1].sort(cmp);\n            assert[assertExtent[inOut][0]](xnew[0], xold[0]);\n            assert[assertExtent[inOut][1]](xnew[1], xold[1]);\n            assert[assertExtent[inOut][0]](ynew[0], yold[0]);\n            assert[assertExtent[inOut][1]](ynew[1], yold[1]);\n            await testRender(`${specType}_${inOut}`);\n          }\n        });\n      }\n    }\n  });\n}\n"]}