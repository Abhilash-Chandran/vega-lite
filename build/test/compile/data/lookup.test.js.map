{"version":3,"file":"lookup.test.js","sourceRoot":"","sources":["../../../../test/compile/data/lookup.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {AncestorParse} from '../../../src/compile/data';\nimport {LookupNode} from '../../../src/compile/data/lookup';\nimport {parseTransformArray} from '../../../src/compile/data/parse';\nimport * as log from '../../../src/log';\nimport {VgLookupTransform} from '../../../src/vega.schema';\nimport {parseUnitModel} from '../../util';\nimport {DataFlowNode} from './../../../src/compile/data/dataflow';\n\ndescribe('compile/data/lookup', () => {\n  it('should parse lookup from array', () => {\n    const model = parseUnitModel({\n      data: {url: 'data/lookup_groups.csv'},\n      transform: [\n        {\n          lookup: 'person',\n          from: {\n            data: {url: 'data/lookup_people.csv'},\n            key: 'name',\n            fields: ['age', 'height']\n          }\n        }\n      ],\n      mark: 'bar',\n      encoding: {}\n    });\n\n    const t = parseTransformArray(null, model, new AncestorParse());\n    assert.deepEqual<VgLookupTransform>((t as LookupNode).assemble(), {\n      type: 'lookup',\n      from: 'lookup_0',\n      key: 'name',\n      fields: ['person'],\n      values: ['age', 'height']\n    });\n  });\n\n  it('should create node for flat lookup', () => {\n    const lookup = new LookupNode(\n      null,\n      {\n        lookup: 'person',\n        from: {\n          data: {url: 'data/lookup_people.csv'},\n          key: 'name',\n          fields: ['age', 'height']\n        }\n      },\n      'lookup_0'\n    );\n\n    assert.deepEqual<VgLookupTransform>(lookup.assemble(), {\n      type: 'lookup',\n      from: 'lookup_0',\n      key: 'name',\n      fields: ['person'],\n      values: ['age', 'height']\n    });\n  });\n\n  it('should create node for nested lookup', () => {\n    const lookup = new LookupNode(\n      null,\n      {\n        lookup: 'person',\n        from: {\n          data: {url: 'data/lookup_people.csv'},\n          key: 'name'\n        },\n        as: 'foo'\n      },\n      'lookup_0'\n    );\n\n    assert.deepEqual<VgLookupTransform>(lookup.assemble(), {\n      type: 'lookup',\n      from: 'lookup_0',\n      key: 'name',\n      fields: ['person'],\n      as: ['foo']\n    });\n  });\n\n  it(\n    'should warn if fields are not specified and as is missing',\n    log.wrap(localLogger => {\n      const lookup = new LookupNode(\n        null,\n        {\n          lookup: 'person',\n          from: {\n            data: {url: 'data/lookup_people.csv'},\n            key: 'name'\n          }\n        },\n        'lookup_0'\n      );\n      lookup.assemble();\n\n      assert.equal(localLogger.warns[0], log.message.NO_FIELDS_NEEDS_AS);\n    })\n  );\n  it('should generate the correct hash', () => {\n    const lookup = new LookupNode(\n      null,\n      {\n        lookup: 'person',\n        from: {\n          data: {url: 'data/lookup_people.csv'},\n          key: 'name'\n        }\n      },\n      'lookup_0'\n    );\n    lookup.assemble();\n\n    assert.equal(\n      lookup.hash(),\n      'Lookup {\"secondary\":\"lookup_0\",\"transform\":{\"from\":{\"data\":{\"url\":\"data/lookup_people.csv\"},\"key\":\"name\"},\"lookup\":\"person\"}}'\n    );\n  });\n\n  it('should never clone parent', () => {\n    const parent = new DataFlowNode(null);\n    const lookup = new LookupNode(\n      parent,\n      {\n        lookup: 'person',\n        from: {\n          data: {url: 'data/lookup_people.csv'},\n          key: 'name'\n        }\n      },\n      null\n    );\n    expect(lookup.clone().parent).toBeNull();\n  });\n});\n"]}