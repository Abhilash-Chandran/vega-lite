{"version":3,"file":"lookup.test.js","sourceRoot":"","sources":["../../../../test/compile/data/lookup.test.ts"],"names":[],"mappings":";;;AAAA,6BAA4B;AAC5B,kDAAwD;AACxD,2DAA4D;AAC5D,yDAAoE;AACpE,4DAAwC;AAExC,mCAA0C;AAE1C,QAAQ,CAAC,qBAAqB,EAAE;IAC9B,EAAE,CAAC,gCAAgC,EAAE;QACnC,IAAM,KAAK,GAAG,qBAAc,CAAC;YAC3B,MAAM,EAAE,EAAC,KAAK,EAAE,wBAAwB,EAAC;YACzC,WAAW,EAAE,CAAC;oBACZ,QAAQ,EAAE,QAAQ;oBAClB,MAAM,EAAE;wBACN,MAAM,EAAE,EAAC,KAAK,EAAE,wBAAwB,EAAC;wBACzC,KAAK,EAAE,MAAM;wBACb,QAAQ,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC;qBAC5B;iBACF,CAAC;YACF,MAAM,EAAE,KAAK;YACb,UAAU,EAAE,EAAE;SACf,CAAC,CAAC;QAEH,IAAM,CAAC,GAAG,2BAAmB,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,oBAAa,CAAC,CAAC;QAC9D,aAAM,CAAC,SAAS,CAAqB,CAAgB,CAAC,QAAQ,EAAE,EAAE;YAChE,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,UAAU;YAChB,GAAG,EAAE,MAAM;YACX,MAAM,EAAE,CAAC,QAAQ,CAAC;YAClB,MAAM,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC;SAC1B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE;QACvC,IAAM,MAAM,GAAG,IAAI,mBAAU,CAAC,IAAI,EAAE;YAChC,QAAQ,EAAE,QAAQ;YAClB,MAAM,EAAE;gBACN,MAAM,EAAE,EAAC,KAAK,EAAE,wBAAwB,EAAC;gBACzC,KAAK,EAAE,MAAM;gBACb,QAAQ,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC;aAC5B;SACF,EAAE,UAAU,CAAC,CAAC;QAEjB,aAAM,CAAC,SAAS,CAAoB,MAAM,CAAC,QAAQ,EAAE,EAAE;YACrD,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,UAAU;YAChB,GAAG,EAAE,MAAM;YACX,MAAM,EAAE,CAAC,QAAQ,CAAC;YAClB,MAAM,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC;SAC1B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE;QACzC,IAAM,MAAM,GAAG,IAAI,mBAAU,CAAC,IAAI,EAAE;YAChC,QAAQ,EAAE,QAAQ;YAClB,MAAM,EAAE;gBACN,MAAM,EAAE,EAAC,KAAK,EAAE,wBAAwB,EAAC;gBACzC,KAAK,EAAE,MAAM;aACd;YACD,IAAI,EAAE,KAAK;SACZ,EAAE,UAAU,CAAC,CAAC;QAEjB,aAAM,CAAC,SAAS,CAAoB,MAAM,CAAC,QAAQ,EAAE,EAAE;YACrD,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,UAAU;YAChB,GAAG,EAAE,MAAM;YACX,MAAM,EAAE,CAAC,QAAQ,CAAC;YAClB,EAAE,EAAE,CAAC,KAAK,CAAC;SACZ,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE,GAAG,CAAC,IAAI,CAAC,UAAC,WAAW;QACnF,IAAM,MAAM,GAAG,IAAI,mBAAU,CAAC,IAAI,EAAE;YAChC,QAAQ,EAAE,QAAQ;YAClB,MAAM,EAAE;gBACN,MAAM,EAAE,EAAC,KAAK,EAAE,wBAAwB,EAAC;gBACzC,KAAK,EAAE,MAAM;aACd;SACF,EAAE,UAAU,CAAC,CAAC;QACjB,MAAM,CAAC,QAAQ,EAAE,CAAC;QAElB,aAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC","sourcesContent":["import {assert} from 'chai';\nimport {AncestorParse} from '../../../src/compile/data';\nimport {LookupNode} from '../../../src/compile/data/lookup';\nimport {parseTransformArray} from '../../../src/compile/data/parse';\nimport * as log from '../../../src/log';\nimport {VgLookupTransform} from '../../../src/vega.schema';\nimport {parseUnitModel} from '../../util';\n\ndescribe('compile/data/lookup', function() {\n  it('should parse lookup from array', function () {\n    const model = parseUnitModel({\n      'data': {'url': 'data/lookup_groups.csv'},\n      'transform': [{\n        'lookup': 'person',\n        'from': {\n          'data': {'url': 'data/lookup_people.csv'},\n          'key': 'name',\n          'fields': ['age', 'height']\n        }\n      }],\n      'mark': 'bar',\n      'encoding': {}\n    });\n\n    const t = parseTransformArray(null, model, new AncestorParse);\n    assert.deepEqual<VgLookupTransform>((t as LookupNode).assemble(), {\n      type: 'lookup',\n      from: 'lookup_0',\n      key: 'name',\n      fields: ['person'],\n      values: ['age', 'height']\n    });\n  });\n\n  it('should create node for flat lookup', function () {\n    const lookup = new LookupNode(null, {\n        'lookup': 'person',\n        'from': {\n          'data': {'url': 'data/lookup_people.csv'},\n          'key': 'name',\n          'fields': ['age', 'height']\n        }\n      }, 'lookup_0');\n\n    assert.deepEqual<VgLookupTransform>(lookup.assemble(), {\n      type: 'lookup',\n      from: 'lookup_0',\n      key: 'name',\n      fields: ['person'],\n      values: ['age', 'height']\n    });\n  });\n\n  it('should create node for nested lookup', function () {\n    const lookup = new LookupNode(null, {\n        'lookup': 'person',\n        'from': {\n          'data': {'url': 'data/lookup_people.csv'},\n          'key': 'name'\n        },\n        'as': 'foo'\n      }, 'lookup_0');\n\n    assert.deepEqual<VgLookupTransform>(lookup.assemble(), {\n      type: 'lookup',\n      from: 'lookup_0',\n      key: 'name',\n      fields: ['person'],\n      as: ['foo']\n    });\n  });\n\n  it('should warn if fields are not specified and as is missing', log.wrap((localLogger) => {\n    const lookup = new LookupNode(null, {\n        'lookup': 'person',\n        'from': {\n          'data': {'url': 'data/lookup_people.csv'},\n          'key': 'name'\n        }\n      }, 'lookup_0');\n    lookup.assemble();\n\n    assert.equal(localLogger.warns[0], log.message.NO_FIELDS_NEEDS_AS);\n  }));\n});\n"]}