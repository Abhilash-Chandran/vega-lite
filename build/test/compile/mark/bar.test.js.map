{"version":3,"file":"bar.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/bar.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\n\nimport {assert} from 'chai';\nimport {bar} from '../../../src/compile/mark/bar';\nimport * as log from '../../../src/log';\nimport {defaultBarConfig} from '../../../src/mark';\nimport {defaultScaleConfig} from '../../../src/scale';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('Mark: Bar', () => {\n  describe('simple vertical', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'Origin', type: 'nominal'},\n        y: {type: 'quantitative', field: 'Acceleration', aggregate: 'mean'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar, with y from zero to field value and with band value for x/width ', () => {\n      assert.deepEqual(props.x, {scale: 'x', field: 'Origin'});\n      assert.deepEqual(props.width, {scale: 'x', band: true});\n      assert.deepEqual(props.y, {scale: 'y', field: 'mean_Acceleration'});\n      assert.deepEqual(props.y2, {scale: 'y', value: 0});\n      assert.isUndefined(props.height);\n    });\n  });\n\n  it('should draw vertical bar, with y from zero to field value and bar with quantitative x, x2, and y', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'bin_start', type: 'quantitative'},\n        x2: {field: 'bin_end', type: 'quantitative'},\n        y: {type: 'quantitative', field: 'Acceleration'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n    assert.deepEqual(props.x, {scale: 'x', field: 'bin_start'});\n    assert.deepEqual(props.x2, {scale: 'x', field: 'bin_end'});\n    assert.deepEqual(props.y, {scale: 'y', field: 'Acceleration'});\n    assert.deepEqual(props.y2, {scale: 'y', value: 0});\n    assert.isUndefined(props.height);\n  });\n\n  it('should draw vertical bar, with y from zero to field value and with band value for x/width when domain that includes zero is specified', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'Origin', type: 'nominal'},\n        y: {type: 'quantitative', field: 'Acceleration', aggregate: 'mean', scale: {domain: [-1, 1]}}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    assert.deepEqual(props.x, {scale: 'x', field: 'Origin'});\n    assert.deepEqual(props.width, {scale: 'x', band: true});\n    assert.deepEqual(props.y, {scale: 'y', field: 'mean_Acceleration'});\n    assert.deepEqual(props.y2, {scale: 'y', value: 0});\n    assert.isUndefined(props.height);\n  });\n\n  it(\n    'should draw vertical bar, with y from \"group: height\" to field value when domain that excludes zero is specified',\n    log.wrap(logger => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/cars.json'},\n        mark: 'bar',\n        encoding: {\n          x: {field: 'Origin', type: 'nominal'},\n          y: {type: 'quantitative', field: 'Acceleration', aggregate: 'mean', scale: {domain: [1, 2]}}\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      assert.deepEqual(props.y, {scale: 'y', field: 'mean_Acceleration'});\n      assert.deepEqual(props.y2, {field: {group: 'height'}});\n      assert.isUndefined(props.height);\n\n      assert.equal(logger.warns[0], log.message.nonZeroScaleUsedWithLengthMark('bar', 'y', {zeroFalse: false}));\n    })\n  );\n\n  it(\n    'should draw vertical bar, with y from \"group: height\" to field value when zero=false for y-scale',\n    log.wrap(logger => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/cars.json'},\n        mark: 'bar',\n        encoding: {\n          x: {field: 'Origin', type: 'nominal'},\n          y: {type: 'quantitative', field: 'Acceleration', aggregate: 'mean', scale: {zero: false}}\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      assert.deepEqual(props.y, {scale: 'y', field: 'mean_Acceleration'});\n      assert.deepEqual(props.y2, {field: {group: 'height'}});\n      assert.isUndefined(props.height);\n\n      assert.equal(logger.warns[0], log.message.nonZeroScaleUsedWithLengthMark('bar', 'y', {zeroFalse: true}));\n    })\n  );\n\n  it(\n    'should draw vertical bar, with y from \"group: height\" to field value when y-scale type is log',\n    log.wrap(logger => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/cars.json'},\n        mark: 'bar',\n        encoding: {\n          x: {field: 'Origin', type: 'nominal'},\n          y: {type: 'quantitative', field: 'Acceleration', aggregate: 'mean', scale: {type: 'log'}}\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      assert.deepEqual(props.y, {scale: 'y', field: 'mean_Acceleration'});\n      assert.deepEqual(props.y2, {field: {group: 'height'}});\n      assert.isUndefined(props.height);\n\n      assert.equal(logger.warns[0], log.message.nonZeroScaleUsedWithLengthMark('bar', 'y', {scaleType: 'log'}));\n    })\n  );\n\n  describe('simple horizontal', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar from zero to field value and with band value for x/width', () => {\n      assert.deepEqual(props.y, {scale: 'y', field: 'Origin'});\n      assert.deepEqual(props.height, {scale: 'y', band: true});\n      assert.deepEqual(props.x, {scale: 'x', field: 'mean_Acceleration'});\n      assert.deepEqual(props.x2, {scale: 'x', value: 0});\n      assert.isUndefined(props.width);\n    });\n  });\n\n  it('should draw horizontal bar, with y from zero to field value and bar with quantitative x, x2, and y', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'bin_start', type: 'quantitative'},\n        y2: {field: 'bin_end', type: 'quantitative'},\n        x: {type: 'quantitative', field: 'Acceleration'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n    assert.deepEqual(props.y, {scale: 'y', field: 'bin_start'});\n    assert.deepEqual(props.y2, {scale: 'y', field: 'bin_end'});\n    assert.deepEqual(props.x, {scale: 'x', field: 'Acceleration'});\n    assert.deepEqual(props.x2, {scale: 'x', value: 0});\n    assert.isUndefined(props.height);\n  });\n\n  describe('simple horizontal with point scale', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal', scale: {type: 'point'}},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar from zero to field value and y with center position and height = rangeStep - 1', () => {\n      assert.deepEqual(props.yc, {scale: 'y', field: 'Origin'});\n      assert.deepEqual(props.height, {value: defaultScaleConfig.rangeStep - 1});\n      assert.deepEqual(props.x, {scale: 'x', field: 'mean_Acceleration'});\n      assert.deepEqual(props.x2, {scale: 'x', value: 0});\n      assert.isUndefined(props.width);\n    });\n  });\n\n  describe('simple horizontal with size value', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'},\n        size: {value: 5}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should set height to 5 and center y', () => {\n      assert.deepEqual(props.height, {value: 5});\n      assert.deepEqual(props.yc, {scale: 'y', field: 'Origin', band: 0.5});\n    });\n  });\n\n  describe('simple horizontal with size value in mark def', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: {type: 'bar', size: 5},\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should set height to 5 and center y', () => {\n      assert.deepEqual(props.height, {value: 5});\n      assert.deepEqual(props.yc, {scale: 'y', field: 'Origin', band: 0.5});\n    });\n  });\n\n  describe('simple horizontal with size field', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'},\n        size: {aggregate: 'mean', field: 'Horsepower', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar from zero to field value and with band value for x/width', () => {\n      assert.deepEqual(props.yc, {scale: 'y', field: 'Origin', band: 0.5});\n      assert.deepEqual(props.height, {scale: 'size', field: 'mean_Horsepower'});\n      assert.deepEqual(props.x, {scale: 'x', field: 'mean_Acceleration'});\n      assert.deepEqual(props.x2, {scale: 'x', value: 0});\n      assert.isUndefined(props.width);\n    });\n  });\n\n  describe('horizontal binned', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {bin: true, field: 'Horsepower', type: 'quantitative'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with y and y2', () => {\n      assert.deepEqual(props.y2, {scale: 'y', field: 'bin_maxbins_10_Horsepower'});\n      assert.deepEqual(props.y, {\n        scale: 'y',\n        field: 'bin_maxbins_10_Horsepower_end',\n        offset: defaultBarConfig.binSpacing\n      });\n      assert.isUndefined(props.height);\n    });\n  });\n\n  describe('horizontal binned, sort descending', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {bin: true, field: 'Horsepower', type: 'quantitative', sort: 'descending'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with y and y2', () => {\n      assert.deepEqual(props.y2, {scale: 'y', field: 'bin_maxbins_10_Horsepower', offset: defaultBarConfig.binSpacing});\n      assert.deepEqual(props.y, {scale: 'y', field: 'bin_maxbins_10_Horsepower_end'});\n      assert.isUndefined(props.height);\n    });\n  });\n\n  describe('horizontal binned, reverse', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {bin: true, field: 'Horsepower', type: 'quantitative', scale: {reverse: true}},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with y and y2', () => {\n      assert.deepEqual(props.y2, {scale: 'y', field: 'bin_maxbins_10_Horsepower', offset: defaultBarConfig.binSpacing});\n      assert.deepEqual(props.y, {scale: 'y', field: 'bin_maxbins_10_Horsepower_end'});\n      assert.isUndefined(props.height);\n    });\n  });\n\n  describe('vertical binned', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {bin: true, field: 'Horsepower', type: 'quantitative'},\n        y: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with x and x2', () => {\n      assert.deepEqual(props.x2, {scale: 'x', field: 'bin_maxbins_10_Horsepower', offset: defaultBarConfig.binSpacing});\n      assert.deepEqual(props.x, {scale: 'x', field: 'bin_maxbins_10_Horsepower_end'});\n      assert.isUndefined(props.width);\n    });\n  });\n\n  describe('vertical binned, sort descending', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {bin: true, field: 'Horsepower', type: 'quantitative', sort: 'descending'},\n        y: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with x and x2', () => {\n      assert.deepEqual(props.x2, {scale: 'x', field: 'bin_maxbins_10_Horsepower'});\n      assert.deepEqual(props.x, {\n        scale: 'x',\n        field: 'bin_maxbins_10_Horsepower_end',\n        offset: defaultBarConfig.binSpacing\n      });\n      assert.isUndefined(props.width);\n    });\n  });\n\n  describe('horizontal binned with ordinal', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {bin: true, field: 'Horsepower', type: 'ordinal'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with y', () => {\n      assert.deepEqual(props.y, {scale: 'y', field: 'bin_maxbins_10_Horsepower_range'});\n      assert.deepEqual(props.height, {scale: 'y', band: true});\n    });\n  });\n\n  describe('vertical binned with ordinal', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {bin: true, field: 'Horsepower', type: 'ordinal'},\n        y: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with y', () => {\n      assert.deepEqual(props.x, {scale: 'x', field: 'bin_maxbins_10_Horsepower_range'});\n      assert.deepEqual(props.width, {scale: 'x', band: true});\n    });\n  });\n\n  describe('horizontal binned with no spacing', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {bin: true, field: 'Horsepower', type: 'quantitative'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      },\n      config: {bar: {binSpacing: 0}}\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with y and y2', () => {\n      assert.deepEqual(props.y2, {scale: 'y', field: 'bin_maxbins_10_Horsepower'});\n      assert.deepEqual(props.y, {scale: 'y', field: 'bin_maxbins_10_Horsepower_end'});\n      assert.isUndefined(props.height);\n    });\n  });\n\n  describe('vertical binned with no spacing', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {bin: true, field: 'Horsepower', type: 'quantitative'},\n        y: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      },\n      config: {bar: {binSpacing: 0}}\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with x and x2', () => {\n      assert.deepEqual(props.x2, {scale: 'x', field: 'bin_maxbins_10_Horsepower'});\n      assert.deepEqual(props.x, {scale: 'x', field: 'bin_maxbins_10_Horsepower_end'});\n      assert.isUndefined(props.width);\n    });\n  });\n\n  describe('simple horizontal binned with size', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {bin: true, field: 'Horsepower', type: 'quantitative'},\n        x: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'},\n        size: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with y centered on bin_mid and height = size field', () => {\n      assert.deepEqual(props.yc, {\n        signal: 'scale(\"y\", (datum[\"bin_maxbins_10_Horsepower\"] + datum[\"bin_maxbins_10_Horsepower_end\"]) / 2)'\n      });\n      assert.deepEqual(props.height, {scale: 'size', field: 'mean_Acceleration'});\n    });\n  });\n\n  describe('vertical binned with size', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {bin: true, field: 'Horsepower', type: 'quantitative'},\n        y: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'},\n        size: {aggregate: 'mean', field: 'Acceleration', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should draw bar with x centered on bin_mid and width = size field', () => {\n      assert.deepEqual(props.xc, {\n        signal: 'scale(\"x\", (datum[\"bin_maxbins_10_Horsepower\"] + datum[\"bin_maxbins_10_Horsepower_end\"]) / 2)'\n      });\n      assert.deepEqual(props.width, {scale: 'size', field: 'mean_Acceleration'});\n    });\n  });\n\n  describe('vertical, with log', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'Origin', type: 'nominal'},\n        y: {scale: {type: 'log'}, type: 'quantitative', field: 'Acceleration', aggregate: 'mean'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should end on axis and has no height', () => {\n      assert.deepEqual(props.y2, {field: {group: 'height'}});\n      assert.isUndefined(props.height);\n    });\n  });\n\n  describe('horizontal, with log', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {scale: {type: 'log'}, type: 'quantitative', field: 'Acceleration', aggregate: 'mean'}\n      }\n    });\n\n    const props = bar.encodeEntry(model);\n\n    it('should end on axis and has no width', () => {\n      assert.deepEqual(props.x2, {value: 0});\n      assert.isUndefined(props.width);\n    });\n  });\n\n  describe('vertical, with fit mode', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      width: 120,\n      height: 120,\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'Origin', type: 'nominal'},\n        y: {aggregate: 'mean', field: 'Horsepower', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should use x and with band true', () => {\n      assert.deepEqual(props.x, {\n        scale: 'x',\n        field: 'Origin'\n      });\n      assert.deepEqual(props.width, {\n        scale: 'x',\n        band: true\n      });\n    });\n  });\n\n  describe('horizontal, with fit mode', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      width: 120,\n      height: 120,\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {aggregate: 'mean', field: 'Horsepower', type: 'quantitative'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should use y with band true', () => {\n      assert.deepEqual(props.y, {\n        scale: 'y',\n        field: 'Origin'\n      });\n      assert.deepEqual(props.height, {\n        scale: 'y',\n        band: true\n      });\n    });\n  });\n\n  describe('vertical with zero=false', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'Origin', type: 'nominal'},\n        y: {scale: {zero: false}, type: 'quantitative', field: 'Acceleration', aggregate: 'mean'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should end on axis nad have no height', () => {\n      assert.deepEqual(props.y2, {field: {group: 'height'}});\n      assert.isUndefined(props.height);\n    });\n  });\n\n  describe('horizontal with zero=false', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        y: {field: 'Origin', type: 'nominal'},\n        x: {scale: {zero: false}, type: 'quantitative', field: 'Acceleration', aggregate: 'mean'}\n      }\n    });\n\n    const props = bar.encodeEntry(model);\n    it('should end on axis and have no width', () => {\n      assert.deepEqual(props.x2, {value: 0});\n      assert.isUndefined(props.width);\n    });\n  });\n\n  describe('1D vertical', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'bar',\n      encoding: {y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'}},\n      data: {url: 'data/movies.json'}\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should have y end on axis, have no-height and have x-offset', () => {\n      assert.deepEqual(props.y, {scale: 'y', field: 'sum_US_Gross'});\n      assert.deepEqual(props.y2, {scale: 'y', value: 0});\n      assert.isUndefined(props.height);\n      assert.deepEqual(props.xc, {\n        mult: 0.5,\n        signal: 'width'\n      });\n    });\n  });\n\n  describe('1D vertical with size value', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'bar',\n      encoding: {\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'},\n        size: {value: 5}\n      },\n      data: {url: 'data/movies.json'}\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should have width = 5', () => {\n      assert.deepEqual(props.width, {value: 5});\n    });\n  });\n\n  describe('1D vertical with config.mark.size', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'bar',\n      encoding: {\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'}\n      },\n      data: {url: 'data/movies.json'},\n      config: {\n        mark: {size: 5}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should not use config.mark.size', () => {\n      assert.deepEqual(props.width, {value: 20});\n    });\n  });\n\n  describe('1D vertical with config.bar.discreteBandSize', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/movies.json'},\n      mark: 'bar',\n      encoding: {\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'}\n      },\n      config: {\n        bar: {discreteBandSize: 5}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should have width = 5', () => {\n      assert.deepEqual(props.width, {value: 5});\n    });\n  });\n\n  describe('2D vertical with point scale and config.bar.discreteBandSize', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/movies.json'},\n      mark: 'bar',\n      encoding: {\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'},\n        x: {type: 'nominal', field: 'Major_Genre', scale: {type: 'point'}}\n      },\n      config: {\n        bar: {discreteBandSize: 5}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should have width = 5', () => {\n      assert.deepEqual(props.width, {value: 5});\n    });\n  });\n\n  describe('2D vertical with config.bar.discreteBandSize', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/movies.json'},\n      mark: 'bar',\n      encoding: {\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'},\n        x: {type: 'nominal', field: 'Major_Genre'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should have width = 5', () => {\n      expect(props.width).toEqual({scale: 'x', band: true});\n    });\n  });\n\n  describe('1D vertical with config.bar.size', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/movies.json'},\n      mark: 'bar',\n      encoding: {\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'}\n      },\n      config: {\n        bar: {size: 5}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should have width = 5', () => {\n      assert.deepEqual(props.width, {value: 5});\n    });\n  });\n\n  describe('1D vertical with config.style.bar.size', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/movies.json'},\n      mark: 'bar',\n      encoding: {\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'}\n      },\n      config: {\n        style: {bar: {size: 5}}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should have width = 5', () => {\n      assert.deepEqual(props.width, {value: 5});\n    });\n  });\n\n  describe('1D horizontal', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'bar',\n      encoding: {x: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'}},\n      data: {url: 'data/movies.json'}\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should end on axis, have no width, and have y-offset', () => {\n      assert.deepEqual(props.x, {scale: 'x', field: 'sum_US_Gross'});\n      assert.deepEqual(props.x2, {scale: 'x', value: 0});\n      assert.isUndefined(props.width);\n      assert.deepEqual(props.yc, {\n        mult: 0.5,\n        signal: 'height'\n      });\n    });\n  });\n\n  describe('QxQ horizontal', () => {\n    // This is generally a terrible idea, but we should still test\n    // if the output show expected results\n\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'Acceleration', type: 'quantitative'},\n        y: {field: 'Horsepower', type: 'quantitative'}\n      },\n      config: {\n        mark: {orient: 'horizontal'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should produce horizontal bar using x, x2', () => {\n      assert.deepEqual(props.x, {scale: 'x', field: 'Acceleration'});\n      assert.deepEqual(props.x2, {scale: 'x', value: 0});\n      assert.deepEqual(props.yc, {scale: 'y', field: 'Horsepower'});\n      assert.deepEqual(props.height, {value: defaultBarConfig.continuousBandSize});\n    });\n  });\n\n  describe('QxQ vertical', () => {\n    // This is generally a terrible idea, but we should still test\n    // if the output show expected results\n\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      data: {url: 'data/cars.json'},\n      mark: 'bar',\n      encoding: {\n        x: {field: 'Acceleration', type: 'quantitative'},\n        y: {field: 'Horsepower', type: 'quantitative'}\n      },\n      config: {\n        mark: {orient: 'vertical'}\n      }\n    });\n    const props = bar.encodeEntry(model);\n\n    it('should produce horizontal bar using x, x2', () => {\n      assert.deepEqual(props.xc, {scale: 'x', field: 'Acceleration'});\n      assert.deepEqual(props.width, {value: defaultBarConfig.continuousBandSize});\n      assert.deepEqual(props.y, {scale: 'y', field: 'Horsepower'});\n      assert.deepEqual(props.y2, {scale: 'y', value: 0});\n    });\n  });\n\n  describe('OxN', () => {\n    // This is generally a terrible idea, but we should still test\n    // if the output show expected results\n    it('should produce vertical bar using x, width', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/cars.json'},\n        mark: 'bar',\n        encoding: {\n          x: {field: 'Origin', type: 'nominal'},\n          y: {field: 'Cylinders', type: 'ordinal'}\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      assert.deepEqual(props.x, {scale: 'x', field: 'Origin'});\n      assert.deepEqual(props.width, {scale: 'x', band: true});\n      assert.deepEqual(props.y, {scale: 'y', field: 'Cylinders'});\n      assert.deepEqual(props.height, {scale: 'y', band: true});\n    });\n  });\n\n  describe('ranged bar', () => {\n    // TODO: gantt chart with temporal\n\n    // TODO: gantt chart with ordinal\n\n    it('vertical bars should work with aggregate', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/population.json'},\n        mark: 'bar',\n        encoding: {\n          x: {field: 'age', type: 'ordinal'},\n          y: {field: 'people', aggregate: 'q1', type: 'quantitative'},\n          y2: {field: 'people', aggregate: 'q3', type: 'quantitative'}\n        }\n      });\n\n      const props = bar.encodeEntry(model);\n      assert.deepEqual(props.x, {scale: 'x', field: 'age'});\n      assert.deepEqual(props.y, {scale: 'y', field: 'q1_people'});\n      assert.deepEqual(props.y2, {scale: 'y', field: 'q3_people'});\n    });\n\n    it('horizontal bars should work with aggregate', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/population.json'},\n        mark: 'bar',\n        encoding: {\n          y: {field: 'age', type: 'ordinal'},\n          x: {field: 'people', aggregate: 'q1', type: 'quantitative'},\n          x2: {field: 'people', aggregate: 'q3', type: 'quantitative'}\n        }\n      });\n\n      const props = bar.encodeEntry(model);\n      assert.deepEqual(props.y, {scale: 'y', field: 'age'});\n      assert.deepEqual(props.x, {scale: 'x', field: 'q1_people'});\n      assert.deepEqual(props.x2, {scale: 'x', field: 'q3_people'});\n    });\n  });\n\n  describe('vertical binned data', () => {\n    describe('default offset', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'bar',\n        encoding: {\n          x: {\n            field: 'bin_start',\n            bin: 'binned',\n            type: 'quantitative',\n            axis: {\n              tickStep: 2\n            }\n          },\n          x2: {\n            field: 'bin_end',\n            type: 'quantitative'\n          },\n          y: {\n            field: 'count',\n            type: 'quantitative'\n          }\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      it('should draw bar with x and x2', () => {\n        assert.deepEqual(props.x2, {scale: 'x', field: 'bin_start', offset: 1});\n        assert.deepEqual(props.x, {scale: 'x', field: 'bin_end', offset: 0});\n        assert.deepEqual(props.y, {scale: 'y', field: 'count'});\n        assert.deepEqual(props.y2, {scale: 'y', value: 0});\n        assert.isUndefined(props.width);\n      });\n    });\n\n    describe('custom offset', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: {type: 'bar', binSpacing: 10},\n        encoding: {\n          x: {\n            field: 'bin_start',\n            bin: 'binned',\n            type: 'quantitative',\n            axis: {\n              tickStep: 2\n            }\n          },\n          x2: {\n            field: 'bin_end',\n            type: 'quantitative'\n          },\n          y: {\n            field: 'count',\n            type: 'quantitative'\n          }\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      it('should draw bar with x and x2', () => {\n        assert.deepEqual(props.x2, {scale: 'x', field: 'bin_start', offset: 10});\n        assert.deepEqual(props.x, {scale: 'x', field: 'bin_end', offset: 0});\n        assert.deepEqual(props.y, {scale: 'y', field: 'count'});\n        assert.deepEqual(props.y2, {scale: 'y', value: 0});\n        assert.isUndefined(props.width);\n      });\n    });\n  });\n\n  describe('horizontal binned data', () => {\n    describe('default offset', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'bar',\n        encoding: {\n          y: {\n            field: 'bin_start',\n            bin: 'binned',\n            type: 'quantitative',\n            axis: {\n              tickStep: 2\n            }\n          },\n          y2: {\n            field: 'bin_end',\n            type: 'quantitative'\n          },\n          x: {\n            field: 'count',\n            type: 'quantitative'\n          }\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      it('should draw bar with y and y2', () => {\n        assert.deepEqual(props.y2, {scale: 'y', field: 'bin_start', offset: 0});\n        assert.deepEqual(props.y, {scale: 'y', field: 'bin_end', offset: 1});\n        assert.deepEqual(props.x, {scale: 'x', field: 'count'});\n        assert.deepEqual(props.x2, {scale: 'x', value: 0});\n        assert.isUndefined(props.width);\n      });\n    });\n\n    describe('custom offset', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: {type: 'bar', binSpacing: 10},\n        encoding: {\n          y: {\n            field: 'bin_start',\n            bin: 'binned',\n            type: 'quantitative',\n            axis: {\n              tickStep: 2\n            }\n          },\n          y2: {\n            field: 'bin_end',\n            type: 'quantitative'\n          },\n          x: {\n            field: 'count',\n            type: 'quantitative'\n          }\n        }\n      });\n      const props = bar.encodeEntry(model);\n\n      it('should draw bar with y and y2', () => {\n        assert.deepEqual(props.y2, {scale: 'y', field: 'bin_start', offset: 0});\n        assert.deepEqual(props.y, {scale: 'y', field: 'bin_end', offset: 10});\n        assert.deepEqual(props.x, {scale: 'x', field: 'count'});\n        assert.deepEqual(props.x2, {scale: 'x', value: 0});\n        assert.isUndefined(props.width);\n      });\n    });\n  });\n});\n"]}