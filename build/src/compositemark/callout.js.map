{"version":3,"file":"callout.js","sourceRoot":"","sources":["../../../src/compositemark/callout.ts"],"names":[],"mappings":";AAEA,OAAO,KAAK,GAAG,MAAM,QAAQ,CAAC;AAC9B,OAAO,EAAC,SAAS,EAAa,MAAM,SAAS,CAAC;AAE9C,OAAO,EAAO,IAAI,EAAC,MAAM,SAAS,CAAC;AACnC,OAAO,EAA0B,eAAe,EAAC,MAAM,UAAU,CAAC;AAGlE,MAAM,CAAC,IAAM,OAAO,GAAc,SAAS,CAAC;AAK5C,IAAM,kBAAkB,GAAsB;IAC5C,IAAI,EAAE,CAAC;IACP,KAAK,EAAE,CAAC;CACT,CAAC;AAEF,MAAM,CAAC,IAAM,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC;AAkCtD,MAAM,CAAC,IAAM,sBAAsB,GAAkB;IACnD,KAAK,EAAE,CAAC,EAAE;IACV,UAAU,EAAE,CAAC;IACb,UAAU,EAAE,EAAE;IACd,WAAW,EAAE,CAAC;IACd,KAAK,EAAE;QACL,KAAK,EAAE,MAAM;QACb,QAAQ,EAAE,QAAQ;KACnB;IACD,IAAI,EAAE,EAAE;CACT,CAAC;AAIF,MAAM,uBAAuB,OAAyB;IACpD,OAAO,OAAO,CAAC,IAAI,KAAK,SAAS,CAAC;AACpC,CAAC;AASD,MAAM,2BAA2B,IAA6D,EAAE,MAAc;IAC5G,sFAAsF;IAC/E,IAAA,gBAAI,EAAE,qBAAe,EAAE,oBAAc,EAAE,wBAAQ,EAAE,iFAAY,CAAS;IAC7E,IAAM,OAAO,wBACR,MAAM,CAAC,OAAO,EACd,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,IAAI,EAAE,IAAI,EAAC,CACzC,CAAC;IAEK,IAAA,qBAAK,EAAE,+BAAU,EAAE,+BAAU,EAAE,iCAAW,CAAY;IAE7D,IAAM,kBAAkB,GAAG,+BAA+B,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;IAC9E,IAAM,kBAAkB,GAAG,+BAA+B,CAAC,KAAK,EAAE,UAAU,GAAG,UAAU,CAAC,CAAC;IAC3F,IAAM,oBAAoB,GAAG,+BAA+B,CAAC,KAAK,EAAE,UAAU,GAAG,UAAU,GAAG,WAAW,CAAC,CAAC;IAEpG,IAAA,oBAAI,EAAE,oBAAI,EAAE,uEAA6B,CAAa;IAC7D,IAAI,CAAC,IAAI,EAAE;QACT,GAAG,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;KACpD;IAED,4BACK,SAAS,IACZ,KAAK,EACA,eAAe,CAChB,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,OAAO,EAC/B;YACE,IAAI,EAAE;gBACJ,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,kBAAkB,CAAC,CAAC;gBAC7B,OAAO,EAAE,kBAAkB,CAAC,CAAC;gBAC7B,QAAQ,EAAE,kBAAkB,CAAC,CAAC;gBAC9B,QAAQ,EAAE,kBAAkB,CAAC,CAAC;aAC/B;YACD,QAAQ,qBACN,EAAE,EAAE,QAAQ,CAAC,CAAC,EACd,EAAE,EAAE,QAAQ,CAAC,CAAC,IACX,0BAA0B,CAC9B;SACF,CACF,QACE,eAAe,CAChB,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAChC;YACE,IAAI,EAAE;gBACJ,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,oBAAoB,CAAC,CAAC;gBAC/B,OAAO,EAAE,oBAAoB,CAAC,CAAC;aAChC;YACD,QAAQ,UAAA;SACT,CACF,KAEH;AACJ,CAAC;AAED,yCAAyC,KAAa,EAAE,MAAc;IACpE,IAAM,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;IACrC,OAAO,EAAC,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAC,CAAC;AACtE,CAAC","sourcesContent":["import {Config} from '../config';\nimport {Encoding} from '../encoding';\nimport * as log from '../log';\nimport {isMarkDef, MarkConfig} from '../mark';\nimport {GenericUnitSpec, NormalizedLayerSpec} from '../spec';\nimport {Flag, keys} from '../util';\nimport {GenericCompositeMarkDef, partLayerMixins} from './common';\nimport {CompositeMarkDef} from './index';\n\nexport const CALLOUT: 'callout' = 'callout';\nexport type Callout = typeof CALLOUT;\n\nexport type CalloutPart = 'line' | 'label';\n\nconst CALLOUT_PART_INDEX: Flag<CalloutPart> = {\n  line: 1,\n  label: 1\n};\n\nexport const CALLOUT_PARTS = keys(CALLOUT_PART_INDEX);\n\n// TODO: Currently can't use `PartsMixins<CalloutPart>`\n// as the schema generator will fail\nexport type CalloutPartsMinxins = {\n  [part in CalloutPart]?: MarkConfig\n};\n\nexport interface CalloutConfig extends CalloutPartsMinxins {\n  /**\n   * Angle of callout line.\n   * __Default value:__ `45`\n   */\n  angle?: number;\n\n  /**\n   * Offset distance between the data point and the callout line.\n   * __Default value:__ `0`\n   */\n  lineOffset?: number;\n\n  /**\n   * Length of callout line.\n   * __Default value:__ `30`\n   */\n  lineLength?: number;\n\n  /**\n   * Offset distance between callout line and label\n   * __Default value:__ `2`\n   */\n  labelOffset?: number;\n}\n\nexport const DEFAULT_CALLOUT_CONFIG: CalloutConfig = {\n  angle: -45,\n  lineOffset: 0,\n  lineLength: 30,\n  labelOffset: 2,\n  label: {\n    align: 'left',\n    baseline: 'middle'\n  },\n  line: {}\n};\n\nexport interface CalloutDef extends GenericCompositeMarkDef<Callout>, CalloutConfig {}\n\nexport function isCalloutDef(markDef: CompositeMarkDef): markDef is CalloutDef {\n  return markDef.type === 'callout';\n}\n\nexport interface CalloutConfigMixins {\n  /**\n   * Callout Rule Config\n   */\n  callout?: CalloutConfig;\n}\n\nexport function normalizeCallout(spec: GenericUnitSpec<Encoding<string>, Callout | CalloutDef>, config: Config): NormalizedLayerSpec {\n  // TODO:  determine what's the general rule for applying selection for composite marks\n  const {mark, selection: _sel, projection: _p, encoding, ...outerSpec} = spec;\n  const markDef = {\n    ...config.callout,\n    ...isMarkDef(mark) ? mark : {type: mark}\n  };\n\n  const {angle, lineOffset, lineLength, labelOffset} = markDef;\n\n  const calloutOffsetCoor1 = getCoordinateFromAngleAndLength(angle, lineOffset);\n  const calloutOffsetCoor2 = getCoordinateFromAngleAndLength(angle, lineOffset + lineLength);\n  const labelTotalOffsetCoor = getCoordinateFromAngleAndLength(angle, lineOffset + lineLength + labelOffset);\n\n  const {text, size, ...encodingWithoutTextAndSize} = encoding;\n  if (!text) {\n    log.warn('callout mark should have text encoding');\n  }\n\n  return {\n    ...outerSpec,\n    layer: [\n      ...partLayerMixins<CalloutPartsMinxins>(\n        markDef, 'line', config.callout,\n        { // callout\n          mark: {\n            type: 'rule',\n            xOffset: calloutOffsetCoor1.x,\n            yOffset: calloutOffsetCoor1.y,\n            x2Offset: calloutOffsetCoor2.x,\n            y2Offset: calloutOffsetCoor2.y\n          },\n          encoding: {\n            x2: encoding.x,\n            y2: encoding.y,\n            ...encodingWithoutTextAndSize\n          }\n        }\n      ),\n      ...partLayerMixins<CalloutPartsMinxins>(\n        markDef, 'label', config.callout,\n        { // label\n          mark: {\n            type: 'text',\n            xOffset: labelTotalOffsetCoor.x,\n            yOffset: labelTotalOffsetCoor.y,\n          },\n          encoding\n        }\n      )\n    ]\n  };\n}\n\nfunction getCoordinateFromAngleAndLength(angle: number, length: number): {x: number, y: number} {\n  const radian = angle * Math.PI / 180;\n  return {x: length * Math.cos(radian), y: length * Math.sin(radian)};\n}\n"]}