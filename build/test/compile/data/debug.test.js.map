{"version":3,"file":"debug.test.js","sourceRoot":"","sources":["../../../../test/compile/data/debug.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {BinNode} from '../../../src/compile/data/bin';\nimport {checkLinks, debug, draw} from '../../../src/compile/data/debug';\nimport {SourceNode} from '../../../src/compile/data/source';\nimport {resetIdCounter} from '../../../src/util';\nimport {DataFlowNode} from './../../../src/compile/data/dataflow';\n\nconst dot = `digraph DataFlow {\n  rankdir = TB;\n  node [shape=record]\n    \"43\" [\n    label = <DataFlow>;\n    tooltip = \"[43]&#010;44\"\n  ]\n  \"45\" [\n    label = <DataFlow>;\n    tooltip = \"[45]&#010;46\"\n  ]\n\n  \"43\" -> \"45\"\n}`;\nconst dot2 = `digraph DataFlow {\n  rankdir = TB;\n  node [shape=record]\n    \"43\" [\n    label = <DataFlow<br/><i>foo</i>>;\n    tooltip = \"[43]&#010;44\"\n  ]\n  \"45\" [\n    label = <DataFlow<br/><i>bar</i>>;\n    tooltip = \"[45]&#010;46\"\n  ]\n\n  \"43\" -> \"45\"\n}`;\n\nconst dot3 =\n  `digraph DataFlow {\n  rankdir = TB;\n  node [shape=record]\n    \"43\" [\n    label = <Source<br/><i>foo.bar</i>>;\n    tooltip = \"[43]&#010;foo.bar\"\n  ]` + '\\n\\n  \\n}';\n\nconst dot4 = `digraph DataFlow {\n  rankdir = TB;\n  node [shape=record]\n    \"43\" [\n    label = <DataFlow>;\n    tooltip = \"[43]&#010;44\"\n  ]\n  \"45\" [\n    label = <Bin<br/><font color=\"grey\" point-size=\"10\">IN:</font> foo<br/><font color=\"grey\" point-size=\"10\">OUT:</font> bar>;\n    tooltip = \"[45]&#010;Bin {foo:{as:[bar],bin:{},field:foo}}\"\n  ]\n\n  \"43\" -> \"45\"\n}`;\n\ndescribe('compile/data/debug', () => {\n  describe('draw', () => {\n    it('should draw simple dataflow graph', () => {\n      resetIdCounter();\n\n      const root = new DataFlowNode(null);\n      // @ts-ignore\n      const node = new DataFlowNode(root);\n      expect(draw([root])).toBe(dot);\n    });\n    it('should print node debugName when defined', () => {\n      resetIdCounter();\n\n      const root = new DataFlowNode(null, 'foo');\n      // @ts-ignore\n      const node = new DataFlowNode(root, 'bar');\n      expect(draw([root])).toBe(dot2);\n    });\n    it('should print node.data.url when defined', () => {\n      resetIdCounter();\n\n      const root = new SourceNode({url: 'foo.bar'});\n      expect(draw([root])).toBe(dot3);\n    });\n    it('should print dependent and produced field', () => {\n      resetIdCounter();\n\n      const root = new DataFlowNode(null);\n      // @ts-ignore\n      const node = new BinNode(root, {foo: {field: 'foo', as: ['bar'], bin: {}}});\n      expect(draw([root])).toBe(dot4);\n    });\n  });\n  describe('checkLinks', () => {\n    it('should return false when given inconsistent data flow', () => {\n      resetIdCounter();\n      const root = new DataFlowNode(null);\n      const node = new DataFlowNode(root);\n      node.parent = null;\n      expect(checkLinks([root])).toBe(false);\n    });\n    it('should return false with more complicated inconsistent data flow', () => {\n      resetIdCounter();\n      const root = new DataFlowNode(null);\n      const node = new DataFlowNode(root);\n      const node2 = new DataFlowNode(node);\n      node2.parent = null;\n      expect(checkLinks([root])).toBe(false);\n    });\n  });\n  describe('debug', () => {\n    it('should print simple dataflow graph', () => {\n      resetIdCounter();\n      const root = new DataFlowNode(null, 'foo');\n      const node = new DataFlowNode(root, 'bar');\n      console.log = jest.fn();\n      debug(root);\n      expect(console.log).toHaveBeenCalledWith('DataFlowNode(foo) -> DataFlowNode (bar)');\n      expect(console.log).toHaveBeenCalledWith(root);\n      expect(console.log).toHaveBeenCalledWith('DataFlowNode(bar) -> ');\n      expect(console.log).toHaveBeenCalledWith(node);\n    });\n  });\n});\n"]}