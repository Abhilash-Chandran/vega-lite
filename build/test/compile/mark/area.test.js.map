{"version":3,"file":"area.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/area.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\n\nimport {COLOR, X, Y} from '../../../src/channel';\nimport {area} from '../../../src/compile/mark/area';\nimport {Encoding} from '../../../src/encoding';\nimport {NormalizedUnitSpec} from '../../../src/spec';\nimport {internalField} from '../../../src/util';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('Mark: Area', () => {\n  function verticalArea(moreEncoding: Encoding<string> = {}): NormalizedUnitSpec {\n    return {\n      mark: 'area',\n      encoding: {\n        x: {timeUnit: 'year', field: 'Year', type: 'temporal'},\n        y: {aggregate: 'count', type: 'quantitative'},\n        ...moreEncoding\n      },\n      data: {url: 'data/cars.json'}\n    };\n  }\n\n  describe('vertical area, with log', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'area',\n      encoding: {\n        x: {bin: true, type: 'quantitative', field: 'IMDB_Rating'},\n        y: {scale: {type: 'log'}, type: 'quantitative', field: 'US_Gross', aggregate: 'mean'}\n      },\n      data: {url: 'data/movies.json'}\n    });\n    const props = area.encodeEntry(model);\n\n    it('should end on axis', () => {\n      expect(props.y2).toEqual({field: {group: 'height'}});\n    });\n\n    it('should has no height', () => {\n      expect(props.height).not.toBeDefined();\n    });\n  });\n\n  describe('stacked vertical area, with binned dimension', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'area',\n      encoding: {\n        x: {bin: true, type: 'quantitative', field: 'IMDB_Rating'},\n        y: {type: 'quantitative', field: 'US_Gross', aggregate: 'sum'},\n        color: {type: 'nominal', field: 'c'}\n      },\n      data: {url: 'data/movies.json'}\n    });\n    const props = area.encodeEntry(model);\n\n    it('should use bin_mid for x', () => {\n      expect(props.x).toEqual({field: 'bin_maxbins_10_IMDB_Rating_mid', scale: 'x'});\n    });\n  });\n\n  describe('vertical area, with zero=false', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'area',\n      encoding: {\n        x: {bin: true, type: 'quantitative', field: 'IMDB_Rating'},\n        y: {scale: {zero: false}, type: 'quantitative', field: 'US_Gross', aggregate: 'mean'}\n      },\n      data: {url: 'data/movies.json'}\n    });\n    const props = area.encodeEntry(model);\n\n    it('should end on axis', () => {\n      expect(props.y2).toEqual({field: {group: 'height'}});\n    });\n\n    it('should has no height', () => {\n      expect(props.height).not.toBeDefined();\n    });\n  });\n\n  describe('vertical area', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize(verticalArea());\n    const props = area.encodeEntry(model);\n\n    it('should have scale for x', () => {\n      expect(props.x).toEqual({scale: X, field: 'year_Year'});\n    });\n\n    it('should have scale for y', () => {\n      expect(props.y).toEqual({scale: Y, field: internalField('count')});\n    });\n\n    it('should have the correct value for y2', () => {\n      expect(props.y2).toEqual({scale: 'y', value: 0});\n    });\n  });\n\n  describe('vertical area with binned dimension', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize(verticalArea());\n    const props = area.encodeEntry(model);\n\n    it('should have scale for x', () => {\n      expect(props.x).toEqual({scale: X, field: 'year_Year'});\n    });\n\n    it('should have scale for y', () => {\n      expect(props.y).toEqual({scale: Y, field: internalField('count')});\n    });\n\n    it('should have the correct value for y2', () => {\n      expect(props.y2).toEqual({scale: 'y', value: 0});\n    });\n  });\n\n  describe('vertical stacked area with color', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize(\n      verticalArea({\n        color: {field: 'Origin', type: 'quantitative'}\n      })\n    );\n\n    const props = area.encodeEntry(model);\n\n    it('should have the correct value for y and y2', () => {\n      expect(props.y).toEqual({scale: 'y', field: internalField('count_end')});\n      expect(props.y2).toEqual({scale: 'y', field: internalField('count_start')});\n    });\n\n    it('should have correct orient', () => {\n      expect(props.orient).toEqual({value: 'vertical'});\n    });\n\n    it('should have scale for color', () => {\n      expect(props.fill).toEqual({scale: COLOR, field: 'Origin'});\n    });\n  });\n\n  function horizontalArea(moreEncoding: Encoding<string> = {}): NormalizedUnitSpec {\n    return {\n      mark: 'area',\n      encoding: {\n        y: {timeUnit: 'year', field: 'Year', type: 'temporal'},\n        x: {aggregate: 'count', type: 'quantitative'},\n        ...moreEncoding\n      },\n      data: {url: 'data/cars.json'}\n    };\n  }\n\n  describe('horizontal area', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize(horizontalArea());\n    const props = area.encodeEntry(model);\n\n    it('should have scale for y', () => {\n      expect(props.y).toEqual({scale: Y, field: 'year_Year'});\n    });\n\n    it('should have scale for x', () => {\n      expect(props.x).toEqual({scale: X, field: internalField('count')});\n    });\n\n    it('should have the correct value for x2', () => {\n      expect(props.x2).toEqual({scale: 'x', value: 0});\n    });\n  });\n\n  describe('horizontal area, with log', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'area',\n      encoding: {\n        y: {bin: true, type: 'quantitative', field: 'IMDB_Rating'},\n        x: {scale: {type: 'log'}, type: 'quantitative', field: 'US_Gross', aggregate: 'mean'}\n      },\n      data: {url: 'data/movies.json'}\n    });\n\n    const props = area.encodeEntry(model);\n\n    it('should end on axis', () => {\n      expect(props.x2).toEqual({value: 0});\n    });\n\n    it('should have no width', () => {\n      expect(props.width).not.toBeDefined();\n    });\n  });\n\n  describe('horizontal area, with zero=false', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'area',\n      encoding: {\n        y: {bin: true, type: 'quantitative', field: 'IMDB_Rating'},\n        x: {scale: {zero: false}, type: 'quantitative', field: 'US_Gross', aggregate: 'mean'}\n      },\n      data: {url: 'data/movies.json'}\n    });\n\n    const props = area.encodeEntry(model);\n\n    it('should end on axis', () => {\n      expect(props.x2).toEqual({value: 0});\n    });\n\n    it('should have no width', () => {\n      expect(props.width).not.toBeDefined();\n    });\n  });\n\n  describe('horizontal stacked area with color', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize(\n      horizontalArea({\n        color: {field: 'Origin', type: 'nominal'}\n      })\n    );\n\n    const props = area.encodeEntry(model);\n\n    it('should have the correct value for x and x2', () => {\n      expect(props.x).toEqual({scale: 'x', field: internalField('count_end')});\n      expect(props.x2).toEqual({scale: 'x', field: internalField('count_start')});\n    });\n\n    it('should have correct orient', () => {\n      expect(props.orient).toEqual({value: 'horizontal'});\n    });\n\n    it('should have scale for color', () => {\n      expect(props.fill).toEqual({scale: COLOR, field: 'Origin'});\n    });\n  });\n\n  describe('ranged area', () => {\n    it('vertical area should work with aggregate', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/cars.json'},\n        mark: 'area',\n        encoding: {\n          x: {timeUnit: 'year', field: 'Year', type: 'temporal'},\n          y: {aggregate: 'min', field: 'Weight_in_lbs', type: 'quantitative'},\n          y2: {aggregate: 'max', field: 'Weight_in_lbs', type: 'quantitative'}\n        }\n      });\n      const props = area.encodeEntry(model);\n      expect(props.x).toEqual({scale: 'x', field: 'year_Year'});\n      expect(props.y).toEqual({scale: 'y', field: 'min_Weight_in_lbs'});\n      expect(props.y2).toEqual({scale: 'y', field: 'max_Weight_in_lbs'});\n    });\n\n    it('horizontal area should work with aggregate', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        data: {url: 'data/cars.json'},\n        mark: 'area',\n        encoding: {\n          y: {timeUnit: 'year', field: 'Year', type: 'temporal'},\n          x: {aggregate: 'min', field: 'Weight_in_lbs', type: 'quantitative'},\n          x2: {aggregate: 'max', field: 'Weight_in_lbs', type: 'quantitative'}\n        }\n      });\n      const props = area.encodeEntry(model);\n      expect(props.y).toEqual({scale: 'y', field: 'year_Year'});\n      expect(props.x).toEqual({scale: 'x', field: 'min_Weight_in_lbs'});\n      expect(props.x2).toEqual({scale: 'x', field: 'max_Weight_in_lbs'});\n    });\n  });\n});\n"]}