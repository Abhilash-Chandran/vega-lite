{"version":3,"file":"assemble.test.js","sourceRoot":"","sources":["../../../../test/compile/projection/assemble.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,0BAA0B,EAAC,MAAM,0CAA0C,CAAC;AACpF,OAAO,EAAC,WAAW,EAAC,MAAM,0BAA0B,CAAC;AACrD,OAAO,EAAC,oCAAoC,EAAC,MAAM,YAAY,CAAC;AAEhE,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,MAAM,KAAK,GAAG,oCAAoC,CAAC;YACjD,IAAI,EAAE,UAAU;YAChB,UAAU,EAAE;gBACV,IAAI,EAAE,WAAW;aAClB;YACD,IAAI,EAAE;gBACJ,GAAG,EAAE,kBAAkB;gBACvB,MAAM,EAAE;oBACN,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE,QAAQ;iBAClB;aACF;YACD,QAAQ,EAAE,EAAE;SACb,CAAC,CAAC;QACH,KAAK,CAAC,KAAK,EAAE,CAAC;QAEd,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAC7B,MAAM,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,UAAU,GAAG,0BAA0B,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;YACtC,MAAM,CAAC,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9C,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;YACtC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChD,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;YACrC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {assembleProjectionForModel} from '../../../src/compile/projection/assemble';\nimport {isSignalRef} from '../../../src/vega.schema';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('compile/projection/assemble', () => {\n  describe('assembleProjectionForModel', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      mark: 'geoshape',\n      projection: {\n        type: 'albersUsa'\n      },\n      data: {\n        url: 'data/us-10m.json',\n        format: {\n          type: 'topojson',\n          feature: 'states'\n        }\n      },\n      encoding: {}\n    });\n    model.parse();\n\n    it('should not be empty', () => {\n      expect(assembleProjectionForModel(model).length).toBeGreaterThan(0);\n    });\n\n    it('should have properties of right type', () => {\n      const projection = assembleProjectionForModel(model)[0];\n      expect(projection.name).toBeDefined();\n      expect(typeof projection.name).toBe('string');\n      expect(projection.size).toBeDefined();\n      expect(isSignalRef(projection.size)).toBe(true);\n      expect(projection.fit).toBeDefined();\n      expect(isSignalRef(projection.fit)).toBe(true);\n    });\n  });\n});\n"]}