{"version":3,"file":"source.test.js","sourceRoot":"","sources":["../../../../test/compile/data/source.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {SourceNode} from '../../../src/compile/data/source';\nimport {Data} from '../../../src/data';\n\nfunction parse(data: Data) {\n  return new SourceNode(data);\n}\n\ndescribe('compile/data/source', () => {\n  describe('compileUnit', () => {\n    describe('with explicit values', () => {\n      const source = parse({\n        values: [{a: 1, b: 2, c: 3}, {a: 4, b: 5, c: 6}]\n      });\n\n      it('should have values', () => {\n        expect(source.data.values).toEqual([{a: 1, b: 2, c: 3}, {a: 4, b: 5, c: 6}]);\n      });\n\n      it('should have no source.format.type', () => {\n        expect(source.data.format).toEqual(undefined);\n      });\n    });\n\n    describe('with explicit values as CSV', () => {\n      const source = parse({\n        values: 'a\\n1\\n2\\n3',\n        format: {type: 'csv'}\n      });\n\n      it('should have values', () => {\n        expect(source.data.values).toEqual('a\\n1\\n2\\n3');\n      });\n\n      it('should have correct type', () => {\n        expect(source.data.format.type).toEqual('csv');\n      });\n    });\n\n    describe('with link to url', () => {\n      const source = parse({\n        url: 'http://foo.bar/file.csv'\n      });\n\n      it('should have format.type csv', () => {\n        expect(source.data.format.type).toEqual('csv');\n      });\n      it('should have correct url', () => {\n        expect(source.data.url).toEqual('http://foo.bar/file.csv');\n      });\n    });\n\n    describe('without file ending', () => {\n      const source = parse({\n        url: 'http://foo.bar/file.baz'\n      });\n\n      it('should have format.type json', () => {\n        expect(source.data.format.type).toEqual('json');\n      });\n    });\n\n    describe('with no data specified', () => {\n      const source = parse(undefined);\n\n      it('should provide placeholder source data', () => {\n        expect(source.dataName).toEqual('source');\n      });\n    });\n\n    describe('with named data source provided', () => {\n      const source = parse({name: 'foo'});\n\n      it('should provide named source data', () => {\n        expect(source.dataName).toEqual('foo');\n      });\n    });\n\n    describe('data format', () => {\n      describe('json', () => {\n        it('should include property if specified', () => {\n          const source = parse({\n            url: 'http://foo.bar',\n            format: {type: 'json', property: 'baz'}\n          });\n\n          expect(source.data.format.property).toEqual('baz');\n        });\n      });\n\n      describe('topojson', () => {\n        describe('feature property is specified', () => {\n          const source = parse({\n            url: 'http://foo.bar',\n            format: {type: 'topojson', feature: 'baz'}\n          });\n\n          it('should have format.type topojson', () => {\n            expect(source.data.format.type).toEqual('topojson');\n          });\n          it('should have format.feature baz', () => {\n            expect(source.data.format.feature).toEqual('baz');\n          });\n        });\n\n        describe('mesh property is specified', () => {\n          const source = parse({\n            url: 'http://foo.bar',\n            format: {type: 'topojson', mesh: 'baz'}\n          });\n\n          it('should have format.type topojson', () => {\n            expect(source.data.format.type).toEqual('topojson');\n          });\n          it('should have format.mesh baz', () => {\n            expect(source.data.format.mesh).toEqual('baz');\n          });\n        });\n      });\n    });\n  });\n\n  describe('assemble', () => {\n    // TODO: write test\n  });\n});\n"]}