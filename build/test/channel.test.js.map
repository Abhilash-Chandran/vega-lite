{"version":3,"file":"channel.test.js","sourceRoot":"","sources":["../../test/channel.test.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,QAAQ,EACR,cAAc,EACd,0BAA0B,EAC1B,SAAS,EACT,cAAc,EACd,mBAAmB,EACnB,aAAa,EACd,MAAM,gBAAgB,CAAC;AACxB,OAAO,EAAC,OAAO,EAAC,MAAM,aAAa,CAAC;AAEpC,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;IACvB,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,6EAA6E,EAAE,GAAG,EAAE;YACrF,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAC5B,OAAO,CAAC,aAAa,EAAE;gBACrB,IAAI;gBACJ,IAAI;gBACJ,QAAQ;gBACR,QAAQ;gBACR,SAAS;gBACT,SAAS;gBACT,UAAU;gBACV,WAAW;gBACX,WAAW;gBACX,YAAY;gBACZ,OAAO;gBACP,QAAQ;gBACR,KAAK;gBACL,MAAM;gBACN,OAAO;gBACP,SAAS;gBACT,MAAM;aACP,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,CAAC,0BAA0B,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;QAClF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,KAAK,MAAM,OAAO,IAAI,cAAc,EAAE;gBACpC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;aAC9C;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,KAAK,MAAM,CAAC,IAAI,QAAQ,EAAE;gBACxB,MAAM,CAAC,GAAG,EAAE;oBACV,SAAS,CAAC,CAAC,CAAC,CAAC;gBACf,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;aAClB;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {\n  CHANNELS,\n  isScaleChannel,\n  NONPOSITION_SCALE_CHANNELS,\n  rangeType,\n  SCALE_CHANNELS,\n  SINGLE_DEF_CHANNELS,\n  UNIT_CHANNELS\n} from '../src/channel';\nimport {without} from '../src/util';\n\ndescribe('channel', () => {\n  describe('UNIT_CHANNELS', () => {\n    it('should be CHANNELS without row and column', () => {\n      expect(UNIT_CHANNELS).toEqual(without(CHANNELS, ['row', 'column']));\n    });\n  });\n\n  describe('SINGLE_DEF_CHANNELS', () => {\n    it('should be CHANNELS without detail and order', () => {\n      expect(SINGLE_DEF_CHANNELS).toEqual(without(CHANNELS, ['detail', 'order']));\n    });\n  });\n\n  describe('SCALE_CHANNELS', () => {\n    it('should be UNIT_CHANNELS without X2, Y2, ORDER, DETAIL, TEXT, LABEL, TOOLTIP', () => {\n      expect(SCALE_CHANNELS).toEqual(\n        without(UNIT_CHANNELS, [\n          'x2',\n          'y2',\n          'xError',\n          'yError',\n          'xError2',\n          'yError2',\n          'latitude',\n          'longitude',\n          'latitude2',\n          'longitude2',\n          'order',\n          'detail',\n          'key',\n          'text',\n          'label',\n          'tooltip',\n          'href'\n        ])\n      );\n    });\n  });\n\n  describe('NONPOSITION_SCALE_CHANNELS', () => {\n    it('should be SCALE_CHANNELS without x, y, x2, y2', () => {\n      expect(NONPOSITION_SCALE_CHANNELS).toEqual(without(SCALE_CHANNELS, ['x', 'y']));\n    });\n  });\n\n  describe('isScaleChannel', () => {\n    it('should return true for all scale channel', () => {\n      for (const channel of SCALE_CHANNELS) {\n        expect(isScaleChannel(channel)).toBeTruthy();\n      }\n    });\n  });\n\n  describe('rangeType', () => {\n    it('should be defined for all channels (no error).', () => {\n      for (const c of CHANNELS) {\n        expect(() => {\n          rangeType(c);\n        }).not.toThrow();\n      }\n    });\n  });\n});\n"]}