{"version":3,"file":"errorband.test.js","sourceRoot":"","sources":["../../../test/compositemark/errorband.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport {assert} from 'chai';\n\nimport {isMarkDef} from '../../src/mark';\nimport {isLayerSpec, isUnitSpec, normalize} from '../../src/spec';\nimport {some} from '../../src/util';\nimport {defaultConfig} from '.././../src/config';\n\ndescribe('normalizeErrorBand', () => {\n  it('should produce correct layered specs for mean point and vertical error band', () => {\n    assert.deepEqual(normalize({\n      \"data\": {\n        \"url\": \"data/population.json\"\n      },\n      mark: \"errorband\",\n      encoding: {\n        \"x\": {\n          \"field\": \"age\",\n          \"type\": \"ordinal\"\n        },\n        \"y\": {\n          \"field\": \"people\",\n          \"type\": \"quantitative\"\n        }\n      }\n    }, defaultConfig), {\n      \"data\": {\n        \"url\": \"data/population.json\"\n      },\n      \"transform\": [\n        {\n          \"aggregate\": [\n            {\n              \"op\": \"stderr\",\n              \"field\": \"people\",\n              \"as\": \"extent_people\"\n            },\n            {\n              \"op\": \"mean\",\n              \"field\": \"people\",\n              \"as\": \"center_people\"\n            }\n          ],\n          \"groupby\": [\n            \"age\"\n          ]\n        },\n        {\n          \"calculate\": \"datum.center_people + datum.extent_people\",\n          \"as\": \"upper_people\"\n        },\n        {\n          \"calculate\": \"datum.center_people - datum.extent_people\",\n          \"as\": \"lower_people\"\n        }\n      ],\n      \"layer\": [\n        {\n          \"mark\": {\n            \"opacity\": 0.3,\n            \"type\": \"area\",\n            \"style\": \"errorband-band\"\n          },\n          \"encoding\": {\n            \"y\": {\n              \"field\": \"lower_people\",\n              \"type\": \"quantitative\",\n              \"title\": \"people\"\n            },\n            \"y2\": {\n              \"field\": \"upper_people\",\n              \"type\": \"quantitative\"\n            },\n            \"x\": {\n              \"field\": \"age\",\n              \"type\": \"ordinal\",\n              \"title\": \"age\"\n            }\n          }\n        }\n      ]\n    });\n  });\n\n  it('should produce correct layered specs with rect + rule, instead of area + line, in 1D error band', () => {\n    const outputSpec = normalize({\n      \"data\": {\"url\": \"data/population.json\"},\n      \"mark\": {\"type\": \"errorband\", \"borders\": true},\n      \"encoding\": {\"y\": {\"field\": \"people\", \"type\": \"quantitative\"}}\n    }, defaultConfig);\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    if (layer) {\n      assert.isTrue(some(layer, (unitSpec) => {\n        return isUnitSpec(unitSpec) && isMarkDef(unitSpec.mark) &&\n              unitSpec.mark.type === \"rect\";\n      }));\n      assert.isTrue(some(layer, (unitSpec) => {\n        return isUnitSpec(unitSpec) && isMarkDef(unitSpec.mark) &&\n              unitSpec.mark.type === \"rule\";\n      }));\n    } else {\n      assert.fail(!layer, false, 'layer should be a part of the spec');\n    }\n  });\n\n  it('should produce correct layered specs with area + line, in 2D error band', () => {\n    const outputSpec = normalize({\n      \"data\": {\"url\": \"data/population.json\"},\n      \"mark\": {\"type\": \"errorband\", \"borders\": true},\n      \"encoding\": {\n        \"y\": {\"field\": \"people\", \"type\": \"quantitative\"},\n        \"x\": {\"field\": \"age\", \"type\": \"ordinal\"}\n      }\n    }, defaultConfig);\n\n    const layer = isLayerSpec(outputSpec) && outputSpec.layer;\n    if (layer) {\n      assert.isTrue(some(layer, (unitSpec) => {\n        return isUnitSpec(unitSpec) && isMarkDef(unitSpec.mark) &&\n              unitSpec.mark.type === \"area\";\n      }));\n      assert.isTrue(some(layer, (unitSpec) => {\n        return isUnitSpec(unitSpec) && isMarkDef(unitSpec.mark) &&\n              unitSpec.mark.type === \"line\";\n      }));\n    } else {\n      assert.fail(!layer, false, 'layer should be a part of the spec');\n    }\n  });\n});\n"]}