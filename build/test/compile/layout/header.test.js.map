{"version":3,"file":"header.test.js","sourceRoot":"","sources":["../../../../test/compile/layout/header.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {getHeaderGroups, getTitleGroup, labelAlign, labelBaseline} from '../../../src/compile/layout/header';\nimport {VgMarkGroup} from '../../../src/vega.schema';\nimport {parseFacetModel} from '../../util';\n\ndescribe('compile/layout/header', () => {\n  describe('label aligns correctly according to angle', () => {\n    assert.deepEqual(labelAlign(23), {align: {value: 'right'}});\n    assert.deepEqual(labelAlign(135), {align: {value: 'left'}});\n    assert.deepEqual(labelAlign(50), {align: {value: 'right'}});\n  });\n\n  describe('label baseline adjusted according to angle', () => {\n    assert.deepEqual(labelBaseline(10), {baseline: {value: 'middle'}});\n    assert.deepEqual(labelBaseline(90), {baseline: {value: 'top'}});\n  });\n\n  describe('getHeaderGroups', () => {\n    it('should correctly process sort descending', () => {\n      const model = parseFacetModel({\n        facet: {\n          row: {field: 'a', type: 'ordinal', sort: 'ascending'},\n          column: {field: 'a', type: 'ordinal', sort: 'descending'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parseScale();\n      model.parseLayoutSize();\n      model.parseAxisAndHeader();\n\n      const rowHeaderGroups = getHeaderGroups(model, 'row');\n      const columnHeaderGroups = getHeaderGroups(model, 'column');\n      assert.equal(rowHeaderGroups[0].sort.order, 'ascending');\n      assert.equal(columnHeaderGroups[0].sort.order, 'descending');\n    });\n\n    it('should correctly process sort field', () => {\n      const model = parseFacetModel({\n        facet: {\n          row: {field: 'a', type: 'ordinal', sort: {field: 'd', op: 'min'}}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parseScale();\n      model.parseLayoutSize();\n      model.parseAxisAndHeader();\n\n      const rowHeaderGroups = getHeaderGroups(model, 'row');\n      assert.equal(rowHeaderGroups[0].sort.field, 'datum[\"min_d\"]');\n    });\n  });\n\n  describe('getTitleGroup', () => {\n    const model = parseFacetModel({\n      facet: {\n        row: {field: 'a', type: 'ordinal'},\n        column: {field: 'a', type: 'ordinal'}\n      },\n      spec: {\n        mark: 'point',\n        encoding: {\n          x: {field: 'b', type: 'quantitative'},\n          y: {field: 'c', type: 'quantitative'}\n        }\n      }\n    });\n    model.parseScale();\n    model.parseLayoutSize();\n    model.parseAxisAndHeader();\n\n    describe('for column', () => {\n      const columnLabelGroup = getTitleGroup(model, 'column');\n      const {marks, ...columnTitleGroupTopLevelProps} = columnLabelGroup;\n      it('returns a header group mark with correct name, role, type, and from.', () => {\n\n        assert.deepEqual(columnTitleGroupTopLevelProps, {\n          name: 'column_title',\n          type: 'group',\n          role: 'column-title'\n        });\n      });\n      const textMark = marks[0];\n\n      it('contains a correct text mark with the correct role and encode as the only item in marks', () => {\n        assert.equal(marks.length, 1);\n        assert.deepEqual<VgMarkGroup>(textMark, {\n          type: 'text',\n          role: 'column-title-text',\n          style: 'guide-title',\n          encode: {\n            update: {\n              text: {value: 'a'},\n              align: {value: 'center'}\n            }\n          }\n        });\n      });\n    });\n\n    describe('for row', () => {\n      const rowTitleGroup = getTitleGroup(model, 'row');\n      const {marks, ...rowTitleGroupTopLevelProps} = rowTitleGroup;\n      it('returns a header group mark with correct name, role, type, from, and encode.', () => {\n\n        assert.deepEqual(rowTitleGroupTopLevelProps, {\n          name: 'row_title',\n          type: 'group',\n          role: 'row-title'\n        });\n      });\n      const textMark = marks[0];\n\n      it('contains a correct text mark with the correct role and encode as the only item in marks', () => {\n        assert.equal(marks.length, 1);\n        assert.deepEqual<VgMarkGroup>(textMark, {\n          type: 'text',\n          role: 'row-title-text',\n          style: 'guide-title',\n          encode: {\n            update: {\n              text: {value: 'a'},\n              angle: {value: 270},\n              align: {value: 'center'}\n            }\n          }\n        });\n      });\n    });\n  });\n});\n"]}