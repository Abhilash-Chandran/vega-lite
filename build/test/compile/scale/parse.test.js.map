{"version":3,"file":"parse.test.js","sourceRoot":"","sources":["../../../../test/compile/scale/parse.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {toSet} from 'vega-util';\nimport {parseScale, parseScaleCore} from '../../../src/compile/scale/parse';\nimport {SELECTION_DOMAIN} from '../../../src/compile/selection/selection';\nimport * as log from '../../../src/log';\nimport {NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES, SCALE_PROPERTIES} from '../../../src/scale';\nimport {without} from '../../../src/util';\nimport {parseModel, parseModelWithScale, parseUnitModelWithScale} from '../../util';\n\ndescribe('src/compile', () => {\n  it('NON_TYPE_RANGE_SCALE_PROPERTIES should be SCALE_PROPERTIES wihtout type, domain, and range properties', () => {\n    assert.deepEqual(\n      toSet(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES),\n      toSet(without(SCALE_PROPERTIES, ['type', 'domain', 'range', 'rangeStep', 'scheme']))\n    );\n  });\n\n  describe('parseScaleCore', () => {\n    it('respects explicit scale type', () => {\n      const model = parseModel({\n        data: {url: 'data/seattle-weather.csv'},\n        layer: [\n          {\n            mark: 'bar',\n            encoding: {\n              y: {\n                aggregate: 'mean',\n                field: 'precipitation',\n                type: 'quantitative'\n              }\n            }\n          },\n          {\n            mark: 'rule',\n            encoding: {\n              y: {\n                aggregate: 'mean',\n                field: 'precipitation',\n                type: 'quantitative',\n                scale: {type: 'log'}\n              }\n            }\n          }\n        ]\n      });\n      parseScaleCore(model);\n      assert.equal(model.getScaleComponent('y').explicit.type, 'log');\n    });\n\n    it('respects explicit scale type', () => {\n      const model = parseModel({\n        data: {url: 'data/seattle-weather.csv'},\n        layer: [\n          {\n            mark: 'bar',\n            encoding: {\n              y: {\n                aggregate: 'mean',\n                field: 'precipitation',\n                type: 'quantitative',\n                scale: {type: 'log'}\n              }\n            }\n          },\n          {\n            mark: 'rule',\n            encoding: {\n              y: {\n                aggregate: 'mean',\n                field: 'precipitation',\n                type: 'quantitative'\n              }\n            }\n          }\n        ]\n      });\n      parseScaleCore(model);\n      assert.equal(model.getScaleComponent('y').explicit.type, 'log');\n    });\n\n    // TODO: this actually shouldn't get merged\n    it(\n      'favors the first explicit scale type',\n      log.wrap(localLogger => {\n        const model = parseModel({\n          data: {url: 'data/seattle-weather.csv'},\n          layer: [\n            {\n              mark: 'bar',\n              encoding: {\n                y: {\n                  aggregate: 'mean',\n                  field: 'precipitation',\n                  type: 'quantitative',\n                  scale: {type: 'log'}\n                }\n              }\n            },\n            {\n              mark: 'rule',\n              encoding: {\n                y: {\n                  aggregate: 'mean',\n                  field: 'precipitation',\n                  type: 'quantitative',\n                  scale: {type: 'pow'}\n                }\n              }\n            }\n          ]\n        });\n        parseScaleCore(model);\n        assert.equal(model.getScaleComponent('y').explicit.type, 'log');\n        assert.equal(localLogger.warns[0], log.message.mergeConflictingProperty('type', 'scale', 'log', 'pow'));\n      })\n    );\n\n    it('favors the band over point', () => {\n      const model = parseModel({\n        data: {url: 'data/seattle-weather.csv'},\n        layer: [\n          {\n            mark: 'point',\n            encoding: {\n              y: {\n                aggregate: 'mean',\n                field: 'precipitation',\n                type: 'quantitative'\n              },\n              x: {field: 'weather', type: 'nominal'}\n            }\n          },\n          {\n            mark: 'bar',\n            encoding: {\n              y: {\n                aggregate: 'mean',\n                field: 'precipitation',\n                type: 'quantitative'\n              },\n              x: {field: 'weather', type: 'nominal'}\n            }\n          }\n        ]\n      });\n      parseScaleCore(model);\n      assert.equal(model.getScaleComponent('x').implicit.type, 'band');\n    });\n\n    it('correctly ignores x/y when lon/lat', () => {\n      const model = parseModel({\n        data: {\n          url: 'data/zipcodes.csv',\n          format: {\n            type: 'csv'\n          }\n        },\n        mark: 'point',\n        encoding: {\n          longitude: {\n            field: 'longitude',\n            type: 'quantitative'\n          },\n          latitude: {\n            field: 'latitude',\n            type: 'quantitative'\n          }\n        }\n      });\n      parseScaleCore(model);\n      assert.isUndefined(model.getScaleComponent('x'));\n      assert.isUndefined(model.getScaleComponent('y'));\n    });\n\n    it('correctly ignores shape when geojson', () => {\n      const model = parseModel({\n        mark: 'geoshape',\n        data: {url: 'data/income.json'},\n        transform: [\n          {\n            lookup: 'id',\n            from: {\n              data: {\n                url: 'data/us-10m.json',\n                format: {type: 'topojson', feature: 'states'}\n              },\n              key: 'id'\n            },\n            as: 'geo'\n          }\n        ],\n        encoding: {\n          shape: {field: 'geo', type: 'geojson'}\n        }\n      });\n      parseScaleCore(model);\n      assert.isUndefined(model.getScaleComponent('shape'));\n    });\n  });\n\n  describe('parseScale', () => {\n    it(\n      'does not throw warning when two equivalent objects are specified',\n      log.wrap(logger => {\n        const model = parseModel({\n          data: {url: 'data/seattle-weather.csv'},\n          layer: [\n            {\n              mark: 'circle',\n              encoding: {\n                y: {\n                  field: 'a',\n                  type: 'nominal',\n                  scale: {rangeStep: 17}\n                }\n              }\n            },\n            {\n              mark: 'point',\n              encoding: {\n                y: {\n                  field: 'a',\n                  type: 'nominal',\n                  scale: {rangeStep: 17}\n                }\n              }\n            }\n          ]\n        });\n        parseScale(model);\n        assert.deepEqual(model.getScaleComponent('y').explicit.range, {step: 17});\n        assert.equal(logger.warns.length, 0);\n      })\n    );\n\n    describe('x ordinal point', () => {\n      it('should create an x point scale with rangeStep and no range', () => {\n        const model = parseUnitModelWithScale({\n          mark: 'point',\n          encoding: {\n            x: {field: 'origin', type: 'nominal'}\n          }\n        });\n        const scale = model.getScaleComponent('x');\n        assert.equal(scale.implicit.type, 'point');\n        assert.deepEqual(scale.implicit.range, {step: 21});\n      });\n    });\n\n    it('should output only padding without default paddingInner and paddingOuter if padding is specified for a band scale', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {field: 'origin', type: 'nominal', scale: {type: 'band', padding: 0.6}}\n        }\n      });\n      const scale = model.getScaleComponent('x');\n      assert.equal(scale.explicit.padding, 0.6);\n      assert.isUndefined(scale.get('paddingInner'));\n      assert.isUndefined(scale.get('paddingOuter'));\n    });\n\n    it('should output default paddingInner and paddingOuter = paddingInner/2 if none of padding properties is specified for a band scale', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {field: 'origin', type: 'nominal', scale: {type: 'band'}}\n        },\n        config: {\n          scale: {bandPaddingInner: 0.3}\n        }\n      });\n      const scale = model.getScaleComponent('x');\n      assert.equal(scale.implicit.paddingInner, 0.3);\n      assert.equal(scale.implicit.paddingOuter, 0.15);\n      assert.isUndefined(scale.get('padding'));\n    });\n\n    describe('nominal with color', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          color: {field: 'origin', type: 'nominal'}\n        }\n      });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should create correct color scale', () => {\n        assert.equal(scale.implicit.name, 'color');\n        assert.equal(scale.implicit.type, 'ordinal');\n        assert.deepEqual(scale.domains, [\n          {\n            data: 'main',\n            field: 'origin',\n            sort: true\n          }\n        ]);\n        assert.equal(scale.implicit.range, 'category');\n      });\n    });\n\n    describe('ordinal with color', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          color: {field: 'origin', type: 'ordinal'}\n        }\n      });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should create sequential color scale', () => {\n        assert.equal(scale.implicit.name, 'color');\n        assert.equal(scale.implicit.type, 'ordinal');\n\n        assert.deepEqual(scale.domains, [\n          {\n            data: 'main',\n            field: 'origin',\n            sort: true\n          }\n        ]);\n      });\n    });\n\n    describe('quantitative with color', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          color: {field: 'origin', type: 'quantitative'}\n        }\n      });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should create linear color scale', () => {\n        assert.equal(scale.implicit.name, 'color');\n        assert.equal(scale.implicit.type, 'sequential');\n        assert.equal(scale.implicit.range, 'ramp');\n\n        assert.deepEqual(scale.domains, [\n          {\n            data: 'main',\n            field: 'origin'\n          }\n        ]);\n      });\n    });\n\n    describe('color with bin', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          color: {field: 'origin', type: 'quantitative', bin: true}\n        }\n      });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should add correct scales', () => {\n        assert.equal(scale.implicit.name, 'color');\n        assert.equal(scale.implicit.type, 'bin-ordinal');\n      });\n    });\n\n    describe('ordinal color with bin', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          color: {field: 'origin', type: 'ordinal', bin: true}\n        }\n      });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should add correct scales', () => {\n        assert.equal(scale.implicit.name, 'color');\n        assert.equal(scale.implicit.type, 'ordinal');\n      });\n    });\n\n    describe('opacity with bin', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          opacity: {field: 'origin', type: 'quantitative', bin: true}\n        }\n      });\n\n      const scale = model.getScaleComponent('opacity');\n\n      it('should add correct scales', () => {\n        assert.equal(scale.implicit.name, 'opacity');\n        assert.equal(scale.implicit.type, 'bin-linear');\n      });\n    });\n\n    describe('size with bin', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          size: {field: 'origin', type: 'quantitative', bin: true}\n        }\n      });\n\n      const scale = model.getScaleComponent('size');\n\n      it('should add correct scales', () => {\n        assert.equal(scale.implicit.name, 'size');\n        assert.equal(scale.implicit.type, 'bin-linear');\n      });\n    });\n\n    describe('color with time unit', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          color: {field: 'origin', type: 'temporal', timeUnit: 'year'}\n        }\n      });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should add correct scales', () => {\n        assert.equal(scale.implicit.name, 'color');\n        assert.equal(scale.implicit.type, 'sequential');\n      });\n    });\n\n    describe('selection domain', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'area',\n        encoding: {\n          x: {\n            field: 'date',\n            type: 'temporal',\n            scale: {domain: {selection: 'brush', encoding: 'x'}}\n          },\n          y: {\n            field: 'date',\n            type: 'temporal',\n            scale: {domain: {selection: 'foobar', field: 'Miles_per_Gallon'}}\n          }\n        }\n      });\n\n      const xScale = model.getScaleComponent('x');\n      const yscale = model.getScaleComponent('y');\n\n      it('should add a raw selection domain', () => {\n        assert.property(xScale.explicit, 'domainRaw');\n        assert.propertyVal(\n          xScale.explicit.domainRaw,\n          'signal',\n          SELECTION_DOMAIN + '{\"encoding\":\"x\",\"selection\":\"brush\"}'\n        );\n\n        assert.property(yscale.explicit, 'domainRaw');\n        assert.propertyVal(\n          yscale.explicit.domainRaw,\n          'signal',\n          SELECTION_DOMAIN + '{\"field\":\"Miles_per_Gallon\",\"selection\":\"foobar\"}'\n        );\n      });\n    });\n  });\n\n  describe('parseScaleDomain', () => {\n    describe('faceted domains', () => {\n      it('should use cloned subtree', () => {\n        const model = parseModelWithScale({\n          facet: {\n            row: {field: 'symbol', type: 'nominal'}\n          },\n          data: {url: 'foo.csv'},\n          spec: {\n            mark: 'point',\n            encoding: {\n              x: {field: 'a', type: 'quantitative'}\n            }\n          }\n        });\n\n        assert.deepEqual(model.component.scales.x.domains, [\n          {\n            data: 'scale_child_main',\n            field: 'a'\n          }\n        ]);\n      });\n\n      it('should not use cloned subtree if the data is not faceted', () => {\n        const model = parseModelWithScale({\n          facet: {\n            row: {field: 'symbol', type: 'nominal'}\n          },\n          data: {url: 'foo.csv'},\n          spec: {\n            data: {url: 'foo'},\n            mark: 'point',\n            encoding: {\n              x: {field: 'a', type: 'quantitative'}\n            }\n          }\n        });\n\n        assert.deepEqual(model.component.scales.x.domains, [\n          {\n            data: 'child_main',\n            field: 'a'\n          }\n        ]);\n      });\n\n      it('should not use cloned subtree if the scale is independent', () => {\n        const model = parseModelWithScale({\n          facet: {\n            row: {field: 'symbol', type: 'nominal'}\n          },\n          data: {url: 'foo.csv'},\n          spec: {\n            mark: 'point',\n            encoding: {\n              x: {field: 'a', type: 'quantitative'}\n            }\n          },\n          resolve: {\n            scale: {\n              x: 'independent'\n            }\n          }\n        });\n\n        assert.deepEqual(model.children[0].component.scales.x.domains, [\n          {\n            data: 'child_main',\n            field: 'a'\n          }\n        ]);\n      });\n    });\n  });\n});\n"]}