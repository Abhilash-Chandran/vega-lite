{"version":3,"file":"geopoint.test.js","sourceRoot":"","sources":["../../../../test/compile/data/geopoint.test.ts"],"names":[],"mappings":";;AAAA,6BAA4B;AAC5B,+DAAgE;AAChE,+DAAgE;AAChE,0CAAkD;AAElD,mCAA0C;AAE1C,QAAQ,CAAC,uBAAuB,EAAE;IAChC,QAAQ,CAAC,SAAS,EAAE;QAClB,EAAE,CAAC,8CAA8C,EAAE;YACjD,IAAM,KAAK,GAAG,qBAAc,CAAC;gBAC3B,IAAI,EAAE;oBACJ,GAAG,EAAE,mBAAmB;oBACxB,MAAM,EAAE;wBACN,IAAI,EAAE,KAAK;qBACZ;iBACF;gBACD,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE;oBACR,SAAS,EAAE;wBACT,KAAK,EAAE,WAAW;wBAClB,IAAI,EAAE,cAAc;qBACrB;oBACD,QAAQ,EAAE;wBACR,KAAK,EAAE,UAAU;wBACjB,IAAI,EAAE,cAAc;qBACrB;iBACF;aACF,CAAC,CAAC;YACH,KAAK,CAAC,KAAK,EAAE,CAAC;YAEd,IAAM,IAAI,GAAG,IAAI,uBAAY,CAAC,IAAI,CAAC,CAAC;YACpC,uBAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAEnC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;gBAG1B,aAAM,CAAC,UAAU,CAAC,IAAI,EAAE,uBAAY,CAAC,CAAC;gBAEtC,IAAM,SAAS,GAAyB,IAAqB,CAAC,QAAQ,EAAE,CAAC;gBACzE,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;gBACzC,aAAM,CAAC,MAAM,CAAC,YAAK,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE,UAAA,KAAK,IAAI,OAAA,eAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,EAAjC,CAAiC,CAAC,CAAC,CAAC;gBAC5F,aAAM,CAAC,MAAM,CAAC,YAAK,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,UAAA,CAAC,IAAI,OAAA,eAAQ,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC,EAAzB,CAAyB,CAAC,CAAC,CAAC;gBAC/F,aAAM,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;gBACvC,aAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBACzC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC1B,CAAC;YAVD,OAAO,IAAI,IAAI,IAAI;;aAUlB;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {assert} from 'chai';\nimport {DataFlowNode} from '../../../src/compile/data/dataflow';\nimport {GeoPointNode} from '../../../src/compile/data/geopoint';\nimport {contains, every} from '../../../src/util';\nimport {VgGeoPointTransform} from '../../../src/vega.schema';\nimport {parseUnitModel} from '../../util';\n\ndescribe('compile/data/geopoint', () => {\n  describe('geojson', () => {\n    it('should make transform and assemble correctly', () => {\n      const model = parseUnitModel({\n        data: {\n          url: 'data/zipcodes.csv',\n          format: {\n            type: 'csv'\n          }\n        },\n        mark: 'circle',\n        encoding: {\n          longitude: {\n            field: 'longitude',\n            type: 'quantitative'\n          },\n          latitude: {\n            field: 'latitude',\n            type: 'quantitative'\n          }\n        }\n      });\n      model.parse();\n\n      const root = new DataFlowNode(null);\n      GeoPointNode.parseAll(root, model);\n\n      let node = root.children[0];\n\n      while (node != null) {\n        assert.instanceOf(node, GeoPointNode);\n\n        const transform: VgGeoPointTransform = (node as GeoPointNode).assemble();\n        assert.equal(transform.type, 'geopoint');\n        assert.isTrue(every(['longitude', 'latitude'], field => contains(transform.fields, field)));\n        assert.isTrue(every([model.getName('x'), model.getName('y')], a => contains(transform.as, a)));\n        assert.isDefined(transform.projection);\n        assert.isAtMost(node.children.length, 1);\n        node = node.children[0];\n      }\n    });\n  });\n});\n"]}