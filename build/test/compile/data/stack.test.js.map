{"version":3,"file":"stack.test.js","sourceRoot":"","sources":["../../../../test/compile/data/stack.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {DataFlowNode} from './../../../src/compile/data/dataflow';\n/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\n\nimport {StackComponent, StackNode} from '../../../src/compile/data/stack';\nimport {UnitModel} from '../../../src/compile/unit';\nimport {Transform} from '../../../src/transform';\nimport {VgComparatorOrder, VgSort, VgTransform} from '../../../src/vega.schema';\nimport {parseUnitModelWithScale} from '../../util';\n\nfunction parse(model: UnitModel) {\n  return StackNode.makeFromEncoding(null, model).stack;\n}\n\nfunction assemble(model: UnitModel) {\n  return StackNode.makeFromEncoding(null, model).assemble();\n}\ndescribe('compile/data/stack', () => {\n  describe('StackNode.makeFromEncoding', () => {\n    it('should produce correct stack component for bar with color', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {aggregate: 'sum', field: 'a', type: 'quantitative'},\n          y: {field: 'b', type: 'nominal'},\n          color: {field: 'c', type: 'ordinal'}\n        }\n      });\n\n      assert.deepEqual<StackComponent>(parse(model), {\n        dimensionFieldDef: {field: 'b', type: 'nominal'},\n        facetby: [],\n        stackField: 'sum_a',\n        stackby: ['c'],\n        sort: {\n          field: ['c'],\n          order: ['descending']\n        },\n        offset: 'zero',\n        impute: false,\n        as: ['sum_a_start', 'sum_a_end']\n      });\n    });\n\n    it('should produce correct stack component with both start and end of the binned field for bar with color and binned y', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {aggregate: 'sum', field: 'a', type: 'quantitative'},\n          y: {bin: true, field: 'b', type: 'quantitative'},\n          color: {field: 'c', type: 'ordinal'}\n        }\n      });\n\n      assert.deepEqual<StackComponent>(parse(model), {\n        dimensionFieldDef: {bin: {maxbins: 10}, field: 'b', type: 'quantitative'},\n        facetby: [],\n        stackField: 'sum_a',\n        stackby: ['c'],\n        sort: {\n          field: ['c'],\n          order: ['descending']\n        },\n        offset: 'zero',\n        impute: false,\n        as: ['sum_a_start', 'sum_a_end']\n      });\n    });\n\n    it('should produce correct stack component for 1D bar with color', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {aggregate: 'sum', field: 'a', type: 'quantitative'},\n          color: {field: 'c', type: 'ordinal'}\n        }\n      });\n\n      assert.deepEqual<StackComponent>(parse(model), {\n        dimensionFieldDef: undefined,\n        facetby: [],\n        stackField: 'sum_a',\n        stackby: ['c'],\n        sort: {\n          field: ['c'],\n          order: ['descending']\n        },\n        offset: 'zero',\n        impute: false,\n        as: ['sum_a_start', 'sum_a_end']\n      });\n\n      assert.deepEqual<VgTransform[]>(assemble(model), [\n        {\n          type: 'stack',\n          groupby: [],\n          field: 'sum_a',\n          sort: {\n            field: ['c'],\n            order: ['descending']\n          },\n          as: ['sum_a_start', 'sum_a_end'],\n          offset: 'zero'\n        }\n      ]);\n    });\n\n    it('should produce correct stack component for area with color and order', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'area',\n        encoding: {\n          x: {aggregate: 'sum', field: 'a', type: 'quantitative'},\n          y: {field: 'b', type: 'nominal'},\n          color: {field: 'c', type: 'nominal'},\n          order: {aggregate: 'mean', field: 'd', type: 'quantitative'}\n        }\n      });\n\n      assert.deepEqual<StackComponent>(parse(model), {\n        dimensionFieldDef: {field: 'b', type: 'nominal'},\n        facetby: [],\n        stackField: 'sum_a',\n        stackby: ['c'],\n        sort: {\n          field: ['mean_d'],\n          order: ['ascending']\n        },\n        offset: 'zero',\n        impute: true,\n        as: ['sum_a_start', 'sum_a_end']\n      });\n\n      assert.deepEqual<VgTransform[]>(assemble(model), [\n        {\n          type: 'impute',\n          field: 'sum_a',\n          groupby: ['c'],\n          key: 'b',\n          method: 'value',\n          value: 0\n        },\n        {\n          type: 'stack',\n          groupby: ['b'],\n          field: 'sum_a',\n          sort: {\n            field: ['mean_d'],\n            order: ['ascending']\n          },\n          as: ['sum_a_start', 'sum_a_end'],\n          offset: 'zero'\n        }\n      ]);\n    });\n\n    it('should produce correct stack component for area with color and binned dimension', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'area',\n        encoding: {\n          x: {aggregate: 'sum', field: 'a', type: 'quantitative'},\n          y: {bin: true, field: 'b', type: 'quantitative'},\n          color: {field: 'c', type: 'nominal'}\n        }\n      });\n\n      assert.deepEqual<StackComponent>(parse(model), {\n        dimensionFieldDef: {bin: {maxbins: 10}, field: 'b', type: 'quantitative'},\n        facetby: [],\n        stackField: 'sum_a',\n        stackby: ['c'],\n        sort: {\n          field: ['c'],\n          order: ['descending']\n        },\n        offset: 'zero',\n        impute: true,\n        as: ['sum_a_start', 'sum_a_end']\n      });\n\n      assert.deepEqual<VgTransform[]>(assemble(model), [\n        {\n          type: 'formula',\n          expr: '(datum[\"bin_maxbins_10_b\"]+datum[\"bin_maxbins_10_b_end\"])/2',\n          as: 'bin_maxbins_10_b_mid'\n        },\n        {\n          type: 'impute',\n          field: 'sum_a',\n          groupby: ['c'],\n          key: 'bin_maxbins_10_b_mid',\n          method: 'value',\n          value: 0\n        },\n        {\n          type: 'stack',\n          groupby: ['bin_maxbins_10_b_mid'],\n          field: 'sum_a',\n          sort: {\n            field: ['c'],\n            order: ['descending']\n          },\n          as: ['sum_a_start', 'sum_a_end'],\n          offset: 'zero'\n        }\n      ]);\n    });\n  });\n\n  describe('StackNode.makeFromTransform', () => {\n    it('should fill in offset and sort properly', () => {\n      const transform: Transform = {\n        stack: 'people',\n        groupby: ['age'],\n        as: ['v1', 'v2']\n      };\n      const stack = StackNode.makeFromTransform(null, transform);\n      assert.deepEqual<VgTransform[]>(stack.assemble(), [\n        {\n          type: 'stack',\n          groupby: ['age'],\n          field: 'people',\n          offset: 'zero',\n          sort: {field: [] as string[], order: [] as VgComparatorOrder[]} as VgSort,\n          as: ['v1', 'v2']\n        }\n      ]);\n    });\n\n    it('should fill in partial \"as\" field properly', () => {\n      const transform: Transform = {\n        stack: 'people',\n        groupby: ['age', 'gender'],\n        offset: 'normalize',\n        as: 'val'\n      };\n      const stack = StackNode.makeFromTransform(null, transform);\n      assert.deepEqual<VgTransform[]>(stack.assemble(), [\n        {\n          type: 'stack',\n          groupby: ['age', 'gender'],\n          field: 'people',\n          offset: 'normalize',\n          sort: {field: [] as string[], order: [] as VgComparatorOrder[]} as VgSort,\n          as: ['val', 'val_end']\n        }\n      ]);\n    });\n\n    it('should handle complete \"sort\"', () => {\n      const transform: Transform = {\n        stack: 'people',\n        groupby: ['age', 'gender'],\n        offset: 'normalize',\n        sort: [{field: 'height', order: 'ascending'}, {field: 'weight', order: 'descending'}],\n        as: 'val'\n      };\n      const stack = StackNode.makeFromTransform(null, transform);\n      assert.deepEqual<VgTransform[]>(stack.assemble(), [\n        {\n          type: 'stack',\n          groupby: ['age', 'gender'],\n          field: 'people',\n          offset: 'normalize',\n          sort: {field: ['height', 'weight'], order: ['ascending', 'descending']},\n          as: ['val', 'val_end']\n        }\n      ]);\n    });\n\n    it('should handle incomplete \"sort\" field', () => {\n      const transform: Transform = {\n        stack: 'people',\n        groupby: ['age', 'gender'],\n        offset: 'normalize',\n        sort: [{field: 'height'}],\n        as: 'val'\n      };\n      const stack = StackNode.makeFromTransform(null, transform);\n\n      assert.deepEqual<VgTransform[]>(stack.assemble(), [\n        {\n          type: 'stack',\n          groupby: ['age', 'gender'],\n          field: 'people',\n          offset: 'normalize',\n          sort: {field: ['height'], order: ['ascending']},\n          as: ['val', 'val_end']\n        }\n      ]);\n    });\n  });\n  describe('StackNode.producedFields', () => {\n    it('should give producedfields correctly', () => {\n      const transform: Transform = {\n        stack: 'people',\n        groupby: ['age'],\n        as: 'people'\n      };\n      const stack = StackNode.makeFromTransform(null, transform);\n      assert.deepEqual(stack.producedFields(), {\n        people: true,\n        people_end: true\n      });\n    });\n\n    it('should give producedFields correctly when in encoding channel', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {aggregate: 'sum', field: 'a', type: 'quantitative'},\n          y: {field: 'b', type: 'nominal'},\n          color: {field: 'c', type: 'ordinal'}\n        }\n      });\n      const stack = StackNode.makeFromEncoding(null, model);\n      assert.deepEqual(stack.producedFields(), {\n        sum_a_start: true,\n        sum_a_end: true\n      });\n    });\n\n    it('should generate the correct hash', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {aggregate: 'sum', field: 'a', type: 'quantitative'},\n          y: {field: 'b', type: 'nominal'},\n          color: {field: 'c', type: 'ordinal'}\n        }\n      });\n      const stack = StackNode.makeFromEncoding(null, model);\n      assert.deepEqual(\n        stack.hash(),\n        'Stack {\"as\":[\"sum_a_start\",\"sum_a_end\"],\"dimensionFieldDef\":{\"field\":\"b\",\"type\":\"nominal\"},\"facetby\":[],\"impute\":false,\"offset\":\"zero\",\"sort\":{\"field\":[\"c\"],\"order\":[\"descending\"]},\"stackField\":\"sum_a\",\"stackby\":[\"c\"]}'\n      );\n    });\n\n    it('should never clone parent', () => {\n      const parent = new DataFlowNode(null);\n      const stack = new StackNode(parent, null);\n      expect(stack.clone().parent).toBeNull();\n    });\n  });\n});\n"]}