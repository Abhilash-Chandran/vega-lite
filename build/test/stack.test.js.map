{"version":3,"file":"stack.test.js","sourceRoot":"","sources":["../../test/stack.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport {AggregateOp} from 'vega';\n\nimport {DETAIL, X, Y} from '../src/channel';\nimport * as log from '../src/log';\nimport {AREA, BAR, PRIMITIVE_MARKS, RECT} from '../src/mark';\nimport {ScaleType} from '../src/scale';\nimport {isStacked, NormalizedUnitSpec, TopLevel} from '../src/spec';\nimport {stack, STACK_BY_DEFAULT_MARKS, STACKABLE_MARKS, StackOffset} from '../src/stack';\n\ndescribe('stack', () => {\n  const NON_STACKABLE_MARKS = [RECT];\n\n  it('should be disabled for non-stackable marks with at least of of the stack channel', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize', null, 'none'] as StackOffset[]) {\n      NON_STACKABLE_MARKS.forEach(nonStackableMark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          data: {url: 'data/barley.json'},\n          mark: nonStackableMark,\n          encoding: {\n            x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n            y: {field: 'variety', type: 'nominal'},\n            color: {field: 'site', type: 'nominal'}\n          },\n          config: {\n            stack: stacked\n          }\n        };\n        expect(stack(spec.mark, spec.encoding, spec.config.stack)).toBeNull();\n        expect(isStacked(spec)).toBe(false);\n      });\n    }\n  });\n\n  it('should be allowed for raw plot', () => {\n    STACKABLE_MARKS.forEach(mark => {\n      const spec: TopLevel<NormalizedUnitSpec> = {\n        data: {url: 'data/barley.json'},\n        mark: mark,\n        encoding: {\n          x: {field: 'yield', type: 'quantitative', stack: 'zero'},\n          y: {field: 'variety', type: 'nominal'},\n          color: {field: 'site', type: 'nominal'}\n        }\n      };\n      const stackProps = stack(spec.mark, spec.encoding, undefined);\n      expect(stackProps.fieldChannel).toEqual('x');\n      expect(isStacked(spec)).toBe(true);\n    });\n  });\n\n  it('should prioritize axis with stack', () => {\n    STACKABLE_MARKS.forEach(mark => {\n      const spec: TopLevel<NormalizedUnitSpec> = {\n        data: {url: 'data/barley.json'},\n        mark: mark,\n        encoding: {\n          x: {field: 'yield', type: 'quantitative', stack: 'zero'},\n          y: {field: 'variety', type: 'quantitative'},\n          color: {field: 'site', type: 'nominal'}\n        }\n      };\n      const stackProps = stack(spec.mark, spec.encoding, undefined);\n      expect(stackProps.fieldChannel).toEqual('x');\n      expect(isStacked(spec)).toBe(true);\n    });\n  });\n\n  it('should always be disabled if there is no stackby channel', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize', null, 'none'] as StackOffset[]) {\n      PRIMITIVE_MARKS.forEach(mark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          data: {url: 'data/barley.json'},\n          mark: mark,\n          encoding: {\n            x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n            y: {field: 'variety', type: 'nominal'}\n          },\n          config: {\n            stack: stacked\n          }\n        };\n        expect(stack(spec.mark, spec.encoding, spec.config.stack)).toBeNull();\n        expect(isStacked(spec)).toBe(false);\n      });\n    }\n  });\n\n  it('should always be disabled if the stackby channel is aggregated', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize', null, 'none'] as StackOffset[]) {\n      PRIMITIVE_MARKS.forEach(mark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          data: {url: 'data/barley.json'},\n          mark: mark,\n          encoding: {\n            x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n            y: {field: 'variety', type: 'nominal'},\n            color: {aggregate: 'count', type: 'quantitative'}\n          },\n          config: {\n            stack: stacked\n          }\n        };\n        expect(stack(spec.mark, spec.encoding, spec.config.stack)).toBeNull();\n        expect(isStacked(spec)).toBe(false);\n      });\n    }\n  });\n\n  it('should always be disabled if the stackby channel is identical to y', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize', null, 'none'] as StackOffset[]) {\n      PRIMITIVE_MARKS.forEach(mark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          data: {url: 'data/barley.json'},\n          mark: mark,\n          encoding: {\n            x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n            y: {field: 'variety', type: 'nominal'},\n            color: {field: 'variety', type: 'nominal'}\n          },\n          config: {\n            stack: stacked\n          }\n        };\n        expect(stack(spec.mark, spec.encoding, spec.config.stack)).toBeNull();\n        expect(isStacked(spec)).toBe(false);\n      });\n    }\n  });\n\n  it('can enabled if one of the stackby channels is not aggregated', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize'] as StackOffset[]) {\n      const marks = stacked === undefined ? STACK_BY_DEFAULT_MARKS : STACKABLE_MARKS;\n      marks.forEach(mark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          data: {url: 'data/barley.json'},\n          mark: mark,\n          encoding: {\n            x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n            y: {field: 'variety', type: 'nominal'},\n            color: {aggregate: 'count', type: 'quantitative'},\n            detail: {field: 'site', type: 'nominal'}\n          },\n          config: {\n            stack: stacked\n          }\n        };\n        const _stack = stack(spec.mark, spec.encoding, spec.config.stack);\n        expect(_stack).toBeTruthy();\n        expect(isStacked(spec)).toBe(true);\n        expect(_stack.stackBy[0].channel).toEqual(DETAIL);\n      });\n    }\n  });\n\n  it('can enabled if one of the stackby channels is not aggregated', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize'] as StackOffset[]) {\n      const marks = stacked === undefined ? STACK_BY_DEFAULT_MARKS : STACKABLE_MARKS;\n      marks.forEach(mark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          data: {url: 'data/barley.json'},\n          mark: mark,\n          encoding: {\n            x: {aggregate: 'sum', field: 'yield', type: 'quantitative', stack: stacked},\n            y: {field: 'variety', type: 'nominal'},\n            color: {aggregate: 'count', type: 'quantitative'},\n            detail: {field: 'site', type: 'nominal'}\n          }\n        };\n\n        const _stack = stack(spec.mark, spec.encoding, undefined);\n        expect(_stack).toBeTruthy();\n        expect(isStacked(spec)).toBe(true);\n        expect(_stack.stackBy[0].channel).toEqual(DETAIL);\n      });\n    }\n  });\n\n  it('should always be disabled if both x and y are aggregate', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize', null, 'none'] as StackOffset[]) {\n      PRIMITIVE_MARKS.forEach(mark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          data: {url: 'data/barley.json'},\n          mark: mark,\n          encoding: {\n            x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n            y: {aggregate: 'count', type: 'quantitative'},\n            color: {field: 'site', type: 'nominal'}\n          },\n          config: {\n            stack: stacked\n          }\n        };\n        expect(stack(spec.mark, spec.encoding, spec.config.stack)).toBeNull();\n        expect(isStacked(spec)).toBe(false);\n      });\n    }\n  });\n\n  it('should always be disabled if neither x nor y is aggregate or stack', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize', null, 'none'] as StackOffset[]) {\n      PRIMITIVE_MARKS.forEach(mark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          data: {url: 'data/barley.json'},\n          mark: mark,\n          encoding: {\n            x: {field: 'variety', type: 'nominal'},\n            y: {field: 'variety', type: 'nominal'},\n            color: {field: 'site', type: 'nominal'}\n          },\n          config: {\n            stack: stacked\n          }\n        };\n        expect(stack(spec.mark, spec.encoding, spec.config.stack)).toBeNull();\n        expect(isStacked(spec)).toBe(false);\n      });\n    }\n  });\n\n  it('should always be disabled if there is both x and x2', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize'] as StackOffset[]) {\n      const marks = stacked === undefined ? STACK_BY_DEFAULT_MARKS : STACKABLE_MARKS;\n      marks.forEach(mark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          mark: mark,\n          encoding: {\n            x: {field: 'a', type: 'quantitative', aggregate: 'sum'},\n            x2: {field: 'a', type: 'quantitative', aggregate: 'sum'},\n            y: {field: 'variety', type: 'nominal'},\n            color: {field: 'site', type: 'nominal'}\n          },\n          config: {\n            stack: stacked\n          }\n        };\n        expect(stack(spec.mark, spec.encoding, spec.config.stack)).toBeNull();\n        expect(isStacked(spec)).toBe(false);\n      });\n    }\n  });\n\n  it('should always be disabled if there is both y and y2', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize'] as StackOffset[]) {\n      const marks = stacked === undefined ? STACK_BY_DEFAULT_MARKS : STACKABLE_MARKS;\n      marks.forEach(mark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          mark: mark,\n          encoding: {\n            y: {field: 'a', type: 'quantitative', aggregate: 'sum'},\n            y2: {field: 'a', type: 'quantitative', aggregate: 'sum'},\n            x: {field: 'variety', type: 'nominal'},\n            color: {field: 'site', type: 'nominal'}\n          },\n          config: {\n            stack: stacked\n          }\n        };\n        expect(stack(spec.mark, spec.encoding, spec.config.stack)).toBeNull();\n        expect(isStacked(spec)).toBe(false);\n      });\n    }\n  });\n\n  it(\n    'should always be warned if the aggregated axis has non-linear scale',\n    log.wrap(localLogger => {\n      for (const stacked of [undefined, 'center', 'zero', 'normalize'] as StackOffset[]) {\n        [ScaleType.LOG, ScaleType.POW, ScaleType.SQRT].forEach(scaleType => {\n          const marks = stacked === undefined ? STACK_BY_DEFAULT_MARKS : STACKABLE_MARKS;\n          marks.forEach(mark => {\n            const spec: TopLevel<NormalizedUnitSpec> = {\n              data: {url: 'data/barley.json'},\n              mark: mark,\n              encoding: {\n                x: {field: 'a', type: 'quantitative', aggregate: 'sum', scale: {type: scaleType}},\n                y: {field: 'variety', type: 'nominal'},\n                color: {field: 'site', type: 'nominal'}\n              },\n              config: {\n                stack: stacked\n              }\n            };\n            expect(stack(spec.mark, spec.encoding, spec.config.stack)).not.toBeNull();\n            expect(isStacked(spec)).toBe(true);\n            const warns = localLogger.warns;\n            expect(warns[warns.length - 1]).toEqual(log.message.cannotStackNonLinearScale(scaleType));\n          });\n        });\n      }\n    })\n  );\n\n  it(\n    'should throws warning if the aggregated axis has a non-summative aggregate',\n    log.wrap(localLogger => {\n      for (const stackOffset of [undefined, 'center', 'zero', 'normalize'] as StackOffset[]) {\n        for (const aggregate of ['average', 'variance', 'q3'] as AggregateOp[]) {\n          const marks = stackOffset === undefined ? STACK_BY_DEFAULT_MARKS : STACKABLE_MARKS;\n          marks.forEach(mark => {\n            const spec: TopLevel<NormalizedUnitSpec> = {\n              data: {url: 'data/barley.json'},\n              mark: mark,\n              encoding: {\n                x: {\n                  aggregate,\n                  stack: stackOffset,\n                  field: 'a',\n                  type: 'quantitative'\n                },\n                y: {field: 'variety', type: 'nominal'},\n                color: {field: 'site', type: 'nominal'}\n              }\n            };\n            expect(isStacked(spec)).toBe(true);\n            const warns = localLogger.warns;\n            expect(warns[warns.length - 1]).toEqual(log.message.stackNonSummativeAggregate(aggregate));\n          });\n        }\n      }\n    })\n  );\n\n  describe('stack().groupbyChannel, .fieldChannel', () => {\n    it('should be correct for horizontal', () => {\n      [BAR, AREA].forEach(stackableMark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          data: {url: 'data/barley.json'},\n          mark: stackableMark,\n          encoding: {\n            x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n            y: {field: 'variety', type: 'nominal'},\n            color: {field: 'site', type: 'nominal'}\n          }\n        };\n        const _stack = stack(spec.mark, spec.encoding, undefined);\n        expect(_stack.fieldChannel).toBe(X);\n        expect(_stack.groupbyChannel).toBe(Y);\n        expect(isStacked(spec)).toBe(true);\n      });\n    });\n\n    it('should be correct for horizontal (single)', () => {\n      [BAR, AREA].forEach(stackableMark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          data: {url: 'data/barley.json'},\n          mark: stackableMark,\n          encoding: {\n            x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n            color: {field: 'site', type: 'nominal'}\n          }\n        };\n        const _stack = stack(spec.mark, spec.encoding, undefined);\n        expect(_stack.fieldChannel).toBe(X);\n        expect(_stack.groupbyChannel).toBeUndefined();\n        expect(isStacked(spec)).toBe(true);\n      });\n    });\n\n    it('should be correct for vertical', () => {\n      [BAR, AREA].forEach(stackableMark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          data: {url: 'data/barley.json'},\n          mark: stackableMark,\n          encoding: {\n            y: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n            x: {field: 'variety', type: 'nominal'},\n            color: {field: 'site', type: 'nominal'}\n          }\n        };\n        const _stack = stack(spec.mark, spec.encoding, undefined);\n        expect(_stack.fieldChannel).toBe(Y);\n        expect(_stack.groupbyChannel).toBe(X);\n        expect(isStacked(spec)).toBe(true);\n      });\n    });\n\n    it('should be correct for vertical (single)', () => {\n      [BAR, AREA].forEach(stackableMark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          data: {url: 'data/barley.json'},\n          mark: stackableMark,\n          encoding: {\n            y: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n            color: {field: 'site', type: 'nominal'}\n          }\n        };\n        const _stack = stack(spec.mark, spec.encoding, undefined);\n        expect(_stack.fieldChannel).toBe(Y);\n        expect(_stack.groupbyChannel).toBeUndefined();\n        expect(isStacked(spec)).toBe(true);\n      });\n    });\n  });\n\n  describe('stack().offset', () => {\n    it('should be zero for stackable marks with at least of of the stack channel if stacked is unspecified', () => {\n      [BAR, AREA].forEach(stackableMark => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          data: {url: 'data/barley.json'},\n          mark: stackableMark,\n          encoding: {\n            x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n            y: {field: 'variety', type: 'nominal'},\n            color: {field: 'site', type: 'nominal'}\n          }\n        };\n        expect(stack(spec.mark, spec.encoding, undefined).offset).toBe('zero');\n        expect(isStacked(spec)).toBe(true);\n      });\n    });\n\n    it('should be the specified stacked for stackable marks with at least one of the stack channel', () => {\n      for (const stacked of ['center', 'zero', 'normalize'] as StackOffset[]) {\n        [BAR, AREA].forEach(stackableMark => {\n          const spec: TopLevel<NormalizedUnitSpec> = {\n            data: {url: 'data/barley.json'},\n            mark: stackableMark,\n            encoding: {\n              x: {aggregate: 'sum', field: 'yield', type: 'quantitative'},\n              y: {field: 'variety', type: 'nominal'},\n              color: {field: 'site', type: 'nominal'}\n            },\n            config: {\n              stack: stacked\n            }\n          };\n          expect(stack(spec.mark, spec.encoding, spec.config.stack).offset).toEqual(stacked);\n          expect(isStacked(spec)).toBe(true);\n        });\n      }\n    });\n  });\n});\n"]}