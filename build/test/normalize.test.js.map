{"version":3,"file":"normalize.test.js","sourceRoot":"","sources":["../../test/normalize.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport {assert} from 'chai';\nimport {defaultConfig, initConfig} from '../src/config';\nimport * as log from '../src/log';\nimport {LocalLogger} from '../src/log';\nimport {normalize, NormalizedSpec, TopLevel, TopLevelSpec} from '../src/spec';\n\n// describe('isStacked()') -- tested as part of stackOffset in stack.test.ts\n\ndescribe('normalize()', () => {\n  describe('normalizeFacetedUnit', () => {\n    it('should convert single extended spec with column into a composite spec', () => {\n      const spec: any = {\n        name: 'faceted',\n        width: 123,\n        height: 234,\n        description: 'faceted spec',\n        data: {url: 'data/movies.json'},\n        mark: 'point',\n        encoding: {\n          column: {field: 'MPAA_Rating', type: 'ordinal'},\n          x: {field: 'Worldwide_Gross', type: 'quantitative'},\n          y: {field: 'US_DVD_Sales', type: 'quantitative'}\n        }\n      };\n      const config = initConfig(spec.config);\n      assert.deepEqual(normalize(spec, config), {\n        name: 'faceted',\n        description: 'faceted spec',\n        data: {url: 'data/movies.json'},\n        facet: {\n          column: {field: 'MPAA_Rating', type: 'ordinal'}\n        },\n        spec: {\n          mark: 'point',\n          width: 123,\n          height: 234,\n          encoding: {\n            x: {field: 'Worldwide_Gross', type: 'quantitative'},\n            y: {field: 'US_DVD_Sales', type: 'quantitative'}\n          }\n        }\n      });\n    });\n\n    it('should convert single extended spec with row into a composite spec', () => {\n      const spec: any = {\n        data: {url: 'data/movies.json'},\n        mark: 'point',\n        encoding: {\n          row: {field: 'MPAA_Rating', type: 'ordinal'},\n          x: {field: 'Worldwide_Gross', type: 'quantitative'},\n          y: {field: 'US_DVD_Sales', type: 'quantitative'}\n        }\n      };\n\n      const config = initConfig(spec.config);\n      assert.deepEqual(normalize(spec, config), {\n        data: {url: 'data/movies.json'},\n        facet: {\n          row: {field: 'MPAA_Rating', type: 'ordinal'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'Worldwide_Gross', type: 'quantitative'},\n            y: {field: 'US_DVD_Sales', type: 'quantitative'}\n          }\n        }\n      });\n    });\n  });\n\n  describe('normalizeFacet', () => {\n    it('should produce correct layered specs for mean point and vertical error bar', () => {\n      assert.deepEqual(\n        normalize(\n          {\n            description:\n              'A error bar plot showing mean, min, and max in the US population distribution of age groups in 2000.',\n            data: {url: 'data/population.json'},\n            transform: [{calculate: \"(datum.sex==1) ? 'Men':'Women'\", as: 'sex'}],\n            facet: {row: {field: 'sex', type: 'ordinal'}},\n            spec: {\n              layer: [\n                {\n                  mark: 'errorbar',\n                  encoding: {\n                    x: {field: 'age', type: 'ordinal'},\n                    y: {field: 'people', type: 'quantitative'}\n                  }\n                },\n                {\n                  mark: {type: 'point', opacity: 1, filled: true},\n                  encoding: {\n                    x: {field: 'age', type: 'ordinal'},\n                    y: {field: 'people', type: 'quantitative', aggregate: 'mean'}\n                  }\n                }\n              ]\n            }\n          },\n          defaultConfig\n        ),\n        {\n          description:\n            'A error bar plot showing mean, min, and max in the US population distribution of age groups in 2000.',\n          data: {\n            url: 'data/population.json'\n          },\n          transform: [\n            {\n              calculate: \"(datum.sex==1) ? 'Men':'Women'\",\n              as: 'sex'\n            }\n          ],\n          facet: {\n            row: {\n              field: 'sex',\n              type: 'ordinal'\n            }\n          },\n          spec: {\n            layer: [\n              {\n                transform: [\n                  {\n                    aggregate: [\n                      {op: 'stderr', field: 'people', as: 'extent_people'},\n                      {op: 'mean', field: 'people', as: 'center_people'}\n                    ],\n                    groupby: ['age']\n                  },\n                  {\n                    calculate: 'datum.center_people + datum.extent_people',\n                    as: 'upper_people'\n                  },\n                  {\n                    calculate: 'datum.center_people - datum.extent_people',\n                    as: 'lower_people'\n                  }\n                ],\n                layer: [\n                  {\n                    mark: {type: 'rule', style: 'errorbar-rule'},\n                    encoding: {\n                      y: {\n                        field: 'lower_people',\n                        type: 'quantitative',\n                        title: 'people'\n                      },\n                      y2: {field: 'upper_people', type: 'quantitative'},\n                      x: {field: 'age', type: 'ordinal', title: 'age'}\n                    }\n                  }\n                ]\n              },\n              {\n                mark: {type: 'point', opacity: 1, filled: true},\n                encoding: {\n                  x: {field: 'age', type: 'ordinal'},\n                  y: {field: 'people', type: 'quantitative', aggregate: 'mean'}\n                }\n              }\n            ]\n          }\n        }\n      );\n    });\n  });\n\n  describe('normalizeLayer', () => {\n    it('correctly passes shared projection and encoding to children of layer', () => {\n      const output = normalize(\n        {\n          data: {url: 'data/population.json'},\n          projection: {type: 'mercator'},\n          encoding: {\n            x: {field: 'age', type: 'ordinal'}\n          },\n          layer: [\n            {mark: 'point'},\n            {\n              layer: [\n                {mark: 'rule'},\n                {\n                  mark: 'text',\n                  encoding: {\n                    text: {field: 'a', type: 'nominal'}\n                  }\n                }\n              ]\n            }\n          ]\n        },\n        defaultConfig\n      );\n\n      assert.deepEqual(output, {\n        data: {url: 'data/population.json'},\n        layer: [\n          {\n            projection: {type: 'mercator'},\n            mark: 'point',\n            encoding: {\n              x: {field: 'age', type: 'ordinal'}\n            }\n          },\n          {\n            layer: [\n              {\n                projection: {type: 'mercator'},\n                mark: 'rule',\n                encoding: {\n                  x: {field: 'age', type: 'ordinal'}\n                }\n              },\n              {\n                projection: {type: 'mercator'},\n                mark: 'text',\n                encoding: {\n                  x: {field: 'age', type: 'ordinal'},\n                  text: {field: 'a', type: 'nominal'}\n                }\n              }\n            ]\n          }\n        ]\n      });\n    });\n\n    it(\n      'correctly overrides shared projection and encoding and throws warnings',\n      log.wrap((localLogger: LocalLogger) => {\n        const output = normalize(\n          {\n            data: {url: 'data/population.json'},\n            projection: {type: 'mercator'},\n            encoding: {\n              x: {field: 'age', type: 'ordinal'}\n            },\n            layer: [\n              {\n                projection: {type: 'albersUsa'},\n                mark: 'rule'\n              },\n              {\n                mark: 'text',\n                encoding: {\n                  x: {field: 'a', type: 'nominal'}\n                }\n              }\n            ]\n          },\n          defaultConfig\n        );\n\n        assert.equal(localLogger.warns.length, 2);\n\n        assert.equal(\n          localLogger.warns[0],\n          log.message.projectionOverridden({\n            parentProjection: {type: 'mercator'},\n            projection: {type: 'albersUsa'}\n          })\n        );\n\n        assert.equal(localLogger.warns[1], log.message.encodingOverridden(['x']));\n\n        assert.deepEqual(output, {\n          data: {url: 'data/population.json'},\n          layer: [\n            {\n              projection: {type: 'albersUsa'},\n              mark: 'rule',\n              encoding: {\n                x: {field: 'age', type: 'ordinal'}\n              }\n            },\n            {\n              projection: {type: 'mercator'},\n              mark: 'text',\n              encoding: {\n                x: {field: 'a', type: 'nominal'}\n              }\n            }\n          ]\n        });\n      })\n    );\n  });\n\n  describe('normalizePathOverlay', () => {\n    it('correctly normalizes line with overlayed point.', () => {\n      const spec: TopLevelSpec = {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        mark: 'line',\n        encoding: {\n          x: {field: 'date', type: 'temporal'},\n          y: {field: 'price', type: 'quantitative'}\n        },\n        config: {line: {point: {}}}\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        layer: [\n          {\n            mark: 'line',\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          },\n          {\n            mark: {type: 'point', opacity: 1, filled: true},\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          }\n        ],\n        config: {line: {point: {}}}\n      });\n    });\n\n    it('correctly normalizes line with transparent point overlayed.', () => {\n      const spec: TopLevelSpec = {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        mark: {type: 'line', point: 'transparent'},\n        encoding: {\n          x: {field: 'date', type: 'temporal'},\n          y: {field: 'price', type: 'quantitative'}\n        }\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        layer: [\n          {\n            mark: 'line',\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          },\n          {\n            mark: {type: 'point', opacity: 0, filled: true},\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          }\n        ]\n      });\n    });\n\n    it('correctly normalizes line with point overlayed via mark definition.', () => {\n      const spec: TopLevelSpec = {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        mark: {type: 'line', point: {color: 'red'}},\n        encoding: {\n          x: {field: 'date', type: 'temporal'},\n          y: {field: 'price', type: 'quantitative'}\n        }\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        layer: [\n          {\n            mark: 'line',\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          },\n          {\n            mark: {type: 'point', opacity: 1, filled: true, color: 'red'},\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          }\n        ]\n      });\n    });\n\n    it('correctly normalizes faceted line plots with overlayed point.', () => {\n      const spec: TopLevelSpec = {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        mark: 'line',\n        encoding: {\n          row: {field: 'symbol', type: 'nominal'},\n          x: {field: 'date', type: 'temporal'},\n          y: {field: 'price', type: 'quantitative'}\n        },\n        config: {line: {point: {}}}\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        facet: {\n          row: {field: 'symbol', type: 'nominal'}\n        },\n        spec: {\n          layer: [\n            {\n              mark: 'line',\n              encoding: {\n                x: {field: 'date', type: 'temporal'},\n                y: {field: 'price', type: 'quantitative'}\n              }\n            },\n            {\n              mark: {type: 'point', opacity: 1, filled: true},\n              encoding: {\n                x: {field: 'date', type: 'temporal'},\n                y: {field: 'price', type: 'quantitative'}\n              }\n            }\n          ]\n        },\n        config: {line: {point: {}}}\n      });\n    });\n\n    it('correctly normalizes area with overlay line and point', () => {\n      const spec: TopLevelSpec = {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        mark: 'area',\n        encoding: {\n          x: {field: 'date', type: 'temporal'},\n          y: {field: 'price', type: 'quantitative'}\n        },\n        config: {area: {line: {}, point: {}}}\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        layer: [\n          {\n            mark: {type: 'area', opacity: 0.7},\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          },\n          {\n            mark: {type: 'line'},\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          },\n          {\n            mark: {type: 'point', opacity: 1, filled: true},\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          }\n        ],\n        config: {area: {line: {}, point: {}}}\n      });\n    });\n\n    it('correctly normalizes interpolated area with overlay line', () => {\n      const spec: TopLevelSpec = {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        mark: {type: 'area', interpolate: 'monotone'},\n        encoding: {\n          x: {field: 'date', type: 'temporal'},\n          y: {field: 'price', type: 'quantitative'}\n        },\n        config: {area: {line: {}}}\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        layer: [\n          {\n            mark: {type: 'area', opacity: 0.7, interpolate: 'monotone'},\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          },\n          {\n            mark: {type: 'line', interpolate: 'monotone'},\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {field: 'price', type: 'quantitative'}\n            }\n          }\n        ],\n        config: {area: {line: {}}}\n      });\n    });\n\n    it('correctly normalizes area with disabled overlay point and line.', () => {\n      for (const overlay of [null, false]) {\n        const spec: TopLevelSpec = {\n          data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n          mark: {type: 'area', point: overlay, line: overlay},\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        };\n        const normalizedSpec = normalize(spec, spec.config);\n        assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n          data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n          mark: 'area',\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          }\n        });\n      }\n    });\n\n    it('correctly normalizes area with overlay point and line disabled in config.', () => {\n      for (const overlay of [null, false]) {\n        const spec: TopLevelSpec = {\n          data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n          mark: {type: 'area'},\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          },\n          config: {\n            area: {point: overlay, line: overlay}\n          }\n        };\n        const normalizedSpec = normalize(spec, spec.config);\n        assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n          data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n          mark: 'area',\n          encoding: {\n            x: {field: 'date', type: 'temporal'},\n            y: {field: 'price', type: 'quantitative'}\n          },\n          config: {\n            area: {point: overlay, line: overlay}\n          }\n        });\n      }\n    });\n\n    it('correctly normalizes stacked area with overlay line', () => {\n      const spec: TopLevelSpec = {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        mark: 'area',\n        encoding: {\n          x: {field: 'date', type: 'temporal'},\n          y: {aggregate: 'sum', field: 'price', type: 'quantitative'},\n          color: {field: 'symbol', type: 'nominal'}\n        },\n        config: {area: {line: {}}}\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        layer: [\n          {\n            mark: {type: 'area', opacity: 0.7},\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {aggregate: 'sum', field: 'price', type: 'quantitative'},\n              color: {field: 'symbol', type: 'nominal'}\n            }\n          },\n          {\n            mark: {type: 'line'},\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {aggregate: 'sum', field: 'price', type: 'quantitative', stack: 'zero'},\n              color: {field: 'symbol', type: 'nominal'}\n            }\n          }\n        ],\n        config: {area: {line: {}}}\n      });\n    });\n\n    it('correctly normalizes streamgraph with overlay line', () => {\n      const spec: TopLevelSpec = {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        mark: 'area',\n        encoding: {\n          x: {field: 'date', type: 'temporal'},\n          y: {aggregate: 'sum', field: 'price', type: 'quantitative', stack: 'center'},\n          color: {field: 'symbol', type: 'nominal'}\n        },\n        config: {area: {line: {}}}\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        data: {url: 'data/stocks.csv', format: {type: 'csv'}},\n        layer: [\n          {\n            mark: {type: 'area', opacity: 0.7},\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {aggregate: 'sum', field: 'price', type: 'quantitative', stack: 'center'},\n              color: {field: 'symbol', type: 'nominal'}\n            }\n          },\n          {\n            mark: {type: 'line'},\n            encoding: {\n              x: {field: 'date', type: 'temporal'},\n              y: {aggregate: 'sum', field: 'price', type: 'quantitative', stack: 'center'},\n              color: {field: 'symbol', type: 'nominal'}\n            }\n          }\n        ],\n        config: {area: {line: {}}}\n      });\n    });\n  });\n\n  describe('normalizeRangedUnitSpec', () => {\n    it('should convert y2 -> y if there is no y in the encoding', () => {\n      const spec: NormalizedSpec = {\n        data: {url: 'data/population.json'},\n        mark: 'rule',\n        encoding: {\n          y2: {field: 'age', type: 'ordinal'},\n          x: {aggregate: 'min', field: 'people', type: 'quantitative'},\n          x2: {aggregate: 'max', field: 'people', type: 'quantitative'}\n        }\n      };\n\n      assert.deepEqual<NormalizedSpec>(normalize(spec, defaultConfig), {\n        data: {url: 'data/population.json'},\n        mark: 'rule',\n        encoding: {\n          y: {field: 'age', type: 'ordinal'},\n          x: {aggregate: 'min', field: 'people', type: 'quantitative'},\n          x2: {aggregate: 'max', field: 'people', type: 'quantitative'}\n        }\n      });\n    });\n    it('should do nothing if there is no missing x or y', () => {\n      const spec: NormalizedSpec = {\n        data: {url: 'data/population.json'},\n        mark: 'rule',\n        encoding: {\n          y: {field: 'age', type: 'ordinal'},\n          x: {aggregate: 'min', field: 'people', type: 'quantitative'},\n          x2: {aggregate: 'max', field: 'people', type: 'quantitative'}\n        }\n      };\n\n      assert.deepEqual(normalize(spec, defaultConfig), spec);\n    });\n\n    it('should convert x2 -> x if there is no x in the encoding', () => {\n      const spec: NormalizedSpec = {\n        data: {url: 'data/population.json'},\n        mark: 'rule',\n        encoding: {\n          x2: {field: 'age', type: 'ordinal'},\n          y: {aggregate: 'min', field: 'people', type: 'quantitative'},\n          y2: {aggregate: 'max', field: 'people', type: 'quantitative'}\n        }\n      };\n\n      assert.deepEqual<NormalizedSpec>(normalize(spec, defaultConfig), {\n        data: {url: 'data/population.json'},\n        mark: 'rule',\n        encoding: {\n          x: {field: 'age', type: 'ordinal'},\n          y: {aggregate: 'min', field: 'people', type: 'quantitative'},\n          y2: {aggregate: 'max', field: 'people', type: 'quantitative'}\n        }\n      });\n    });\n  });\n});\n"]}