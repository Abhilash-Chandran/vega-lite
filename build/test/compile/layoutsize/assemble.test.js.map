{"version":3,"file":"assemble.test.js","sourceRoot":"","sources":["../../../../test/compile/layoutsize/assemble.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {X} from '../../../src/channel';\nimport {sizeSignals} from '../../../src/compile/layoutsize/assemble';\nimport * as log from '../../../src/log';\nimport {parseFacetModel, parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('compile/layout', () => {\n  describe('sizeExpr', () => {\n    it('should return correct formula for ordinal-point scale', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point', // point mark produce ordinal-point scale by default\n        encoding: {\n          x: {field: 'a', type: 'ordinal'}\n        }\n      });\n\n      const size = sizeSignals(model, 'width');\n      expect(size).toEqual([\n        {\n          name: 'x_step',\n          value: 20\n        },\n        {\n          name: 'width',\n          update: \"bandspace(domain('x').length, 1, 0.5) * x_step\"\n        }\n      ]);\n    });\n\n    it('should return correct formula for ordinal-band scale with custom padding', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'rect', // rect produces ordinal-band by default\n        encoding: {\n          x: {field: 'a', type: 'ordinal', scale: {padding: 0.3}}\n        }\n      });\n\n      const size = sizeSignals(model, 'width');\n      expect(size).toEqual([\n        {\n          name: 'x_step',\n          value: 20\n        },\n        {\n          name: 'width',\n          update: \"bandspace(domain('x').length, 0.3, 0.3) * x_step\"\n        }\n      ]);\n    });\n\n    it('should return correct formula for ordinal-band scale with custom paddingInner', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'rect', // rect produces ordinal-band by default\n        encoding: {\n          x: {field: 'a', type: 'ordinal', scale: {paddingInner: 0.3}}\n        }\n      });\n\n      const size = sizeSignals(model, 'width');\n      expect(size).toEqual([\n        {\n          name: 'x_step',\n          value: 20\n        },\n        {\n          name: 'width',\n          update: \"bandspace(domain('x').length, 0.3, 0.15) * x_step\"\n        }\n      ]);\n    });\n\n    it('should return only step if parent is facet', () => {\n      const model = parseFacetModel({\n        facet: {\n          row: {field: 'a', type: 'ordinal'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'nominal'}\n          }\n        },\n        resolve: {\n          scale: {x: 'independent'}\n        }\n      });\n      model.parseScale();\n      model.parseLayoutSize();\n\n      const size = sizeSignals(model.child, 'width');\n      expect(size).toEqual([\n        {\n          name: 'child_x_step',\n          value: 20\n        }\n      ]);\n    });\n\n    it('should return static view size for ordinal x-scale with null', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          x: {field: 'a', type: 'ordinal', scale: {rangeStep: null}}\n        }\n      });\n\n      const size = sizeSignals(model, 'width');\n      expect(size).toEqual([{name: 'width', value: 200}]);\n    });\n\n    it('should return static view size for ordinal y-scale with null', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          y: {field: 'a', type: 'ordinal', scale: {rangeStep: null}}\n        }\n      });\n\n      const size = sizeSignals(model, 'height');\n      expect(size).toEqual([{name: 'height', value: 200}]);\n    });\n\n    it('should return static view size for ordinal scale with top-level width', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        width: 205,\n        mark: 'point',\n        encoding: {\n          x: {field: 'a', type: 'ordinal'}\n        }\n      });\n\n      const size = sizeSignals(model, 'width');\n      expect(size).toEqual([{name: 'width', value: 205}]);\n    });\n\n    it(\n      'should return static view size for ordinal scale with top-level width even if there is numeric rangeStep',\n      log.wrap(localLogger => {\n        const model = parseUnitModelWithScaleAndLayoutSize({\n          width: 205,\n          mark: 'point',\n          encoding: {\n            x: {field: 'a', type: 'ordinal', scale: {rangeStep: 20}}\n          }\n        });\n\n        const size = sizeSignals(model, 'width');\n        expect(size).toEqual([{name: 'width', value: 205}]);\n        expect(localLogger.warns[0]).toEqual(log.message.rangeStepDropped(X));\n      })\n    );\n\n    it('should return static view width for non-ordinal x-scale', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          x: {field: 'a', type: 'quantitative'}\n        }\n      });\n\n      const size = sizeSignals(model, 'width');\n      expect(size).toEqual([{name: 'width', value: 200}]);\n    });\n\n    it('should return static view size for non-ordinal y-scale', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          y: {field: 'a', type: 'quantitative'}\n        }\n      });\n\n      const size = sizeSignals(model, 'height');\n      expect(size).toEqual([{name: 'height', value: 200}]);\n    });\n\n    it('should return default rangeStep if axis is not mapped', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {},\n        config: {scale: {rangeStep: 17}}\n      });\n      const size = sizeSignals(model, 'width');\n      expect(size).toEqual([{name: 'width', value: 17}]);\n    });\n\n    it('should return textXRangeStep if axis is not mapped for X of text mark', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'text',\n        encoding: {},\n        config: {scale: {textXRangeStep: 91}}\n      });\n      const size = sizeSignals(model, 'width');\n      expect(size).toEqual([{name: 'width', value: 91}]);\n    });\n  });\n});\n"]}