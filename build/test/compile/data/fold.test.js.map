{"version":3,"file":"fold.test.js","sourceRoot":"","sources":["../../../../test/compile/data/fold.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {FoldTransformNode} from '../../../src/compile/data/fold';\nimport {Transform} from '../../../src/transform';\n\ndescribe('compile/data/fold', () => {\n  describe('FoldTransformNode', () => {\n    it('should return a proper vg transform', () => {\n      const transform: Transform = {\n        fold: ['a', 'b'],\n        as: ['a', 'b']\n      };\n      const fold = new FoldTransformNode(null, transform);\n      assert.deepEqual(fold.assemble(), {\n        type: 'fold',\n        fields: ['a', 'b'],\n        as: ['a', 'b']\n      });\n    });\n\n    it('should handle missing \"as\" field', () => {\n      const transform: Transform = {\n        fold: ['a', 'b']\n      };\n\n      const fold = new FoldTransformNode(null, transform);\n      assert.deepEqual(fold.assemble(), {\n        type: 'fold',\n        fields: ['a', 'b'],\n        as: ['key', 'value']\n      });\n    });\n\n    it('should handle partial \"as\" field', () => {\n      const transform: Transform = {\n        fold: ['a', 'b'],\n        as: ['A'] as any\n      };\n      const fold = new FoldTransformNode(null, transform);\n      assert.deepEqual(fold.assemble(), {\n        type: 'fold',\n        fields: ['a', 'b'],\n        as: ['A', 'value']\n      });\n    });\n\n    it('should return proper produced fields for no \"as\"', () => {\n      const transform: Transform = {\n        fold: ['a', 'b']\n      };\n      const fold = new FoldTransformNode(null, transform);\n      assert.deepEqual(fold.producedFields(), {key: true, value: true});\n    });\n\n    it('should return proper produced fields for complete \"as\"', () => {\n      const transform: Transform = {\n        fold: ['a', 'b'],\n        as: ['A', 'B']\n      };\n      const fold = new FoldTransformNode(null, transform);\n      assert.deepEqual(fold.producedFields(), {A: true, B: true});\n    });\n\n    it('should generate the correct hash', () => {\n      const transform: Transform = {\n        fold: ['a', 'b'],\n        as: ['A', 'B']\n      };\n      const fold = new FoldTransformNode(null, transform);\n      assert.deepEqual(fold.hash(), 'FoldTransform {\"as\":[\"A\",\"B\"],\"fold\":[\"a\",\"b\"]}');\n    });\n  });\n});\n"]}