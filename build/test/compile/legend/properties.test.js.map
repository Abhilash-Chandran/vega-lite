{"version":3,"file":"properties.test.js","sourceRoot":"","sources":["../../../../test/compile/legend/properties.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {LegendOrient} from 'vega';\nimport * as properties from '../../../src/compile/legend/properties';\n\ndescribe('compile/legend', () => {\n  describe('direction()', () => {\n    it('should return horizontal for top/bottom if legend.orient and its config are not defined', () => {\n      const orients: LegendOrient[] = ['top', 'bottom'];\n      for (const orient of orients) {\n        const dir = properties.direction({\n          legend: {orient},\n          legendConfig: {},\n          channel: 'color',\n          scaleType: 'linear'\n        });\n\n        expect(dir).toEqual('horizontal');\n      }\n    });\n\n    it('should return undefined for left/right if legend.orient and its config are not defined', () => {\n      const orients: LegendOrient[] = ['left', 'right', undefined, 'none'];\n      for (const orient of orients) {\n        const dir = properties.direction({\n          legend: {orient},\n          legendConfig: {},\n          channel: 'color',\n          scaleType: 'linear'\n        });\n\n        expect(dir).toEqual(undefined);\n      }\n    });\n\n    it('should return horizontal for quantitative inner legend if legend.orient and its config are not defined', () => {\n      const orients: LegendOrient[] = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\n      for (const orient of orients) {\n        const dir = properties.direction({\n          legend: {orient},\n          legendConfig: {},\n          channel: 'color',\n          scaleType: 'linear'\n        });\n\n        expect(dir).toEqual('horizontal');\n      }\n    });\n\n    it('should return undefined for discrete inner legend if legend.orient and its config are not defined', () => {\n      const orients: LegendOrient[] = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\n      for (const orient of orients) {\n        const dir = properties.direction({\n          legend: {orient},\n          legendConfig: {},\n          channel: 'color',\n          scaleType: 'ordinal'\n        });\n\n        expect(dir).toEqual(undefined);\n      }\n    });\n  });\n\n  describe('values()', () => {\n    it('should return correct timestamp values for DateTimes', () => {\n      const values = properties.values({values: [{year: 1970}, {year: 1980}]}, {field: 'a', type: 'temporal'});\n\n      expect(values).toEqual([\n        {signal: 'datetime(1970, 0, 1, 0, 0, 0, 0)'},\n        {signal: 'datetime(1980, 0, 1, 0, 0, 0, 0)'}\n      ]);\n    });\n\n    it('should simply return values for non-DateTime', () => {\n      const values = properties.values({values: [1, 2, 3, 4]}, {field: 'a', type: 'quantitative'});\n\n      expect(values).toEqual([1, 2, 3, 4]);\n    });\n  });\n\n  describe('clipHeight()', () => {\n    it('should return clip height for gradient legend', () => {\n      const height = properties.clipHeight('gradient');\n      expect(height).toBe(20);\n    });\n\n    it('should simply return for symbol legends', () => {\n      const height = properties.clipHeight('symbol');\n      expect(height).toBeUndefined();\n    });\n  });\n\n  describe('defaultLabelOverlap()', () => {\n    it('should return undefined for linear', () => {\n      const overlap = properties.defaultLabelOverlap('linear');\n      expect(overlap).toBeUndefined();\n    });\n\n    it('should return greedy for log', () => {\n      const overlap = properties.defaultLabelOverlap('log');\n      expect(overlap).toEqual('greedy');\n    });\n\n    it('should return greedy for threshold', () => {\n      const overlap = properties.defaultLabelOverlap('threshold');\n      expect(overlap).toEqual('greedy');\n    });\n  });\n\n  describe('defaultSymbolType()', () => {\n    it('return stroke for line', () => {\n      const overlap = properties.defaultSymbolType('line');\n      expect(overlap).toEqual('stroke');\n    });\n\n    it('return undefined otherwise', () => {\n      const overlap = properties.defaultSymbolType('circle');\n      expect(overlap).toEqual('circle');\n    });\n  });\n});\n"]}